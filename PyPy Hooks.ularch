ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
NsS'front_page_id'
p8
NsS'contents'
p9
(lp10
g0
(clarch.apps.project.project_package
ProjectPackage
p11
g2
Ntp12
Rp13
(dp14
S'name'
p15
VLib
p16
sg9
(lp17
g0
(clarch.apps.project.project_page
ProjectPage
p18
g2
Ntp19
Rp20
(dp21
S'data'
p22
g0
(clarch.apps.notebook.notebook
Notebook
p23
g2
Ntp24
Rp25
(dp26
S'blocks'
p27
(lp28
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p29
g2
Ntp30
Rp31
(dp32
S'text'
p33
V<h1>JIT Hooks</h1><p>First, we want some CSS for styling the PyPy output:</p>
p34
sS'notebook'
p35
g25
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p36
g2
Ntp37
Rp38
(dp39
S'code'
p40
g0
(clarch.apps.source_code
CSSCode
p41
g2
Ntp42
Rp43
(dp44
g40
V.jit_loop_info {\u000a    border: 1px solid #608060;\u000a    border-radius: 5px;\u000a    background: #f8fff8;\u000a    padding: 5px;\u000a}\u000a\u000a.debug_merge_point {\u000a    border: 1px solid #a08060;\u000a    border-radius: 5px;\u000a    background: #fffcf8;\u000a    padding: 5px;\u000a}\u000a\u000a.res_operation {\u000a    border: 1px solid #808060;\u000a    border-radius: 5px;\u000a    background: #fffff8;\u000a    padding: 5px;\u000a}\u000a\u000a.res_operation_name {\u000a    font-family: Fixed;\u000a}\u000a\u000a.box {\u000a    border: 1px solid #606080;\u000a    border-radius: 5px;\u000a    background: #f8f8ff;\u000a    padding: 5px;\u000a}\u000a\u000a.typename {\u000a    font-family: Serif;\u000a    font-size: 1.2em;\u000a    font-weight: bold;\u000a    color: #707070;\u000a}\u000a\u000a.fieldname {\u000a    font-family: Serif;\u000a    font-size: 0.8em;\u000a    font-weight: bold;\u000a    color: #406080;\u000a}
p45
sS'editable'
p46
I01
sbsS'var_name'
p47
Vpypy_css
p48
sg35
g25
sbag0
(g29
g2
Ntp49
Rp50
(dp51
g33
V<p>Now we do some experiments</p>
p52
sg35
g25
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p53
g2
Ntp54
Rp55
(dp56
g40
g0
(clarch.apps.source_code
PythonCode
p57
g2
Ntp58
Rp59
(dp60
g40
Vimport pypyjit\u000a\u000afrom britefury.default_perspective.default_perspective import DefaultPerspective\u000afrom britefury.pres.pres import Pres\u000afrom britefury.pres.html import Html\u000afrom britefury.live.live_value import LiveValue\u000a\u000a\u000a\u000adef _present_object(typename, css_class_name, field_name_value_pairs):\u000a    fields = []\u000a    for n, v in field_name_value_pairs:\u000a        fields.extend(['<span class="fieldname">{0}=</span>'.format(n), v, '<br>'])\u000a        \u000a    return Html(*([\u000a                '<div class="{0}">'.format(css_class_name),\u000a                '<span class="typename">{0}</span><br>'.format(typename)] + fields +\u000a                ['</div>'])\u000a		).use_css(source=pypy_css)\u000a    \u000a\u000a\u000a\u000a@DefaultPerspective.instance.presenter(pypyjit.JitLoopInfo)\u000adef _present_JitLoopInfo(model, fragment):\u000a    return _present_object('JitLoopInfo', 'jit_loop_info', [\u000a			('greenkey', model.greenkey),\u000a			('jitdriver_name', model.jitdriver_name),\u000a			('loop_no', model.loop_no),\u000a			('operations', Html(*model.operations)),\u000a		])\u000a\u000a\u000a@DefaultPerspective.instance.presenter(pypyjit.DebugMergePoint)\u000adef _present_DebugMergePoint(model, fragment):\u000a    return _present_object('DebugMergePoint', 'debug_merge_point', [\u000a			('dir()', dir(model)),\u000a       	\u000a		])\u000a\u000a\u000a@DefaultPerspective.instance.presenter(pypyjit.ResOperation)\u000adef _present_ResOperation(model, fragment):\u000a    return Html('<span class="res_operation_name">{0}</span>'.format(model.name), model.result, model.getarg(0), '<br>')\u000a#    return _present_object('ResOperation', 'res_operation', [\u000a#			('name', model.name),\u000a#			#('result', model.result),\u000a#			('getarg()', model.getarg(0)),\u000a#			('dir()', dir(model)),\u000a#      	\u000a#		])\u000a\u000a\u000a\u000a@DefaultPerspective.instance.presenter(pypyjit.Box)\u000adef _present_Box(model, fragment):\u000a    return Html(str(model))\u000a\u000a\u000a\u000a\u000aclass JitMonitor (object):\u000a    def __init__(self):\u000a        self.__loop_info = LiveValue(Html('Hook not invoked'))\u000a        \u000a    \u000a    def __enter__(self):\u000a        pypyjit.set_optimize_hook(self.__hook)\u000a        \u000a        \u000a    def __exit__(self, *args):\u000a        pypyjit.set_optimize_hook(None)\u000a        return False\u000a        \u000a        \u000a        \u000a    def __hook(self, loop_info):\u000a        self.__loop_info.value = loop_info\u000a    \u000a    \u000a    \u000a    def __present__(self, fragment):\u000a        return self.__loop_info\u000a\u000a\u000a    \u000amon = JitMonitor()\u000a\u000a\u000a\u000adef tri(n):\u000a    s = 0\u000a    for i in xrange(n):\u000a        s+=i\u000a    return s\u000a\u000a\u000adef repeat(f,N):\u000a    for i in xrange(N):\u000a        f()\u000a\u000a		\u000a\u000awith mon:\u000a	repeat(lambda: tri(1024), 1024)\u000a    \u000a\u000amon\u000a\u000a\u000a
p61
sg46
I01
sbsg35
g25
sbasbsg15
Vjit_hooks
p62
sS'id'
p63
I0
sbasbasb.