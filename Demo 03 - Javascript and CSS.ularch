ccopy_reg
_reconstructor
p0
(clarch.worksheet.worksheet
Worksheet
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'blocks'
p6
(lp7
g0
(clarch.worksheet.worksheet
WorksheetBlockText
p8
g2
Ntp9
Rp10
(dp11
S'worksheet'
p12
g4
sS'text'
p13
V<h1>Javascript and CSS</h1><p>So far, we have seen how to present Python objects in the browser by converting them to HTML. This only allows very basic usage. For a truly useful web-based programming environment, we must support interaction with CSS and Javascript.</p><h1>tl;dr</h1><p>You can add CSS style-sheets and Javascript code to your pages by referencing them using simple API calls. The API calls attach them to the HTML content that requires them.</p><h2>Referencing CSS style sheets and JS scripts</h2><p>We must allow content to reference the CSS and JS files&nbsp;required to display the it. The <code>use_css</code>&nbsp;and <code>use_js</code>&nbsp;methods provided by presentation types allow for this.</p><p>The <code>use_css</code>&nbsp;and <code>use_js</code>&nbsp;methods attach the CSS and JS asset requirements&nbsp;the presentation. When the presentation is sent to the browser, the CSS and JS assets are loaded. If the presentation is constructed but never used, the assets that it references will never be loaded by the browser.</p><h3>CSS Stylesheets</h3><p>First, lets look at referencing files:</p>
p14
sbag0
(clarch.worksheet.worksheet
WorksheetBlockCode
p15
g2
Ntp16
Rp17
(dp18
g12
g4
sS'code'
p19
g0
(clarch.source_code
PythonCode
p20
g2
Ntp21
Rp22
(dp23
g19
V# Get our Html presentation type\u000afrom britefury.pres.html import Html\u000a\u000a# Our HTML content\u000ax = Html('<div class="python_console_header">Lets display some text within a border that has the same appearance as the Python console header, the style of which we obtain from the console CSS style sheet.</div>')\u000a# use_css operates as a chain method\u000ax = x.use_css(url='/static/console.css')			# The url named parameter is not strictly needed; x.use_css('/console.css') would work just as well\u000a\u000a# Display it\u000ax
p24
sS'editable'
p25
I01
sbsbag0
(g8
g2
Ntp26
Rp27
(dp28
g12
g4
sg13
V<p>Invoking <code>use_css</code>&nbsp;will add a LINK to the HEAD element of the page, loading the CSS file from the specified URL.</p><p>Now, lets look at providing the CSS source directly. Once again, we use the <code>use_css</code>&nbsp;method, but this time we pass the css source to a parameter named 'source'.</p><p>The CSS is specified in a CSS code block, which you can create from the edit menu. Note the 'Variable name' field; this names the global variable from which the CSS will be available in text form. Note that the variable <code>css_source</code> is used in the python code below.</p>
p29
sbag0
(clarch.worksheet.worksheet
WorksheetBlockSource
p30
g2
Ntp31
Rp32
(dp33
g12
g4
sg19
g0
(clarch.source_code
CSSCode
p34
g2
Ntp35
Rp36
(dp37
g19
V.test_border {\u000a	font-family: "Open Sans", sans-serif;\u000a	color: #2080a0;\u000a	border: 1px solid #2080a0;\u000a	background-image: url('/static/speckle.png');\u000a    box-shadow: 0 7px 5px #aaa;\u000a    margin: 0 0.5em 1.5em 0.5em;\u000a	border-radius: 20px;\u000a	padding: 20px;\u000a}
p38
sg25
I01
sbsS'var_name'
p39
Vcss_source
p40
sbag0
(g15
g2
Ntp41
Rp42
(dp43
g12
g4
sg19
g0
(g20
g2
Ntp44
Rp45
(dp46
g19
Vy = Html('<div class="test_border">Some more text in a different border, with a drop shadow. This time, the CSS source provided directly to the API.</div>')\u000ay = y.use_css(source=css_source)\u000ay
p47
sg25
I01
sbsbag0
(g8
g2
Ntp48
Rp49
(dp50
g12
g4
sg13
V<h3>Javascript</h3><p>The <code>use_js</code>&nbsp;method works in much the same way as <code>use_css</code>; providing a URL will cause the JS file to be loaded from the specified location, while providing source will insert it into the page.</p><p>Lets build a Javascript function that opens a dialog box using JQuery (always included by U-Larch), then construct a button that invokes it when clicked:</p>
p51
sbag0
(g30
g2
Ntp52
Rp53
(dp54
g12
g4
sg19
g0
(clarch.source_code
JSCode
p55
g2
Ntp56
Rp57
(dp58
g19
Vfunction open_a_dialog() {\u000a	// Build the contents; just a paragraph with a greeting\u000a	var dialogContents = $('<p>This dialog was created using Javascript, running on the client, with the code provided via the Python API.</p>');\u000a\u000a	// Append to the document\u000a	$(document.body).append(dialogContents);\u000a\u000a	// Use JQuery to convert to a dialog\u000a	$(dialogContents).dialog();\u000a}
p59
sg25
I01
sbsg39
Vopen_dialog_js
p60
sbag0
(g15
g2
Ntp61
Rp62
(dp63
g12
g4
sg19
g0
(g20
g2
Ntp64
Rp65
(dp66
g19
V# Build the button, with an onclick handler\u000adialog_button = Html('<button onclick="javascript:open_a_dialog();">Show the dialog</button>')\u000a\u000a# Ensure that the relevant JS is available for use\u000adialog_button = dialog_button.use_js(source=open_dialog_js)\u000a\u000adialog_button
p67
sg25
I01
sbsbag0
(g8
g2
Ntp68
Rp69
(dp70
g12
g4
sg13
V<h2>Javascript DOM node initialisation</h2><p>We can also ask U-Larch to invoke a Javascript function to initialise a browser DOM node that has been constructed. We can use this approach as an alternative to selecting DOM nodes by class or ID.&nbsp;To do this, we use the <code>js_function_call</code> method.</p><p>In this example, we will use jQuery to convert an <code>input</code> element into a spinner widget:</p>
p71
sbag0
(g30
g2
Ntp72
Rp73
(dp74
g12
g4
sg19
g0
(g55
g2
Ntp75
Rp76
(dp77
g19
V// The function will receive the DOM node as its first argument.\u000afunction convert_to_spinner(node) {\u000a	// Use the jQuery spinner() method to convert it to a spinner.\u000a	$(node).spinner();\u000a}
p78
sg25
I01
sbsg39
Vconvert_to_spinner_js
p79
sbag0
(g15
g2
Ntp80
Rp81
(dp82
g12
g4
sg19
g0
(g20
g2
Ntp83
Rp84
(dp85
g19
V# Input element\u000aspinner = Html('<input name="spin" value="0" />')\u000a\u000a# Invoke the JS function 'convert_to_spinner' to perform the conversion\u000a# The DOM node constructed by the Html fragment will be passed as the first argument to the JS function call\u000aspinner = spinner.js_function_call('convert_to_spinner')\u000a\u000a# Attach the required JS source, so that the 'convert_to_spinner' function is available for use\u000aspinner = spinner.use_js(source=convert_to_spinner_js)\u000a\u000aspinner
p86
sg25
I01
sbsbag0
(g8
g2
Ntp87
Rp88
(dp89
g12
g4
sg13
V<p>Alternatively, the <code>js_eval</code> method takes a Javascript expression to evaluate. When the expression is evaluated, the variable '<code>node</code>' contains a reference to the DOM node that is to be initialised. We can use this to create a spinner like so:</p>
p90
sbag0
(g15
g2
Ntp91
Rp92
(dp93
g12
g4
sg19
g0
(g20
g2
Ntp94
Rp95
(dp96
g19
V# Input element\u000aspinner = Html('<input name="spin" value="0" />')\u000a\u000a\u000a# Call the jQuery spinner method directly.\u000aspinner = spinner.js_eval('$(node).spinner();')\u000a\u000a# Just display this; no additional JS code needed here\u000aspinner
p97
sg25
I01
sbsbasb.