ccopy_reg
_reconstructor
p0
(clarch.worksheet.worksheet
Worksheet
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'blocks'
p6
(lp7
g0
(clarch.worksheet.worksheet
WorksheetBlockText
p8
g2
Ntp9
Rp10
(dp11
S'worksheet'
p12
g4
sS'text'
p13
V<h1>Visuals from d3.js</h1><p>In this worksheet, we will explore how we can use the d3.js client-side library to generate visuals from server-side data.</p><p>In the first example, we generate some random data and display it as a bar chart.</p>
p14
sbag0
(clarch.worksheet.worksheet
WorksheetBlockSource
p15
g2
Ntp16
Rp17
(dp18
g12
g4
sS'code'
p19
g0
(clarch.source_code
JSCode
p20
g2
Ntp21
Rp22
(dp23
g19
V// First, we define some javascript code to display our chart.\u000a// This code was adapted from the bar chart example from the d3.js website.\u000a\u000afunction init_chart(node, data, bar_width, bar_height, data_size) {\u000a	// First, generate an array of zeros\u000a	var zeroes = d3.range(data_size).map(function() {return 0.0;});\u000a\u000a    // Scales for our chart: X and Y\u000a	var x = d3.scale.linear()\u000a        .domain([0, 1])\u000a        .range([0, bar_width]);\u000a    \u000a    var y = d3.scale.linear()\u000a        .domain([0, 100])\u000a        .rangeRound([0, bar_height]);\u000a\u000a	// Get a reference to the chart DOM node; passed as the first argument\u000a    var chart = d3.select(node);\u000a    \u000a	// Define the bars\u000a    chart.selectAll("rect")\u000a        .data(zeroes)\u000a      .enter().append("rect")\u000a        .attr("x", function(d, i) { return x(i) - .5; })\u000a        .attr("y", function(d) { return bar_height - y(d) - .5; })\u000a        .attr("width", bar_width)\u000a        .attr("height", function(d) { return y(d); });\u000a\u000a	// Define the axes\u000a	chart.append("line")\u000a        .attr("x1", 0)\u000a        .attr("x2", bar_width * data.length)\u000a        .attr("y1", bar_height - .5)\u000a        .attr("y2", bar_height - .5)\u000a        .style("stroke", "#000");\u000a\u000a    // Transition the bars so that they grow to their respective values\u000a    chart.selectAll("rect")\u000a    	.data(data)\u000a    	.transition()\u000a    	.duration(1000)\u000a    	.attr("y", function(d) { return bar_height - y(d) - .5; })\u000a    	.attr("height", function(d) { return y(d); });\u000a}
p24
sS'editable'
p25
I01
sbsS'var_name'
p26
Vbar_chart_js
p27
sbag0
(g15
g2
Ntp28
Rp29
(dp30
g12
g4
sg19
g0
(clarch.source_code
CSSCode
p31
g2
Ntp32
Rp33
(dp34
g19
V.chart rect {\u000a  fill: steelblue;\u000a  stroke: white;\u000a}
p35
sg25
I01
sbsg26
Vbar_chart_css
p36
sbag0
(clarch.worksheet.worksheet
WorksheetBlockCode
p37
g2
Ntp38
Rp39
(dp40
g12
g4
sg19
g0
(clarch.source_code
PythonCode
p41
g2
Ntp42
Rp43
(dp44
g19
V# We need random\u000aimport random\u000a\u000a# We need Html further down\u000afrom britefury.pres.html import Html\u000a\u000adata = [random.gauss(50.0, 10.0)   for i in xrange(33)]\u000a\u000a# The chart consists of an SVG element\u000achart = Html('<svg class="chart" width=660 height=80></svg>')\u000a# Initialise it with the function declared above. Additional arguments:\u000a# the resource object to give it the data, the bar width and height and the number of data values\u000achart = chart.js_function_call('init_chart', data, 20, 80, len(data))\u000a# We need the JS and CSS declared above\u000achart = chart.use_js(source=bar_chart_js).use_css(source=bar_chart_css)\u000a# We need d3.js\u000achart = chart.use_js('/d3.v3.min.js')\u000a\u000a# Display\u000achart\u000a
p45
sg25
I01
sbsbag0
(g8
g2
Ntp46
Rp47
(dp48
g12
g4
sg13
V<h1>Displaying dynamic data</h1><p>In the second example, we are going to provide a function that will generate new data each time it is called. We will serve this up via the resource system, so that the client side JS can access it.</p><p>To serve the data&nbsp;to the client, we need to use one of the subclasses of&nbsp;<code>Resource</code>. Given that we are serving JSON data, we will use the&nbsp;<code>JsonFnResource</code>&nbsp;class.&nbsp;<code>Resource</code>&nbsp;subclasses&nbsp;<code>Pres</code>; the base presentation type. If we attempt to display a resource class, we get the URL from which the data is available:</p>
p49
sbag0
(g37
g2
Ntp50
Rp51
(dp52
g12
g4
sg19
g0
(g41
g2
Ntp53
Rp54
(dp55
g19
V# Import JsonFnResource\u000afrom britefury.pres.resource import JsonFnResource\u000a\u000adef make_data():\u000a    #import random\u000a    return [random.gauss(50.0, 10.0)   for i in xrange(33)]\u000a\u000adata_resource = JsonFnResource(make_data)\u000a\u000adata_resource
p56
sg25
I01
sbsbag0
(g8
g2
Ntp57
Rp58
(dp59
g12
g4
sg13
V<p>If you copy and paste the above URL into your browser - you will want to prepend the server address (127.0.0.1:5000) -&nbsp;you will see a JSON representation of the data that was generated.</p><p>It is worth noting at this point that if we pass a <code>Resource</code> instance (such as the <code>JsonFnResource</code> instance above) to the <code>js_function_call</code> method provided by presentation types, the URL will be passed to the invoked Javascript function on the client side.</p><p>Now, we use d3.js to display the data generated in the form of a chart.</p>
p60
sbag0
(g15
g2
Ntp61
Rp62
(dp63
g12
g4
sg19
g0
(g20
g2
Ntp64
Rp65
(dp66
g19
Vfunction init_dynamic_chart(node, data_rsc, bar_width, bar_height, data_size) {\u000a	// First, generate an array of zeros\u000a	var data = d3.range(data_size).map(function() {return 0.0;});\u000a\u000a    // Scales for our chart: X and Y\u000a	var x = d3.scale.linear()\u000a        .domain([0, 1])\u000a        .range([0, bar_width]);\u000a    \u000a    var y = d3.scale.linear()\u000a        .domain([0, 100])\u000a        .rangeRound([0, bar_height]);\u000a\u000a	// Get a reference to the chart DOM node; passed as the first argument\u000a    var chart = d3.select(node);\u000a    \u000a	// Define the bars\u000a    chart.selectAll("rect")\u000a        .data(data)\u000a      .enter().append("rect")\u000a        .attr("x", function(d, i) { return x(i) - .5; })\u000a        .attr("y", function(d) { return bar_height - y(d) - .5; })\u000a        .attr("width", bar_width)\u000a        .attr("height", function(d) { return y(d); });\u000a\u000a	// Define the axes\u000a	chart.append("line")\u000a        .attr("x1", 0)\u000a        .attr("x2", bar_width * data.length)\u000a        .attr("y1", bar_height - .5)\u000a        .attr("y2", bar_height - .5)\u000a        .style("stroke", "#000");\u000a\u000a	// Every 1500ms, redraw the chart\u000a	var timer = setInterval(function() {\u000a		redraw();\u000a	}, 1500);\u000a\u000a	function redraw() {\u000a        // Make an asynchronous request to the specified URL from which the data can be acquired.\u000a        d3.json(data_rsc.url, function(xs) {\u000a            // Transition the bars so that they reach their respective values\u000a            chart.selectAll("rect")\u000a                  .data(xs)\u000a                .transition()\u000a                  .duration(1000)\u000a                  .attr("y", function(d) { return bar_height - y(d) - .5; })\u000a                  .attr("height", function(d) { return y(d); });\u000a        });\u000a	}\u000a\u000a	// Initial redraw\u000a	redraw();\u000a}
p67
sg25
I01
sbsg26
Vdynamic_bar_chart_js
p68
sbag0
(g37
g2
Ntp69
Rp70
(dp71
g12
g4
sg19
g0
(g41
g2
Ntp72
Rp73
(dp74
g19
V\u000a# The chart consists of an SVG element\u000adynamic_chart = Html('<svg class="chart" width=660 height=80></svg>')\u000a# Initialise it with the function declared above. Additional arguments:\u000a# the resource object to give it the data, the bar width and height and the number of data values\u000adynamic_chart = dynamic_chart.js_function_call('init_dynamic_chart', data_resource, 20, 80, 33)\u000a# We need the JS and CSS declared above\u000adynamic_chart = dynamic_chart.use_js(source=dynamic_bar_chart_js).use_css(source=bar_chart_css)\u000a# We need d3.js\u000adynamic_chart = dynamic_chart.use_js('/d3.v3.min.js')\u000a\u000a# Display\u000adynamic_chart
p75
sg25
I01
sbsbag0
(g8
g2
Ntp76
Rp77
(dp78
g12
g4
sg13
V<p>Feel free to refresh the worksheet with Control-Enter to see the chart re-display.</p>
p79
sbasb.