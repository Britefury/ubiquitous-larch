ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vdevenv
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1 style="text-align:center">Front page</h1><p><br></p><p>You will have seen the front page when you first accessed Ubiquitous Larch using your browser. There you can find a list of open documents and a list of consoles.</p><p><br></p><h2>Open documents</h2><p>Ubiquitous Larch looks for files ending with the extension <code>.ularch</code>. By default it looks in the current working directory. You can change the directory by adding the <code>-d</code> or <code>--docpath</code> command line option.</p><p>Below the document list you can find buttons for creating new documents or importing <a data-cke-saved-href="http://ipython.org/notebook.html" href="http://ipython.org/notebook.html">IPython notebooks</a>. IPython notebooks can be imported either by file upload or by providing a URL from which the notebook can be downloaded.</p><p>Above the list of documents is the <em>reload</em> button. Click it to reload the documents from your file system. This is useful if you download some new documents and wish to access them without restarting Ubiquitous Larch. <strong>Please note that any unsaved changes in your open documents will be lost when you click <em>reload</em>.</strong></p><p><br></p><h2>Command bar<br></h2><p>The command bar can be accessed by either pressing the button at the top right of the page or by pressing the&nbsp;<em>escape</em>&nbsp;key. After activating the command bar, you type in a key-sequence which corresponds to the command you wish to use. To learn the key sequences that are available, press&nbsp;<em>H</em>&nbsp;while the command bar is active. Please feel free to try this now.</p>
p28
sS'notebook'
p29
g19
sbasbsS'name'
p30
Vfrontpage
p31
sS'id'
p32
I0
sbag0
(g12
g2
Ntp33
Rp34
(dp35
g16
g0
(g17
g2
Ntp36
Rp37
(dp38
g21
(lp39
g0
(g23
g2
Ntp40
Rp41
(dp42
g27
V<h1 style="text-align: center;">Notebooks</h1><p>The core of the ULarch programming environment is the notebook system. A notebook consists of&nbsp;a sequence of editable blocks, that contain either rich text - like this one - or code - such as the ones below. To edit the contents of a block, click within it to place the caret and start typing.</p><p>The edit menu at the top of the page contains options for adding new blocks to a notebook. Alternatively, these commands can be accessed from the command bar, which will be described below.</p><h2>Python Code</h2><p>Python code blocks can be executed, with the results displayed below each block. To execute the blocks in a notebook, press Control-Enter or use the&nbsp;<em>Execute</em>&nbsp;button in the command bar at the top.</p><p>Output sent to the standard output and standard error streams is displayed:</p>
p43
sg29
g37
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p44
g2
Ntp45
Rp46
(dp47
S'code'
p48
g0
(clarch.apps.source_code
PythonCode
p49
g2
Ntp50
Rp51
(dp52
g48
Vprint 'Hello world'
p53
sS'editable'
p54
I01
sbsg29
g37
sbag0
(g23
g2
Ntp55
Rp56
(dp57
g27
V<p>If the last line is an expression that can be evaluated, the resulting value is displayed:</p>
p58
sg29
g37
sbag0
(g44
g2
Ntp59
Rp60
(dp61
g48
g0
(g49
g2
Ntp62
Rp63
(dp64
g48
Vimport math\u000a\u000amath.pi*10*10
p65
sg54
I01
sbsg29
g37
sbag0
(g23
g2
Ntp66
Rp67
(dp68
g27
V<p>If the result is an object, it is displayed in a debugger style form. The sections&nbsp;(<em>Type</em>,&nbsp;<em>Attributes</em>&nbsp;and&nbsp;<em>repr</em>) can be expanded to show the type, attribute values and string representation of the object respectively:</p>
p69
sg29
g37
sbag0
(g44
g2
Ntp70
Rp71
(dp72
g48
g0
(g49
g2
Ntp73
Rp74
(dp75
g48
Vclass Point (object):\u000a    def __init__(self, x, y):\u000a        self.x = x\u000a        self.y = y\u000a\u000aPoint(10.0, 20.0)
p76
sg54
I01
sbsg29
g37
sbasbsg30
Vnotebooks
p77
sg32
I1
sbag0
(g12
g2
Ntp78
Rp79
(dp80
g16
g0
(g17
g2
Ntp81
Rp82
(dp83
g21
(lp84
g0
(g23
g2
Ntp85
Rp86
(dp87
g27
V<h1 style="text-align:center">Projects</h1><p>Python programs and libraries are often broken into modules and packages, with each module being a Python source code file and each package being a directory.</p><p>Ubiquitous Larch projects fulfil the same role. This document is takes the form of a project. Its project page can be accessed by clicking <a data-cke-saved-href="/pages/docs/dev_environment" href="/pages/docs/dev_environment">here</a>. If you follow the link, you will see that the development environment section of the documentation comes as a project. There are pages for the <a data-cke-saved-href="/pages/docs/dev_environment/frontpage" href="/pages/docs/dev_environment/frontpage">front page</a>, <a data-cke-saved-href="/pages/docs/dev_environment/notebooks" href="/pages/docs/dev_environment/notebooks">notebooks</a> and <a data-cke-saved-href="/pages/docs/dev_environment/projects" href="/pages/docs/dev_environment/projects">projects</a> (this page).&nbsp;The development environment project also contains a package called <code>lib</code>&nbsp;that contains two pages - <code>circle</code> and <code>rectangle</code>&nbsp;- each of which is a notebook.&nbsp;Each notebook acts as a module; its contents can be imported much as they can in a normal Python module.</p><p>There are two things that you should be aware of however.</p><h2>Root package name</h2><p>You will notice that the project page has a&nbsp;<em>root package name</em>. This is the name under which all packages and pages can be imported; <em>devenv</em>&nbsp;in the case of this project. For example, to import the&nbsp;<em>circle</em>&nbsp;module from the&nbsp;<em>lib</em>&nbsp;package, we would use:</p>
p88
sg29
g82
sbag0
(g44
g2
Ntp89
Rp90
(dp91
g48
g0
(g49
g2
Ntp92
Rp93
(dp94
g48
Vfrom devenv.lib import circle\u000a\u000acircle.circle_area(10)
p95
sg54
I01
sbsg29
g82
sbag0
(g44
g2
Ntp96
Rp97
(dp98
g48
g0
(g49
g2
Ntp99
Rp100
(dp101
g48
Vcircle.circle_circumference(10)
p102
sg54
I01
sbsg29
g82
sbag0
(g23
g2
Ntp103
Rp104
(dp105
g27
V<h2>Unload modules</h2><p>Making changes to the contents of another module does&nbsp;<em>not</em>&nbsp;cause its contents to be re-imported into other modules. Python's&nbsp;<code>sys.modules</code>&nbsp;dictionary (part of the Python system)&nbsp;will contain stale references to&nbsp;the old (incorrect) versions of the modules. The&nbsp;<em>Unload</em>&nbsp;button on the project page will unload any modules that were imported from the project. You can then re-execute the page that uses the modified module to get the correct results.</p><p>For example, the&nbsp;<code>rectangle</code>&nbsp;module has an error in the impementation of&nbsp;<code>rect_circumference</code>, as seen below:</p>
p106
sg29
g82
sbag0
(g44
g2
Ntp107
Rp108
(dp109
g48
g0
(g49
g2
Ntp110
Rp111
(dp112
g48
Vfrom devenv.lib import rectangle\u000a\u000arectangle.rect_circumference(10, 20)		# Should result in 60
p113
sg54
I01
sbsg29
g82
sbag0
(g23
g2
Ntp114
Rp115
(dp116
g27
V<p>Go to the <a data-cke-saved-href="/pages/docs/dev_environment" href="/pages/docs/dev_environment">project</a>, enter the&nbsp;<code>rectangle</code>&nbsp;module&nbsp;and make the necessary changes.</p><p>Then, you need to unload the existing modules. Either click the&nbsp;<em>Unload</em>&nbsp;button on the project page or use the command sequence <kbd>Esc-U</kbd>. After that, re-execute this notebook to get the correct result.</p>
p117
sg29
g82
sbasbsg30
Vprojects
p118
sg32
I2
sbag0
(clarch.apps.project.project_package
ProjectPackage
p119
g2
Ntp120
Rp121
(dp122
g30
Vlib
p123
sg10
(lp124
g0
(g12
g2
Ntp125
Rp126
(dp127
g16
g0
(g17
g2
Ntp128
Rp129
(dp130
g21
(lp131
g0
(g23
g2
Ntp132
Rp133
(dp134
g27
V<h1>Helper functions: rectangle</h1><p>Please go to the page called&nbsp;<em>main</em>&nbsp;within this project to see the main tutorial; this page contains helper functions.</p>
p135
sg29
g129
sbag0
(g44
g2
Ntp136
Rp137
(dp138
g48
g0
(g49
g2
Ntp139
Rp140
(dp141
g48
Vdef rect_circumference(width, height):\u000a    # Mistake here\u000a    \u000a    # Should multiply by 2; see the main page\u000a    return (width + height)\u000a\u000adef rect_area(width, height):\u000a    return width * height
p142
sg54
I01
sbsg29
g129
sbasbsg30
Vrectangle
p143
sg32
I3
sbag0
(g12
g2
Ntp144
Rp145
(dp146
g16
g0
(g17
g2
Ntp147
Rp148
(dp149
g21
(lp150
g0
(g23
g2
Ntp151
Rp152
(dp153
g27
V<h1>Helper functions: circle</h1><p>Please go to the page called&nbsp;<em>main</em>&nbsp;within this project to see the main tutorial; this page contains helper functions.</p>
p154
sg29
g148
sbag0
(g44
g2
Ntp155
Rp156
(dp157
g48
g0
(g49
g2
Ntp158
Rp159
(dp160
g48
Vimport math\u000a\u000adef circle_circumference(radius):\u000a    return math.pi * radius * 2.0\u000a\u000adef circle_area(radius):\u000a    return math.pi * radius * radius
p161
sg54
I01
sbsg29
g148
sbasbsg30
Vcircle
p162
sg32
I4
sbasbasb.