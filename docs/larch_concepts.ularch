ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
NsS'front_page_id'
p8
NsS'contents'
p9
(lp10
g0
(clarch.apps.project.project_page
ProjectPage
p11
g2
Ntp12
Rp13
(dp14
S'data'
p15
g0
(clarch.apps.notebook.notebook
Notebook
p16
g2
Ntp17
Rp18
(dp19
S'blocks'
p20
(lp21
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p22
g2
Ntp23
Rp24
(dp25
S'text'
p26
V<h1 style="text-align:center">Larch concepts:&nbsp;presentation system</h1><p><br></p><p>The Larch presentation system is based around the concepts&nbsp;of presentation types and type coercion.</p><h3>Presentation types</h3><p>The Larch&nbsp;<em>presentation types</em>&nbsp;are used to represent visually presentable content.</p><p>In contrast, within a standard Python console, values are displayed as text, by converting them to strings and outputting&nbsp;the text. This&nbsp;conversion process is known as type coercion.</p><p>Ubiquitous Larch displays&nbsp;values visually through a similar mechanism. Rather than converting a value to a string, it is converted to a presentation type (technically,&nbsp;an instance of a presentation type).</p>
p27
sS'notebook'
p28
g18
sbag0
(g22
g2
Ntp29
Rp30
(dp31
g26
V<h3>Presentation types act as descriptions and factories</h3><p>Presentation types describe the visual content that is to be displayed. They also&nbsp;act as factories, as&nbsp;they create the visual content that they describe&nbsp;when they are used.</p><p>For example, using the&nbsp;<code>Html</code>&nbsp;presentation type described&nbsp;in&nbsp;<a data-cke-saved-href="http://127.0.0.1:5000/pages/docs/basic_html" href="http://127.0.0.1:5000/pages/docs/basic_html">Basic HTML</a>, we can demonstrate that it acts as a factory that can create&nbsp;multiple copies of the presentation it describes:</p>
p32
sg28
g18
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p33
g2
Ntp34
Rp35
(dp36
S'code'
p37
g0
(clarch.apps.source_code
PythonCode
p38
g2
Ntp39
Rp40
(dp41
g37
V# Import Html\u000afrom larch.pres.html import Html\u000a\u000a# Create an SVG circle\u000acircle = Html('<svg width="25" height="25"><circle cx="12.5" cy="12.5" r="10" fill="#4090a0"/></svg>')\u000a\u000a# Repeated 5 times in a list. Each button is capable of operating independently.\u000a[circle, circle, circle, circle, circle]
p42
sS'editable'
p43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp44
Rp45
(dp46
g26
V<h3>Presentation types can be nested</h3>
p47
sg28
g18
sbag0
(g33
g2
Ntp48
Rp49
(dp50
g37
g0
(g38
g2
Ntp51
Rp52
(dp53
g37
V# Put the circle in a button\u000abutton = Html('<button>', circle, '</button>')\u000a\u000a# Put buttons within text\u000aHtml('Some ', button, ' text ', button, ' separated ', button, ' by ', button, ' circles ', button, ' in ', button, ' buttons, ')
p54
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp55
Rp56
(dp57
g26
V<h3>Presentation types are (mostly) immutable</h3><p>The methods that affect presentation types do not (normally) alter the underlying object; instead they create new objects (see <em>Chain method operations</em>, below). Some convenience methods do alter the underlying object; the <code>append</code> and <code>extend</code> methods of <code>Html</code>&nbsp;for&nbsp;example.</p><p>To demonstrate immutability; observe that <code>circle</code> can still be used by itself, desipite being contained within <code>circle_in_button</code>:</p>
p58
sg28
g18
sbag0
(g33
g2
Ntp59
Rp60
(dp61
g37
g0
(g38
g2
Ntp62
Rp63
(dp64
g37
VHtml('The button containing a circle: ', button, ', followed by the circle by itself: ', circle)
p65
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp66
Rp67
(dp68
g26
V<h3>Chain method operations</h3><p>Chain methods are a pattern that is used frequently by presentation types. For example:</p><pre>y = x.with_event_handler(handler)</pre><p>invokes the <code>with_event_handler</code>&nbsp;chain method, that attaches an event handler. Many presentation system chain methods do not return the original object (x). Instead, a new object is returned that contains x. The new object also derives from the <code>Pres</code> base class, so has a compatible interface, along with the ability to use other chain methods.</p><p>The above chain method is equivalent to:</p><pre>y = EventSource(handler, x)</pre><p>y is therefore an instance of&nbsp;EventSource, that&nbsp;is also a presentation type. y&nbsp;also contains x&nbsp;nested within it.</p>
p69
sg28
g18
sbag0
(g22
g2
Ntp70
Rp71
(dp72
g26
V<h3>Presentation types can set up dynamic behaviour</h3><p>In <a data-cke-saved-href="/pages/docs/js_css" href="/pages/docs/js_css">Javascript and CSS</a> we show how chain methods can be used to attach CSS and Javascript&nbsp;to presentations that use it. We also show how to use Javascript code&nbsp;to initialise and shutdown presentations as they are added to and removed from the browse DOM. In <a data-cke-saved-href="/pages/docs/event_handling" href="/pages/docs/event_handling">Event Handling</a>&nbsp;we show how Python funtions can be used to handle&nbsp;events from the browser DOM.</p>
p73
sg28
g18
sbag0
(g22
g2
Ntp74
Rp75
(dp76
g26
V<h3>Representing plain HTML</h3><p>As seen in <a data-cke-saved-href="/pages/docs/basic_html" href="/pages/docs/basic_html">Basic HTML</a>, for this we use the <code>Html</code> presentation type:</p>
p77
sg28
g18
sbag0
(g33
g2
Ntp78
Rp79
(dp80
g37
g0
(g38
g2
Ntp81
Rp82
(dp83
g37
Vfrom larch.pres.html import Html\u000a\u000aHtml('<h4>Hello world</h4>')
p84
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp85
Rp86
(dp87
g26
V<h3>Motivation</h3><p>Given that the output is rendered by a web browser, a simple means of achieving this would be to convert it to plain HTML, stored either within a string or other container. While feasible, such a representation would not lend itself naturally to:</p><ul><li>Using style-sheets. (Style-sheets could be included&nbsp;in-line, but this would lead to duplication wherever they were used)</li><li>Using Javascript. (Same work-around and issues as style-sheets)</li><li>Receiving user events. (Could be done in client side Javascript, but what about sending messages back to the server to affect data there?)</li><li>Dynamic content (How would you update part of the page in response to changes to&nbsp;server side data? Most likely, you would have to implement dynamic behaviour&nbsp;by hand in each instance where you need it; very time consuming)</li></ul><p>Ubiquitous Larch provides a set of presentation types that simplify the above tasks.</p>
p88
sg28
g18
sbag0
(g22
g2
Ntp89
Rp90
(dp91
g26
V<h3>Implementation</h3><p>The Larch presentation types are classes that are rooted at the abstract base class&nbsp;<code>Pres</code>&nbsp;that is defined within the&nbsp;<code>larch.pres.pres</code>&nbsp;module.</p>
p92
sg28
g18
sbasbsS'name'
p93
Vpres_system
p94
sS'id'
p95
I0
sbag0
(g11
g2
Ntp96
Rp97
(dp98
g15
g0
(g16
g2
Ntp99
Rp100
(dp101
g20
(lp102
g0
(g22
g2
Ntp103
Rp104
(dp105
g26
V<h1 style="text-align:center">Understanding the Larch presentation system</h1><p><br></p><p>In contrast to a normal Python console, the output of blocks within a Larch notebook is visual. The two systems operate on similar principals in that they both use type coercion; values are first converted to a string (in a normal console) or a visual representation (in Larch) to display them.</p><p>Lets take a quick tour of how to build and use visual representations.</p><p><strong>A quick definintion:</strong>&nbsp;presentation type: visual output is created and represented using objects whose types are known as presentation types.</p>
p106
sg28
g100
sbag0
(g22
g2
Ntp107
Rp108
(dp109
g26
V<h3>DEFINITION: Presentation types</h3><p>In a normal Python console, values created by&nbsp;evaluating an expression are displayed. Output in a Python console is plain text, so values&nbsp;are first converted to strings (using <code>repr</code>) so that they can be printed.</p><p>In contrast, the output within Larch is visual. Values are first converted to instances of <em>presentation types</em> for display. Sometimes instances of <em>presentation types</em> are referred to <em>presentation values</em>.</p>
p110
sg28
g100
sbag0
(g22
g2
Ntp111
Rp112
(dp113
g26
V<h3>HTML</h3><p>Lets look at the <code>Html</code> presentation type. We can display a simple heading:</p>
p114
sg28
g100
sbag0
(g33
g2
Ntp115
Rp116
(dp117
g37
g0
(g38
g2
Ntp118
Rp119
(dp120
g37
Vfrom larch.pres.html import Html\u000a\u000aHtml('<h4>A heading</h4>')
p121
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp122
Rp123
(dp124
g26
V<p>We can make an image using SVG:</p>
p125
sg28
g100
sbag0
(g33
g2
Ntp126
Rp127
(dp128
g37
g0
(g38
g2
Ntp129
Rp130
(dp131
g37
Vcircle = Html('<svg width="25" height="25"><circle cx="12.5" cy="12.5" r="10" fill="#4090a0"/></svg>')\u000a\u000acircle
p132
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp133
Rp134
(dp135
g26
V<h3>Nesting</h3><p>We can nest <code>Html</code> visuals within one another:</p>
p136
sg28
g100
sbag0
(g33
g2
Ntp137
Rp138
(dp139
g37
g0
(g38
g2
Ntp140
Rp141
(dp142
g37
Vbutton = Html('<button>', circle, '</button>')\u000a\u000abutton
p143
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp144
Rp145
(dp146
g26
V<p>Presentation types act as descriptions of the visuals that are to be built. They can be re-used as many times as necessary. Each time they appear in a presentation, a new visual is created:</p>
p147
sg28
g100
sbag0
(g33
g2
Ntp148
Rp149
(dp150
g37
g0
(g38
g2
Ntp151
Rp152
(dp153
g37
VHtml('Some ', button, ' text ', circle, ' separated ', button, ' by ', circle, ' buttons ', button, ' and ', circle, ' circles')
p154
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp155
Rp156
(dp157
g26
V<h3>Within Python data structures</h3><p>Presentation types display as expected&nbsp;within Python data structures:</p>
p158
sg28
g100
sbag0
(g33
g2
Ntp159
Rp160
(dp161
g37
g0
(g38
g2
Ntp162
Rp163
(dp164
g37
V# They will appear as items within a list:\u000a[circle, button, circle, button]
p165
sg43
I01
sbsg28
g100
sbag0
(g33
g2
Ntp166
Rp167
(dp168
g37
g0
(g38
g2
Ntp169
Rp170
(dp171
g37
V# Or within a dictionary:\u000a{'button': button, 'circle': circle}
p172
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp173
Rp174
(dp175
g26
V<p>They also display correctly within&nbsp;Python objects:</p>
p176
sg28
g100
sbag0
(g33
g2
Ntp177
Rp178
(dp179
g37
g0
(g38
g2
Ntp180
Rp181
(dp182
g37
Vclass ObjectWithValue (object):\u000a    def __init__(self, x, y):\u000a        self.x = x\u000a        self.y = y\u000a        \u000a\u000a# The object will be displayed in a debugger style form. Click to expand the 'Attributes' section to see x and y.\u000aObjectWithValue(button, circle)
p183
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp184
Rp185
(dp186
g26
V<h3>Dynamic behaviour with Javascript</h3><p>Presentation types allow you to add dynamic behaviour to your visuals.</p><p>In the this example, we will attach some Javascript code that will allow the user to resize the circle by clicking and dragging with the mouse. First for the Javascript code:</p>
p187
sg28
g100
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p188
g2
Ntp189
Rp190
(dp191
g37
g0
(clarch.apps.source_code
JSCode
p192
g2
Ntp193
Rp194
(dp195
g37
Vfunction init_resizeable_circle(svgElement) {\u000a    // Create an object with three fields (position X and Y, and button-down) and attach it to the element\u000a    svgElement._behaviour = {x: 0, y: 0, down: false};\u000a    \u000a    var q = $(svgElement);\u000a    \u000a    // On mouse down; get the position and set the button down flag\u000a    q.mousedown(function(event) {\u000a	   	svgElement._behaviour.x = event.pageX;\u000a    	svgElement._behaviour.y = event.pageY;\u000a    	svgElement._behaviour.down = true;\u000a    });\u000a    \u000a    // On mouse up: clear the mouse down flag\u000a    q.mouseup(function(event) {\u000a    	svgElement._behaviour.down = false;\u000a    });\u000a    \u000a    // On mouse out: clear the mouse down flag\u000a    q.mouseout(function(event) {\u000a    	svgElement._behaviour.down = false;\u000a    });\u000a    \u000a    // On mouse move; alter the radius according to the motion in X\u000a    q.mousemove(function(event) {\u000a        // Only make changes if the button is down\u000a        if (svgElement._behaviour.down) {\u000a            // Work out the difference in position from the last event\u000a            var dx = event.pageX - svgElement._behaviour.x;\u000a            var dy = event.pageY - svgElement._behaviour.y;\u000a            \u000a            // Update the position\u000a            svgElement._behaviour.x = event.pageX;\u000a            svgElement._behaviour.y = event.pageY;\u000a            \u000a            // Get the circle element; the first child\u000a            var circleElem = q.children().get(0);\u000a            // Get its radius\u000a            var radius = circleElem.r.baseVal.value;\u000a            // Offset the radius by the motion in X\u000a            radius = Math.max(10, radius + dx);\u000a\u000a           	// Update circle radius and centre\u000a            circleElem.r.baseVal.value = radius;\u000a            circleElem.cx.baseVal.value = circleElem.cy.baseVal.value = radius + 2.5;\u000a            // Update the SVG image size to fit\u000a            svgElement.width.baseVal.value = svgElement.height.baseVal.value = radius * 2 + 5;\u000a        }\u000a    });\u000a}
p196
sg43
I01
sbsS'var_name'
p197
Vbasic_resizeable_circle_js
p198
sg28
g100
sbag0
(g22
g2
Ntp199
Rp200
(dp201
g26
V<p>Now for the Python code that uses it (click and drag the blue circle to resize it):</p>
p202
sg28
g100
sbag0
(g33
g2
Ntp203
Rp204
(dp205
g37
g0
(g38
g2
Ntp206
Rp207
(dp208
g37
V# js_function_call causes the element described by the presentation value on which it is invoked ('circle' in this case)\u000a# must be initialised by calling a named Javascript function ('init_resizeable_circle' in this case) and passing the\u000a# element as a parameter.\u000a# Note that subsequent arguments to js_function_call will be passed through to the Javascript code on the client.\u000a\u000a# use_js informs the presentation system that the provided Javascript code is required by the presentation value\u000a# on which it is invoked (the value returned by the js_function_call method). We attach the source within the\u000a# above Javascript code block, which is available in the global variable 'basic_resizeable_circle_js'.\u000aresizeable_circle = circle.js_function_call('init_resizeable_circle').use_js(source=basic_resizeable_circle_js)\u000a\u000aresizeable_circle
p209
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp210
Rp211
(dp212
g26
V<p>It still works with multiple instances, along side the original fixed size circle:</p>
p213
sg28
g100
sbag0
(g33
g2
Ntp214
Rp215
(dp216
g37
g0
(g38
g2
Ntp217
Rp218
(dp219
g37
V# The last circle will NOT respond\u000a[resizeable_circle, resizeable_circle, resizeable_circle, resizeable_circle, resizeable_circle, circle]
p220
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp221
Rp222
(dp223
g26
V<h3>Dynamic behaviour with Python</h3><p>Restricting dynamic behaviour to Javascript only would be very limiting, as Javascript lacks libraries and features that Python has access to, e.g. NumPy, SciPy, etc.</p><p>For this example, we will introduce the <code>LiveValue</code> class. It will be covered in more detail later. For now however, consider it to be a container that contains a single value. It is presented visually as the value it contains; it gives no hint that it 'surrounds' the value. Additionally, changing its value will cause any visual representations to be updated automatically.</p><p>In this example, we will construct a jQuery slider, which we will use to control the radius of the circle.</p>
p224
sg28
g100
sbag0
(g188
g2
Ntp225
Rp226
(dp227
g37
g0
(g192
g2
Ntp228
Rp229
(dp230
g37
Vfunction init_resize_slider(elem, options) {\u000a    // options contains values from the Python (server) side\u000a    \u000a    // Set the function that responds to slide events\u000a    options.slide = function(event, ui) {\u000a        // Get the value\u000a        var slider_value = ui.value;\u000a        // Send an event to the server side Python code using larch.postEvent\u000a        // First argument: the DOM element from which the event originates\u000a        // Second argument: the name of the event\u000a        // Third argument: event specific data; the value in this case\u000a        larch.postEvent(elem, 'slider_value_event', slider_value);\u000a    };\u000a    \u000a    // Create a jQuery UI slider\u000a    $(elem).slider(options);\u000a}\u000a
p231
sg43
I01
sbsg197
Vdyn_py_js
p232
sg28
g100
sbag0
(g33
g2
Ntp233
Rp234
(dp235
g37
g0
(g38
g2
Ntp236
Rp237
(dp238
g37
Vfrom larch.live import LiveValue\u000a\u000a# THE CIRCLE\u000a\u000a# This live value will contain our circle\u000adynamic_python_circle = LiveValue()\u000a\u000a# This function:\u000a# - takes a radius\u000a# - builds an SVG circle of that radius\u000a# - sets the value of dynamic_python_circle to that SVG image\u000adef set_radius(radius):\u000a    sz = radius * 2 + 5.0\u000a    pos = radius + 2.5\u000a    dynamic_python_circle.value = Html('<svg width="{0}" height="{0}"><circle r="{1}" cx="{2}" cy="{2}" fill="#4090a0"/></svg>'.format(sz, radius, pos))\u000a\u000a# Initialise the circle\u000aset_radius(10.0);\u000a\u000a\u000a# THE SLIDER\u000a    \u000adef on_slider_value_event(event):\u000a    # event.name will be 'slider_value_event', as only those events will be received by this function\u000a    # event.data will contain the value sent from the client side Javascript code; the second argument to larch.postEvent in the JS above\u000a    set_radius(event.data)\u000a\u000a# The slider to control the radius: range between 10 and 200, step of 1\u000aslider_options = {'value': 10.0, 'min': 10.0, 'max': 200.0, 'step': 1.0}\u000a# Use jQuery to turn a 400px wide div into a slider. Pass the options above as a parameter; notice that it comes through\u000a# on the client side Javascript as a parameter to the init_resize_slider function.\u000aslider = Html('<div style="width: 400px;"></div>').js_function_call('init_resize_slider', slider_options).use_js(source=dyn_py_js)\u000a# Attach an event handler that will receive 'slider_value_event' events received from the client side Javascript\u000aconnected_slider = slider.with_event_handler('slider_value_event', on_slider_value_event)\u000a\u000a\u000a# PUTTING THEM TOGETHER\u000a\u000aHtml(connected_slider, '<br>', dynamic_python_circle, '<br>', slider)
p239
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp240
Rp241
(dp242
g26
V<p>Note that the top slider changes the radius of the circle, while the bottom one has no effect. This is because of the fact that slider has no event handler attached. Events emitted by this slider propagate through the server side representation of the page and are never handled.</p><p>This demonstrates that Larch allows&nbsp;Python code to be used to implemented dynamic behaviour.</p>
p243
sg28
g100
sbasbsg93
Vvisual_larch_intro
p244
sg95
I1
sbag0
(g11
g2
Ntp245
Rp246
(dp247
g15
g0
(g16
g2
Ntp248
Rp249
(dp250
g20
(lp251
g0
(g22
g2
Ntp252
Rp253
(dp254
g26
V<h1 style="text-align:center">Reactive programming with live values and functions</h1><p><br></p><p>Live values and functions provide spreadsheet style live computation within Python. It is likened to a spreadsheet due to the live, interactive updates, not due to a grid-like visual format; live values and functions (the equivalent of cells in Larch) make take whatever visual form is required.</p><p>A live value is like a&nbsp;spreadsheet cell that contains a value., while a&nbsp;live function is like to a cell that uses a formula to compute its value (except the function is written in Python). Visual representations of both will automatically update in response to changes.</p>
p255
sg28
g249
sbag0
(g22
g2
Ntp256
Rp257
(dp258
g26
V<h3>Live values; a very simple example</h3><p>This example will create buttons that&nbsp;increment and decrement an integer contained in a live value. Modifying the live value will cause its visual representation to update automatically; there is&nbsp;no need to explicitly request a refresh.</p><p>The example at the end of <a data-cke-saved-href="/pages/docs/larch_concepts/visual_larch_intro" href="/pages/docs/larch_concepts/visual_larch_intro">Understanding the Larch presentation system</a> used Javascript code to pass events on to the server and event handlers to respond to them. This example will import the <code>button</code> control from the <code>larch.controls</code> packae, which handles these responsibilities,&nbsp;saving some code. The button control is documented in more detail <a data-cke-saved-href="/pages/docs/controls/Button" href="/pages/docs/controls/Button">here</a>.</p>
p259
sg28
g249
sbag0
(g33
g2
Ntp260
Rp261
(dp262
g37
g0
(g38
g2
Ntp263
Rp264
(dp265
g37
V# Import button\u000afrom larch.controls.button import button\u000a# Import live value\u000afrom larch.live import LiveValue\u000a# Import Html\u000afrom larch.pres.html import Html\u000a\u000a# Create our live value with an initial value of 0\u000ax = LiveValue(0)\u000a\u000a# Increment and decrement listeners\u000adef on_dec(event):\u000a    x.value -= 1\u000a    \u000adef on_inc(event):\u000a    x.value += 1\u000a\u000a# Increment and decrement buttons\u000adec_button = button('-', on_dec)\u000ainc_button = button('+', on_inc)\u000a\u000a# Arrange the buttons next to one another, with the value below\u000aHtml(dec_button, ' ', inc_button, '<br>', x)
p266
sg43
I01
sbsg28
g249
sbag0
(g22
g2
Ntp267
Rp268
(dp269
g26
V<h3>Using controls to edit a live value</h3><p>Controls that produce a value (sliders, spinners, text boxes and the like) have live counterparts that are&nbsp;attached to&nbsp;live values in order to edit them. A simple demo:</p>
p270
sg28
g249
sbag0
(g33
g2
Ntp271
Rp272
(dp273
g37
g0
(g38
g2
Ntp274
Rp275
(dp276
g37
Vfrom larch.controls.spinner import live_spinner\u000a\u000ax2 = LiveValue(0)\u000as = live_spinner(x2)\u000a\u000aHtml(s, '<br>', x2)
p277
sg43
I01
sbsg28
g249
sbag0
(g22
g2
Ntp278
Rp279
(dp280
g26
V<h3>Using live functions to build a simple spreadsheet style computation</h3><p>Live functions are passed a Python function as a parameter. The value represented by a live function is the value returned by the function. If the function accesses the value of any live values or live functions, then it said to depend on them and its&nbsp;will be automatically updated in response to changes to the values of the dependents.</p><p>This example uses live values, controls and a live function to create a simple spreadsheet style computation showing the efficiency of a motor. Notice that modifying the values affects the result interactively. The events from the client side jQuery controls are sent to the server, where they are handled and the appropriate updates to the DOM are generated.</p><p>Note that the controls and the output values are in-line within the example text; in contrast to spreadsheet cells,&nbsp;live values and functions are not constrained to act as cells within a grid or any other specific visual format.</p>
p281
sg28
g249
sbag0
(g33
g2
Ntp282
Rp283
(dp284
g37
g0
(g38
g2
Ntp285
Rp286
(dp287
g37
Vfrom larch.live import LiveFunction\u000a\u000ain_power = LiveValue(1000.0)   # Initial value of input power: 1000W\u000aefficiency = LiveValue(80.0)   # Initial value for efficiency: 80%\u000a\u000a\u000a@LiveFunction\u000adef out_power():\u000a    return in_power.value * efficiency.value * 0.01\u000a\u000aHtml('<h4>An electric motor</h4>',\u000a     '<p>Input electrical power = ', live_spinner(in_power), 'W, efficiency of motor = ', live_spinner(efficiency), '%<br>Resulting output power = ', out_power, 'W.</p>')
p288
sg43
I01
sbsg28
g249
sbag0
(g22
g2
Ntp289
Rp290
(dp291
g26
V<h3>Going beyond a spreadsheet; use any Python object</h3><p>Live values and functions are not restricted to working only with numbers and text; their values can be of any type.</p><p>We will now build an interactive diagram that shows the gravitational force between two bodies. Use the sliders to control the distance between the bodies and their respective masses.</p>
p292
sg28
g249
sbag0
(g33
g2
Ntp293
Rp294
(dp295
g37
g0
(g38
g2
Ntp296
Rp297
(dp298
g37
Vimport math\u000a\u000afrom larch.controls.slider import live_slider\u000a\u000a# gravitational constant\u000aG = 6.67384e-11\u000a\u000a# r - the distance between the bodies\u000ar = LiveValue(500.0)\u000ar_slider = live_slider(r, width=800, min=1.0, max=800.0, step=1.0, update_on_slide=True)\u000a\u000a# m1 - mass 1\u000am1 = LiveValue(10.0)\u000am1_slider = live_slider(m1, width=800, min=1.0, max=100.0, step=0.1, update_on_slide=True)\u000a\u000a# m2 - mass 2\u000am2 = LiveValue(10.0)\u000am2_slider = live_slider(m2, width=800, min=1.0, max=100.0, step=0.1, update_on_slide=True)\u000a\u000a\u000a@LiveFunction\u000adef force():\u000a    # Convert masses from tonnes to kg and distances from mm to m\u000a    m1_kg = m1.value * 1000.0\u000a    m2_kg = m2.value * 1000.0\u000a    r_m = r.value * 0.001\u000a    return m1_kg * m2_kg * G / (r_m*r_m)\u000a\u000a\u000a@LiveFunction\u000adef diagram():\u000a    # body 1\u000a    b1_r = math.sqrt(m1.value)\u000a    b1 = Html('<circle r="{0}" cx="50" cy="100" fill="#800000"/>'.format(b1_r))\u000a    # body 2\u000a    b2_x = 50.0 + r.value\u000a    b2_r = math.sqrt(m2.value)\u000a    b2 = Html('<circle r="{0}" cx="{1}" cy="100" fill="#000080"/>'.format(b2_r, b2_x))\u000a    # force text\u000a    f1 = Html('<text x="{0}" y="150" fill="#ff0000">F = {1}N</text>'.format(50.0, force.value))\u000a    f2 = Html('<text x="{0}" y="150" fill="#0000ff">F = {1}N</text>'.format(b2_x, force.value))\u000a    # force lines\u000a    fl1 = Html('<line x1="{0}" y1="100" x2="{1}" y2="100" stroke="#ff0000"/>'.format(50.0 + b1_r, 50.0 + b1_r + force.value*100.0))\u000a    fl2 = Html('<line x1="{0}" y1="100" x2="{1}" y2="100" stroke="#0000ff"/>'.format(b2_x - b2_r, b2_x - b2_r - force.value*100.0))\u000a    return Html('<svg width="1024" height="200" style="border: 1px solid #808080;">', b1, b2, f1, f2, fl1, fl2, '</svg>')\u000a\u000a\u000aHtml(r_slider, 'r = ', r, 'mm<br>', m1_slider, 'M<sub>1</sub> = ', m1, 't<br>', m2_slider, 'M<sub>2</sub> = ', m2, 't<br>', 'F = ', force, 'N<br>', diagram)\u000a
p299
sg43
I01
sbsg28
g249
sbasbsg93
Vlive_values_and_functions
p300
sg95
I2
sbag0
(g11
g2
Ntp301
Rp302
(dp303
g15
g0
(g16
g2
Ntp304
Rp305
(dp306
g20
(lp307
g0
(g22
g2
Ntp308
Rp309
(dp310
g26
V<h1 style="text-align:center">Basic HTML</h1><p>This notebook demonstrates how to create and display basic HTML, using the <code>Html</code> presentation type.</p>
p311
sg28
g305
sbag0
(g22
g2
Ntp312
Rp313
(dp314
g26
V<h2>Examples</h2><p>The first step is to import the&nbsp;<code>Html</code>&nbsp;presentation type. Presentation types describe a presentation that is to be built. They&nbsp;will be covered in more detail later.</p>
p315
sg28
g305
sbag0
(g33
g2
Ntp316
Rp317
(dp318
g37
g0
(g38
g2
Ntp319
Rp320
(dp321
g37
V# Import the HTML presentation combinator\u000a\u000afrom larch.pres.html import Html\u000a\u000a# Construct an Html object, with the content in a string.\u000a\u000aHtml('<h3>Hello world</h3>')
p322
sg43
I01
sbsg28
g305
sbag0
(g22
g2
Ntp323
Rp324
(dp325
g26
V<p>The <code>Html</code> presentation type&nbsp;can also take multiple arguments. Arguments do not have to be strings either; primitive objects also work:</p>
p326
sg28
g305
sbag0
(g33
g2
Ntp327
Rp328
(dp329
g37
g0
(g38
g2
Ntp330
Rp331
(dp332
g37
VHtml('<p>An interger: ', 5, ', and a float: ', 3.14, ', and finally a bool: ', True, '</p>')
p333
sg43
I01
sbsg28
g305
sbag0
(g22
g2
Ntp334
Rp335
(dp336
g26
V<p>Note that the text is left as is; the paragraph appears as expected, while the values are converted and displayed. The (admittedly subtle) colours hint that they are not just converted to strings. In fact, any object can be included:</p>
p337
sg28
g305
sbag0
(g33
g2
Ntp338
Rp339
(dp340
g37
g0
(g38
g2
Ntp341
Rp342
(dp343
g37
Vclass Point (object):\u000a    def __init__(self, x, y):\u000a    	self.x = x\u000a        self.y = y\u000a        \u000ap = Point(5.0, 10.0)\u000a\u000aHtml('<p>Constructing a point at [', p.x, ',', p.y, '] results in a point object:</p>', p)
p344
sg43
I01
sbsg28
g305
sbag0
(g22
g2
Ntp345
Rp346
(dp347
g26
V<p>The object is displayed within the text that surrounds it; it is automatically converted into a visual, interactive form.</p><p>This occurs because all objects within U-Larch are displayed visually. More on this later.</p>
p348
sg28
g305
sbag0
(g22
g2
Ntp349
Rp350
(dp351
g26
V<h2>Convenience methods&nbsp;<code>append</code>&nbsp;and&nbsp;<code>extend</code></h2><p>If you wish to join lists of content to be displayed, the code can get a little ugly, as you must join lists, wrap in parens and unpack:</p>
p352
sg28
g305
sbag0
(g33
g2
Ntp353
Rp354
(dp355
g37
g0
(g38
g2
Ntp356
Rp357
(dp358
g37
Vcontents = [', and a float: ', 3.14,]\u000aHtml(*(['<p>An interger: ', 5] + contents + [', and finally a bool: ', True, '</p>']))
p359
sg43
I01
sbsg28
g305
sbag0
(g22
g2
Ntp360
Rp361
(dp362
g26
V<p>The&nbsp;<code>append</code>&nbsp;and&nbsp;<code>extend</code>&nbsp;methods are chain methods that allow you to add content. Both can take multiple items;&nbsp;<code>append</code>&nbsp;takes them as multiple arguments,&nbsp;<code>extend</code>&nbsp;takes a list as a single argument:</p>
p363
sg28
g305
sbag0
(g33
g2
Ntp364
Rp365
(dp366
g37
g0
(g38
g2
Ntp367
Rp368
(dp369
g37
Vcontents = [', and a float: ', 3.14,]\u000a# Use extend to add @contents as a list, and append to add multiple items using multiple arguments\u000aHtml('<p>An interger: ', 5).extend(contents).append(', and finally a bool: ', True, '</p>')
p370
sg43
I01
sbsg28
g305
sbag0
(g22
g2
Ntp371
Rp372
(dp373
g26
V<h2>Escaping text</h2><p>Strings passed to the <code>Html</code> presentation type are interpreted as HTML code. Should you wish to display HTML control characters (e.g. &lt;, &gt;, etc) you can use the <code>Html.escape_str()</code> method to escape them:</p>
p374
sg28
g305
sbag0
(g33
g2
Ntp375
Rp376
(dp377
g37
g0
(g38
g2
Ntp378
Rp379
(dp380
g37
VHtml(Html.escape_str('<p>An HTML paragraph</p>'))
p381
sg43
I01
sbsg28
g305
sbasbsg93
S'basic_html'
p382
sg95
I3
sbag0
(g11
g2
Ntp383
Rp384
(dp385
g15
g0
(g16
g2
Ntp386
Rp387
(dp388
g20
(lp389
g0
(g22
g2
Ntp390
Rp391
(dp392
g26
V<h1 style="text-align:center">Javascript and CSS</h1><p>In this notebook, you will learn how to apply CSS to HTML to affect its appearance and connect Javascript code to DOM nodes to enable interactive behaviour.</p><p>You can add CSS style-sheets and Javascript code to your pages by referencing them using simple API calls. The API calls attach them to the HTML content that requires them.</p><h2>Adding CSS style sheets and Javascript code</h2><p>We must allow content to reference the CSS and JS files&nbsp;required to display it. The <code>use_css</code>&nbsp;and <code>use_js</code>&nbsp;methods provided by presentation types 'attach' the CSS and Javascript assets (either in the form of source code or URLs at which they can be found) to the content that is to be displayed. If the content is constructed, but never displayed on the browser, assets attached to it will not be loaded.</p><h3>CSS Stylesheets</h3><p>First, lets look at referencing CSS contained in a file located at a specified URL:</p>
p393
sg28
g387
sbag0
(g33
g2
Ntp394
Rp395
(dp396
g37
g0
(g38
g2
Ntp397
Rp398
(dp399
g37
V# Get our Html presentation type\u000afrom larch.pres.html import Html\u000a\u000a# Our HTML content, note the use of the 'python_console_header' CSS class in the <div>\u000ax = Html('<div class="python_console_header">',\u000a         'Lets display some text within a border that has the same appearance as the Python console header, ',\u000a         'the style of which we obtain from the console CSS style sheet.',\u000a         '</div>')\u000a# use_css operates as a chain method. Provide a URL from which a CSS file can be accessed.\u000ax = x.use_css(url='/static/larch/console.css')			\u000a# The url named parameter is not strictly needed; x.use_css('/static/larch/console.css') would work just as well\u000a\u000a# Display it\u000ax
p400
sg43
I01
sbsg28
g387
sbag0
(g22
g2
Ntp401
Rp402
(dp403
g26
V<p>Invoking <code>use_css</code>&nbsp;will add a <code>link</code> to the <code>head</code> element of the page, loading the CSS file from the specified URL.</p><p>Now, lets look at providing the CSS source directly. Once again, we use the <code>use_css</code>&nbsp;method, but this time we pass the css source to a parameter named <code>source</code>.</p><p>The CSS is specified in a CSS code block, which you can create from the edit menu. Note the <em>Variable name</em>&nbsp;field at the top of the block; this names the global variable from which the CSS will be available in text form. Note that the variable <code>css_source</code> is used in the python code below.</p>
p404
sg28
g387
sbag0
(g188
g2
Ntp405
Rp406
(dp407
g37
g0
(clarch.apps.source_code
CSSCode
p408
g2
Ntp409
Rp410
(dp411
g37
V.test_border {\u000a	font-family: "Open Sans", sans-serif;\u000a	color: #2080a0;\u000a	border: 1px solid #2080a0;\u000a	background-image: url('/static/speckle.png');\u000a    box-shadow: 0 7px 5px #aaa;\u000a    margin: 0 0.5em 1.5em 0.5em;\u000a	border-radius: 20px;\u000a	padding: 20px;\u000a}
p412
sg43
I01
sbsg197
Vcss_source
p413
sg28
g387
sbag0
(g33
g2
Ntp414
Rp415
(dp416
g37
g0
(g38
g2
Ntp417
Rp418
(dp419
g37
Vy = Html('<div class="test_border">Some more text in a different border, with a drop shadow. This time, the CSS source provided directly to the API.</div>')\u000a# The CSS defined above is available in a global variable called css_source. Pass it as a parameter named 'source' to use_css:\u000ay = y.use_css(source=css_source)\u000ay
p420
sg43
I01
sbsg28
g387
sbag0
(g22
g2
Ntp421
Rp422
(dp423
g26
V<h3>Javascript</h3><p>The <code>use_js</code>&nbsp;method works in much the same way as <code>use_css</code>; providing a URL will cause the JS file to be loaded from the specified location, while providing source will insert it into the page.</p><p>Lets build a Javascript function that opens a dialog box using JQuery (comes with Ubiquitous Larch), then construct a button that invokes it when clicked:</p>
p424
sg28
g387
sbag0
(g188
g2
Ntp425
Rp426
(dp427
g37
g0
(g192
g2
Ntp428
Rp429
(dp430
g37
Vfunction open_a_dialog() {\u000a	// Build the contents; just a paragraph with a greeting\u000a	var dialogContents = $('<p>This dialog was created using Javascript, running on the client, with the code provided via the Python API.</p>');\u000a\u000a	// Append to the document\u000a	$(document.body).append(dialogContents);\u000a\u000a	// Use JQuery to convert to a dialog\u000a	$(dialogContents).dialog();\u000a}
p431
sg43
I01
sbsg197
Vopen_dialog_js
p432
sg28
g387
sbag0
(g33
g2
Ntp433
Rp434
(dp435
g37
g0
(g38
g2
Ntp436
Rp437
(dp438
g37
V# Build the button, with an onclick handler that invokes the open_a_dialog Javascript function defined above\u000adialog_button = Html('<button onclick="javascript:open_a_dialog();">Show the dialog</button>')\u000a\u000a# Attach the Javascript source code using use_js\u000adialog_button = dialog_button.use_js(source=open_dialog_js)\u000a\u000adialog_button
p439
sg43
I01
sbsg28
g387
sbag0
(g22
g2
Ntp440
Rp441
(dp442
g26
V<h2>Initialising DOM nodes using Javascript</h2><p>We can also ask Ubiquitous Larch&nbsp;to invoke a Javascript function to initialise a browser DOM node that has been constructed. We can use this approach as an alternative to selecting DOM nodes by class or ID.&nbsp;To do this, we use the <code>js_function_call</code> method.</p><p>In this example, we will use jQuery to convert an <code>input</code> element into a spinner widget:</p>
p443
sg28
g387
sbag0
(g188
g2
Ntp444
Rp445
(dp446
g37
g0
(g192
g2
Ntp447
Rp448
(dp449
g37
V// The function will receive the DOM node as its first argument.\u000afunction convert_to_spinner(node) {\u000a	// Use the jQuery spinner() method to convert it to a spinner.\u000a	$(node).spinner();\u000a}
p450
sg43
I01
sbsg197
Vconvert_to_spinner_js
p451
sg28
g387
sbag0
(g33
g2
Ntp452
Rp453
(dp454
g37
g0
(g38
g2
Ntp455
Rp456
(dp457
g37
V# Input element\u000aspinner = Html('<input name="spin" value="0" />')\u000a\u000a# Invoke the JS function 'convert_to_spinner' to perform the conversion\u000a# The DOM node constructed by the Html fragment will be passed as the first argument to the JS function call\u000aspinner = spinner.js_function_call('convert_to_spinner')\u000a\u000a# Attach the required JS source, so that the 'convert_to_spinner' function is available for use\u000aspinner = spinner.use_js(source=convert_to_spinner_js)\u000a\u000aspinner
p458
sg43
I01
sbsg28
g387
sbag0
(g22
g2
Ntp459
Rp460
(dp461
g26
V<p>Alternatively, the <code>js_eval</code> method takes a Javascript expression to evaluate. When the expression is evaluated on the client, the variable '<code>node</code>' contains a reference to the DOM node that is to be initialised. We can use this to create a spinner like so:</p>
p462
sg28
g387
sbag0
(g33
g2
Ntp463
Rp464
(dp465
g37
g0
(g38
g2
Ntp466
Rp467
(dp468
g37
V# Input element\u000aspinner = Html('<input name="spin" value="0" />')\u000a\u000a\u000a# Call the jQuery spinner method directly.\u000aspinner = spinner.js_eval('$(node).spinner();')\u000a\u000a# Just display this; no additional JS code needed here\u000aspinner
p469
sg43
I01
sbsg28
g387
sbasbsg93
S'js_css'
p470
sg95
I4
sbag0
(g11
g2
Ntp471
Rp472
(dp473
g15
g0
(g16
g2
Ntp474
Rp475
(dp476
g20
(lp477
g0
(g22
g2
Ntp478
Rp479
(dp480
g26
V<h1 style="text-align:center">Event Handling</h1><p>Ubiquitous Larch can receive events in client-side Javascript code and route them to the server-side Python code.</p><p>On the client-side, we call the <code>larch.postEvent</code>&nbsp;Javascript function, passing the source DOM node, the event name&nbsp;and event data (a <a data-cke-saved-href="http://www.json.org/" href="http://www.json.org/">JSON</a> representable&nbsp;value)&nbsp;as parameters. This event will be sent to the server, where it can be handled by your Python code.</p><p>The server maintains its own representation of the structure of the document, allowing it to ensure that the event is routed to the correct handler.</p><p>On the server side, we invoke the <code>with_event_handler</code>&nbsp;Python method, passing the event name and the handler function/callable as parameters.</p><p><br></p><p>In summary,&nbsp;Ubiquitous&nbsp;Larch routes events for you, alleviating the need to explicitly maintain a mapping between&nbsp;pieces of the browser DOM and objects on the server.</p>
p481
sg28
g475
sbag0
(g22
g2
Ntp482
Rp483
(dp484
g26
V<h2>Example</h2><p>In the following example, we will construct a button that sends an event that is handled server-side.</p>
p485
sg28
g475
sbag0
(g188
g2
Ntp486
Rp487
(dp488
g37
g0
(g192
g2
Ntp489
Rp490
(dp491
g37
V// The larch.postEvent Javascript function sends an event to the server side Python code. Its parameters are as follows:\u000a// - the DOM node from which the event originates\u000a// - the name of the event to send\u000a// - the event data; an object representable as JSON\u000a\u000afunction on_bt_clicked(node, operation) {\u000a	larch.postEvent(node, "test_button_clicked", operation);\u000a}
p492
sg43
I01
sbsg197
Vinc_button_js_src
p493
sg28
g475
sbag0
(g33
g2
Ntp494
Rp495
(dp496
g37
g0
(g38
g2
Ntp497
Rp498
(dp499
g37
V# We need Html pres type\u000afrom larch.pres.html import Html\u000a\u000a# LiveValue objects simply display their contents, with one difference; if their value is modified, their on-screen representations are automatically refreshed.\u000afrom larch.live import LiveValue\u000a\u000a# Create a live value containing 0\u000ax = LiveValue(0)\u000a\u000a\u000a# The server side response function\u000a# @event_name will be the name of the event sent by the client, in this case 'test_button_clicked'\u000a# @event_data will receive the value of @operation sent from the client side\u000adef on_client_side_button_clicked(event):\u000a    # Increment the value in @x\u000a    x.value += 1\u000a\u000a\u000a# HTML that constructs a button that calls 'on_bt_clicked' when clicked\u000abutton = Html('<button onclick="javascript:on_bt_clicked(this, \u005c'+\u005c');">Increment</button>')\u000a\u000a# Attach the event handler\u000abutton = button.with_event_handler('test_button_clicked', on_client_side_button_clicked)\u000a\u000a# Reference the JS code\u000abutton = button.use_js(source=inc_button_js_src)\u000a\u000a# Arrange the button above the value:\u000aHtml(button, '<div>', x, '</div>')
p500
sg43
I01
sbsg28
g475
sbag0
(g22
g2
Ntp501
Rp502
(dp503
g26
V<p>U-Larch ensures that events are sent to the correct place at the server-side. In the example below, we construct a number of counters, demonstrating the that correct events are sent to the correct handlers, despite sharing the same event name:</p>
p504
sg28
g475
sbag0
(g33
g2
Ntp505
Rp506
(dp507
g37
g0
(g38
g2
Ntp508
Rp509
(dp510
g37
Vdef counter(initial_value=0):\u000a    # Create a live value containing 0\u000a    x = LiveValue(initial_value)\u000a    \u000a    # The server side response function\u000a    def on_client_side_button_clicked(event):\u000a        if event.data == '+':\u000a            x.value += 1\u000a        elif event.data == '-':\u000a            x.value -= 1\u000a        else:\u000a            raise ValueError\u000a    \u000a    \u000a    # Build TWO buttons. They both send an event with the same name. The event data determines what the button should do (+ or -)\u000a    dec_button = Html('<button onclick="javascript:on_bt_clicked(this, \u005c'-\u005c');">Decrement</button>')\u000a    inc_button = Html('<button onclick="javascript:on_bt_clicked(this, \u005c'+\u005c');">Increment</button>')\u000a    \u000a    # Arrange the button above the value:\u000a    ui = Html(dec_button, inc_button, '<div>', x, '</div>')\u000a    \u000a    # Attach the event handler. This time, we are attaching the server-side handler to the whole UI rather than the individual buttons; events bubble up.\u000a    ui = ui.with_event_handler('test_button_clicked', on_client_side_button_clicked)\u000a    \u000a    # Reference the JS code\u000a    ui = ui.use_js(source=inc_button_js_src)\u000a    \u000a    return ui;\u000a    \u000a\u000a# Make 3 counters\u000aHtml(counter(0), counter(1), counter(2))
p511
sg43
I01
sbsg28
g475
sbag0
(g22
g2
Ntp512
Rp513
(dp514
g26
V<p>The counters above are independent from one another, desipite sharing the same code and the same events. U-Larch ensures that the events arrive at the correct place on the server side.</p>
p515
sg28
g475
sbasbsg93
S'event_handling'
p516
sg95
I5
sbag0
(g11
g2
Ntp517
Rp518
(dp519
g15
g0
(g16
g2
Ntp520
Rp521
(dp522
g20
(lp523
g0
(g22
g2
Ntp524
Rp525
(dp526
g26
V<h1 style="text-align:center">Visual, interactive Python objects via type coercion</h1><p>With Ubiquituos Larch, Python objects can be presented using type coercion. You can define&nbsp;a visual, interactive presentation for an object using a similar approach to that used to define a string/textual representation by implementing a&nbsp;<code>__str__</code> method.</p><p>Normal Python objects can be presented by embedding them within presentation descriptions, built from presentation types. They are automatically converted for you. If Ubiquitous Larch is notified of a modification to an object's state, it will update it's&nbsp;in-browser representations automatically.</p><p>The conversion process is recursive. As a consequence, you can implement visual, interactive components as a collection of live Python objects.</p><p><br></p><h2>MVC for free</h2><p>The most common design pattern for implementing GUI based applications is Model-View-Controller. Typical implementations require the use of quite a lot of boilerplate code for creating, updating and destroying views of objects in response to state changes. The type-coercion driven system used in Larch handles much of this for you.</p>
p527
sg28
g521
sbag0
(g22
g2
Ntp528
Rp529
(dp530
g26
V<h2>In context: string/textual representations using <code>__str__</code></h2><p>Recall that by default, an object is converted to a string using its type and its address:<br></p>
p531
sg28
g521
sbag0
(g33
g2
Ntp532
Rp533
(dp534
g37
g0
(g38
g2
Ntp535
Rp536
(dp537
g37
Vclass Point (object):\u000a    def __init__(self, x, y):\u000a        self.x, self.y = x, y\u000a        \u000astr(Point(2.0, 5.0))
p538
sg43
I01
sbsg28
g521
sbag0
(g22
g2
Ntp539
Rp540
(dp541
g26
V<p>We can customise this by defining a <code>__str__</code> method:</p>
p542
sg28
g521
sbag0
(g33
g2
Ntp543
Rp544
(dp545
g37
g0
(g38
g2
Ntp546
Rp547
(dp548
g37
Vclass Point (object):\u000a    def __init__(self, x, y):\u000a        self.x, self.y = x, y\u000a        \u000a    def __str__(self):\u000a        return '[{0} {1}]'.format(self.x, self.y)\u000a        \u000astr(Point(2.0, 5.0))
p549
sg43
I01
sbsg28
g521
sbag0
(g22
g2
Ntp550
Rp551
(dp552
g26
V<p>This can now be used in more complex, composite objects. The <code>__str__</code> method of the LineSegment class in turn converts the points to strings, and joins them together:</p>
p553
sg28
g521
sbag0
(g33
g2
Ntp554
Rp555
(dp556
g37
g0
(g38
g2
Ntp557
Rp558
(dp559
g37
Vclass LineSegment (object):\u000a    def __init__(self, a, b):\u000a        self.a, self.b = a, b\u000a        \u000a    def __str__(self):\u000a        return '{0} -> {1}'.format(self.a, self.b)\u000a\u000astr(LineSegment(Point(1.0, 2.0), Point(5.0, 8.0)))
p560
sg43
I01
sbsg28
g521
sbag0
(g22
g2
Ntp561
Rp562
(dp563
g26
V<h2>Visual representations using <code>__present__</code></h2><p>Within Ubiquitous Larch, the <code>__present__</code> method provides similar functionaltiy, except that you can use HTML markup to control the layout of your presentation. Back to our <code>Point</code> example:</p>
p564
sg28
g521
sbag0
(g33
g2
Ntp565
Rp566
(dp567
g37
g0
(g38
g2
Ntp568
Rp569
(dp570
g37
V# We need to import the Html presentation type, as __present__ must return presentation types.\u000afrom larch.pres.html import Html\u000a\u000aclass Point (object):\u000a    def __init__(self, x, y):\u000a        self.x, self.y = x, y\u000a        \u000a    def __str__(self):\u000a        return '[{0} {1}]'.format(self.x, self.y)\u000a    \u000a    def __present__(self, fragment):\u000a        # The [ and ] character surrounding the point co-ordinates.\u000a        open_bracket = '<span style="font-size: 3em">[</span>'\u000a        close_bracket = '<span style="font-size: 3em">]</span>'\u000a        # Arrange the X and Y co-ordinates vertically in a table, surround with the brackets\u000a        return Html(open_bracket,\u000a                    '<table style="border: 1px solid #e0e0e0; display: inline-table;"><tbody><tr><td>',\u000a                    self.x, '</td></tr><tr><td>', self.y, '</td></tr></tbody></table>',\u000a                    close_bracket)\u000a        \u000aPoint(2.0, 5.0)
p571
sg43
I01
sbsg28
g521
sbag0
(g22
g2
Ntp572
Rp573
(dp574
g26
V<h2>Composeability</h2><p>Presentations are also composeable, as demonstrated with a visual version of the line segment example:</p>
p575
sg28
g521
sbag0
(g33
g2
Ntp576
Rp577
(dp578
g37
g0
(g38
g2
Ntp579
Rp580
(dp581
g37
Vclass LineSegment (object):\u000a    def __init__(self, a, b):\u000a        self.a, self.b = a, b\u000a        \u000a    def __str__(self):\u000a        return '{0} -> {1}'.format(self.a, self.b)\u000a    \u000a    def __present__(self, fragment):\u000a        return Html(self.a, '<span style="font-weight: bold;">', Html.escape_str('->'), '</span>', self.b)\u000a\u000aLineSegment(Point(1.0, 2.0), Point(5.0, 8.0))
p582
sg43
I01
sbsg28
g521
sbag0
(g22
g2
Ntp583
Rp584
(dp585
g26
V<p>It doesn't look&nbsp;great, but you get the point; the point objects were passed to the <code>Html</code> presentation type. Larch automatically constructed views of these objects and incorporated them within&nbsp;the view of the line segment.</p>
p586
sg28
g521
sbag0
(g22
g2
Ntp587
Rp588
(dp589
g26
V<h2>Interactive Python objects</h2><p>The content generated by a <code>__present__</code> method does not have to be static; it can be interactive too. In the next example, we will add controls, along with interactive updates:<br></p>
p590
sg28
g521
sbag0
(g33
g2
Ntp591
Rp592
(dp593
g37
g0
(g38
g2
Ntp594
Rp595
(dp596
g37
V# We must import the IncrementalValueMonitor class.\u000a# Incremental monitors are used to inform Larch when the state of an\u000a# object has changed, so that Larch may schedule a refresh.\u000afrom larch.incremental import IncrementalValueMonitor\u000a\u000a# We would also like to use button conrols in this example.\u000afrom larch.controls import button\u000a\u000a\u000aclass Counter (object):\u000a    def __init__(self):\u000a        self.value = 0\u000a        # The incremental value monitor helps Larch track the state of this object\u000a        self.__incr = IncrementalValueMonitor()\u000a        \u000a        \u000a    def increment(self, event):\u000a        self.value += 1\u000a        # We have changed the state of this object; inform the monitor\u000a        self.__incr.on_changed()\u000a        \u000a    def decrement(self, event):\u000a        self.value -= 1\u000a        # We have changed the state of this object; inform the monitor\u000a        self.__incr.on_changed()\u000a        \u000a    def __present__(self, fragment):\u000a        # We are using the state of this object to construct the presentation; inform the incremental monitor of an access:\u000a        self.__incr.on_access()\u000a        \u000a        # Decrement button, label is '<', invoke the decrement method when clicked\u000a        dec_button = button.button('<', self.decrement)\u000a        # Increment button, label is '>', invoke the increment method when clicked\u000a        inc_button = button.button('>', self.increment)\u000a        \u000a        return Html(dec_button, '<span style="margin-left: 1em; margin-right: 1em">', self.value, '</span>', inc_button)\u000a\u000a\u000aCounter()
p597
sg43
I01
sbsg28
g521
sbag0
(g22
g2
Ntp598
Rp599
(dp600
g26
V<p>The buttons are arranged to surround the value. When they are clicked, the <code>decrement</code>&nbsp;or <code>increment</code>&nbsp;methods are invoked. These in turn modify the value and inform the incremental monitor. U-Larch maintains an association between the object (a Counter in this case) and its visual representation. When it is notified of a change to the object's state, it re-invokes&nbsp;<code>__present__</code>&nbsp;in order to build a new presentation of the counter, which is inserted into the DOM in place of the old one. As a consequence, you can now write interactive browser applications in Python.</p>
p601
sg28
g521
sbag0
(g22
g2
Ntp602
Rp603
(dp604
g26
V<h2>Ubiquitous Larch is interactive Python objects all the way down</h2><p>The viability of this approach is demonstrated by the fact that everything that you have seen in Ubiquitous&nbsp;Larch so far is presented in this way; this notebook, its blocks, the front page that displays the list of documents, and the console.</p><p>Larch can be said to operate in a similar fashion to Smalltalk, in that it operates as interactive live objects. The main differences are:</p><ul><li>Python language instead of Smalltalk</li><li>A web browser as a renderer and GUI toolkit rather than the window oriented toolkits used in most Smalltalk systems</li><li>Type ceorcion based presentation provides MVC style functionality for free</li></ul>
p605
sg28
g521
sbasbsg93
S'objpres'
p606
sg95
I6
sbag0
(g11
g2
Ntp607
Rp608
(dp609
g15
g0
(g16
g2
Ntp610
Rp611
(dp612
g20
(lp613
g0
(g22
g2
Ntp614
Rp615
(dp616
g26
V<h1 style="text-align:center">Resources - the basics</h1><p><br></p><p>URL resources make data available at a URL (e.g. image data).<br></p>
p617
sg28
g611
sbag0
(g22
g2
Ntp618
Rp619
(dp620
g26
V<h3>URL resources</h3><p>URL resources make data accessible at a URL. The URL is automatically generated.</p><p>In the first example, we will load an image from a file, determine its MIME type, make it available via a resource and display it. We will use a <code>ConstResource</code> (constant resource) that allows us to give it the data and mime type that we want to make available.</p><p>If we evaluate a resource, we get a URL:</p>
p621
sg28
g611
sbag0
(g33
g2
Ntp622
Rp623
(dp624
g37
g0
(g38
g2
Ntp625
Rp626
(dp627
g37
V# import the mimetypes so that we can determine the MIME type\u000aimport mimetypes\u000a# import the resource module\u000afrom larch.pres import resource\u000a\u000apath = 'testimages/Ireland1.JPG'\u000a\u000a# Read the contents of the file\u000af = open(path, 'rb')\u000adata = f.read()\u000af.close()\u000a\u000a# Determine MIME type\u000amime_type = mimetypes.guess_type(path)[0]\u000a\u000a# Create the resource\u000arsc = resource.ConstResource(data, mime_type)\u000a\u000a\u000arsc
p628
sg43
I01
sbsg28
g611
sbag0
(g22
g2
Ntp629
Rp630
(dp631
g26
V<p>The URL shown above will display the image if you put it into the address bar (with the server address in front). Lets create a link for convenience:</p>
p632
sg28
g611
sbag0
(g33
g2
Ntp633
Rp634
(dp635
g37
g0
(g38
g2
Ntp636
Rp637
(dp638
g37
Vfrom larch.pres.html import Html\u000a\u000aHtml('<a href="', rsc, '">Link to the image</a>')
p639
sg43
I01
sbsg28
g611
sbag0
(g22
g2
Ntp640
Rp641
(dp642
g26
V<p>Finally, lets display it inline:</p>
p643
sg28
g611
sbag0
(g33
g2
Ntp644
Rp645
(dp646
g37
g0
(g38
g2
Ntp647
Rp648
(dp649
g37
VHtml('<img src="', rsc, '">')
p650
sg43
I01
sbsg28
g611
sbag0
(g22
g2
Ntp651
Rp652
(dp653
g26
V<h3>Image resources</h3><p>While the example above demonstrates a workable approach to displaying images, <code>ImageFromFile</code> and <code>ImageFromBinary</code> are more convenient to use:</p>
p654
sg28
g611
sbag0
(g33
g2
Ntp655
Rp656
(dp657
g37
g0
(g38
g2
Ntp658
Rp659
(dp660
g37
V# ImageFromBinary takes the binary data and mime type, along with optional width and height:\u000aresource.ImageFromBinary(data, mime_type, width=400, height=300)
p661
sg43
I01
sbsg28
g611
sbag0
(g33
g2
Ntp662
Rp663
(dp664
g37
g0
(g38
g2
Ntp665
Rp666
(dp667
g37
V# ImageFromFile takes the path, along with optional width and height:\u000aresource.ImageFromFile(path, width=400, height=300)
p668
sg43
I01
sbsg28
g611
sbag0
(g22
g2
Ntp669
Rp670
(dp671
g26
V<h3>Dynamic&nbsp;resources accessible from Javascript</h3><p>There are cases when you will want Javascript code to be able to repeatedly access a resource whose content changes between accesses. We need a way of passing a resource from server-side&nbsp;Python code to client-side Javascript code. In aid of this, Larch will construct and pass the Javascript counterpart to a&nbsp;Python resource object, when it is passed as a parameter via methods such as <code>js_function_call</code>.<br></p><p>We will use a JSON function resource. JSON resources provide JSON data. Function resources get their value by invoking a function at the time of the request, rather than using a constant value.</p><p>The client-side Javascript resource object has a method <code>fetchJSON</code>, to which you pass a callback that it invokes when it has received the data.</p><p>In this example, we construct a JSON function resource that makes JSON data accessible at its URL. We use d3.js to create a chart that can be updated using a button.</p>
p672
sg28
g611
sbag0
(g188
g2
Ntp673
Rp674
(dp675
g37
g0
(g192
g2
Ntp676
Rp677
(dp678
g37
V// node is the <div> element containg the SVG, the BR and the BUTTON\u000a// data_rsc is the resource, received from the Python side\u000a// data_size is the number of points we are displaying\u000afunction initRandomDotsChartWithResource(node, data_rsc, data_size) {\u000a    // Get the relevent DOM elements\u000a    var q_node = $(node);\u000a    var svg = q_node.children().get(0);\u000a    var button = q_node.children().get(2);\u000a    \u000a    // Create the d3 chart from our SVG element\u000a    var chart = d3.select(svg);\u000a\u000a    // Create some blank data initial data, with x and y coordinates at the centre\u000a    var data = d3.range(data_size).map(function() {return {x: 200, y: 200};});\u000a    \u000a	// Create a circle for each data point\u000a    chart.selectAll("circle")\u000a        .data(data)\u000a            .enter().append("circle")\u000a        .attr("cx", function(d) { return d.x; })\u000a        .attr("cy", function(d) { return d.y; })\u000a        .attr("r", 4.0)\u000a        .attr("fill", "#4090a0");\u000a    \u000a    // Redraw function\u000a    function redraw(dataFromRsc) {\u000a        // Move the circles to the new positions over a period of 400ms\u000a        chart.selectAll("circle")\u000a            .data(dataFromRsc).transition().duration(400)\u000a            .attr("cx", function(d) { return d.x; })\u000a            .attr("cy", function(d) { return d.y; });\u000a    }\u000a    \u000a    // When the button is clicked...\u000a    $(button).click(function() {\u000a        // ... the resource to fetch JSON data....\u000a		data_rsc.fetchJSON(function(xs) {\u000a        	// ... and pass it to redraw()\u000a        	redraw(xs);\u000a    	});\u000a    });\u000a    \u000a    // Schedule an initial refresh\u000a    data_rsc.fetchJSON(function(xs) {\u000a        // Redraw\u000a        redraw(xs);\u000a    });\u000a}
p679
sg43
I01
sbsg197
Vrandom_dots_js
p680
sg28
g611
sbag0
(g33
g2
Ntp681
Rp682
(dp683
g37
g0
(g38
g2
Ntp684
Rp685
(dp686
g37
V# 100 data points\u000anum_points = 100\u000a\u000aimport random\u000a\u000a# make_json_data creates the JSON data that is to be passed to the client side. Each data point is an XY co-ordinate in the form\u000a# of a dict. Use random.gauss to create points centred around (200,200) with standard deviation of 50\u000adef make_random_dots_json():\u000a    return [{'x':random.gauss(200, 50), 'y':random.gauss(200, 50)}   for i in xrange(num_points)]\u000a\u000a# Make the server side resource object that makes the values created by make_json_data available at a URL\u000arandom_dots_rsc = resource.JsonFnResource(make_random_dots_json)\u000a\u000a# Build the svg, a break and a button within a <div>\u000ap = Html('<div><svg width="400" height="400" style="border: 1px solid black;"></svg><br><button>Refresh</button></div>')\u000a# Use js_function_call to initialise the element with the initRandomDotsChartWithResource function, passing the resource random_dots_rsc as a parameter\u000ap = p.js_function_call('initRandomDotsChartWithResource', random_dots_rsc, num_points)\u000a# Attach the JS code above\u000ap = p.use_js(source=random_dots_js)\u000a# We need d3.js\u000ap = p.use_js('/static/d3.v3.min.js')\u000a\u000ap
p687
sg43
I01
sbsg28
g611
sbag0
(g22
g2
Ntp688
Rp689
(dp690
g26
V<p>Click the button below the chart to make the dots move to new positions. Each time you do this, the client-side resource object is asked to fetch more data. It sends the request to the URL from&nbsp;which the data can be retrieved. The server side code responds by invoking <code>make_random_dots_json</code>. The returned JSON data is sent back to the client, at which time the Javascript <code>refresh</code> function passes it to d3.js, requesting that the dots are moved.</p>
p691
sg28
g611
sbag0
(g22
g2
Ntp692
Rp693
(dp694
g26
V<h3>Live resources</h3><p>Most of the examples so far refresh a presentation by completely replacing the relevant DOM elements. While workable, this can be inefficient in certain circumstances. For example, it would be innefficient to update one data element in&nbsp;a plot that display axes alongside a number of other data elements by rebuilding the plot from scratch. In such cases, it is desirable to incrementally update the chart, modifying only the elements that have changed. We would also prefer to retain the ability to use <a data-cke-saved-href="/pages/docs/larch_concepts/live_values_and_functions" href="/pages/docs/larch_concepts/live_values_and_functions">live values and live functions</a> to drive our application. Enter live resources.</p><p>Live function resources build on function resources by automatically scheduling updates on the server side, with listeners that are informed of updates on the client side. We will make a slightly modified version of the example above, using live resources. This time around, we compute and store the random offsets from the center and allow the user to move the centre and change the size with sliders.</p><p>Please note that most of the Javascript code is the same as before. Changes are marked out.</p>
p695
sg28
g611
sbag0
(g188
g2
Ntp696
Rp697
(dp698
g37
g0
(g192
g2
Ntp699
Rp700
(dp701
g37
V// node is the SVG element. Controls are separate this time\u000a// data_rsc is the resource, received from the Python side\u000a// data_size is the number of points we are displaying\u000afunction initRandomDotsChartWithLiveResource(node, data_rsc, data_size) {\u000a    //\u000a    // --== BEGIN CHANGS ==--\u000a    //\u000a    // We don't have to deal with the button in this one; we are passed the SVG element directly.\u000a    //\u000a    // --== END CHANGES ==--\u000a    //\u000a    \u000a    // Create the d3 chart from our SVG element\u000a    var chart = d3.select(node);\u000a\u000a    // Create some blank data initial data, with x and y coordinates at the centre\u000a    var data = d3.range(data_size).map(function() {return {x: 200, y: 200};});\u000a    \u000a	// Create a circle for each data point\u000a    chart.selectAll("circle")\u000a        .data(data)\u000a            .enter().append("circle")\u000a        .attr("cx", function(d) { return d.x; })\u000a        .attr("cy", function(d) { return d.y; })\u000a        .attr("r", 4.0)\u000a        .attr("fill", "#4090a0");\u000a    \u000a    // Redraw function\u000a    function redraw(dataFromRsc) {\u000a        // Move the circles to the new positions over a period of 400ms\u000a        chart.selectAll("circle")\u000a            .data(dataFromRsc)\u000a            .attr("cx", function(d) { return d.x; })\u000a            .attr("cy", function(d) { return d.y; });\u000a    }\u000a    \u000a    //\u000a    // --== BEGIN CHANGS ==--\u000a    //\u000a    // Rather than listening for a button click, we listen for a change in the resource\u000a    //\u000a    \u000a    // The addListener method allows us to register a listener that will be invoked when the data\u000a    // accessed by the resource has changed.\u000a    data_rsc.addListener(function() {\u000a        // Fetch the data from the resource ...\u000a        data_rsc.fetchJSON(function(xs) {\u000a            // ... and refresh the chart\u000a            redraw(xs);\u000a        });\u000a    });\u000a    //\u000a    // --== END CHANGES ==--\u000a    //\u000a    \u000a    // Schedule an initial refresh\u000a    data_rsc.fetchJSON(function(xs) {\u000a        // Redraw\u000a        redraw(xs);\u000a    });\u000a}
p702
sg43
I01
sbsg197
Vrandom_dots_live_js
p703
sg28
g611
sbag0
(g33
g2
Ntp704
Rp705
(dp706
g37
g0
(g38
g2
Ntp707
Rp708
(dp709
g37
Vfrom larch.live import LiveValue\u000afrom larch.controls import slider\u000a\u000a# 100 data points\u000anum_points = 100\u000a\u000a\u000a# Compute the random offsets\u000arandom_offsets = [[random.gauss(0.0, 1.0), random.gauss(0.0, 1.0)]   for i in xrange(num_points)]\u000a\u000a# Controllable parameters\u000acentre_x = LiveValue(200.0)\u000acentre_y = LiveValue(200.0)\u000ascale = LiveValue(50.0)\u000a\u000a# The live resource\u000a@resource.JsonLiveFnResource\u000adef random_dots_live_rsc():\u000a    # Each point is structured the same as with the previous example\u000a    return [{'x':centre_x.value + offset[0] * scale.value, 'y':centre_y.value + offset[1] * scale.value}   for offset in random_offsets]\u000a\u000a# Build the svg, a break and a button within a <div>\u000achart = Html('<svg width="400" height="400" style="border: 1px solid black;"></svg>')\u000a# Use js_function_call to initialise the element with the initRandomDotsChartWithResource function, passing the resource random_dots_rsc as a parameter\u000achart = chart.js_function_call('initRandomDotsChartWithLiveResource', random_dots_live_rsc, num_points)\u000a# Attach the JS code above\u000achart = chart.use_js(source=random_dots_live_js)\u000a# We need d3.js\u000achart = chart.use_js('/static/d3.v3.min.js')\u000a\u000a\u000a# Arrange the chart above sliders that edit the live values\u000aHtml(chart, '<br>',\u000a     'Centre X = ', centre_x, '<br>',\u000a     slider.live_slider(centre_x, min=0.0, max=400.0, step=1.0, width=500, update_on_slide=True),\u000a     'Centre Y = ', centre_y, '<br>',\u000a     slider.live_slider(centre_y, min=0.0, max=400.0, step=1.0, width=500, update_on_slide=True),\u000a     'Scale = ', scale, '<br>',\u000a     slider.live_slider(scale, min=0.0, max=400.0, step=1.0, width=500, update_on_slide=True))
p710
sg43
I01
sbsg28
g611
sbasbsg93
Vresources
p711
sg95
I7
sbag0
(g11
g2
Ntp712
Rp713
(dp714
g15
g0
(g16
g2
Ntp715
Rp716
(dp717
g20
(lp718
g0
(g22
g2
Ntp719
Rp720
(dp721
g26
V<h1 style="text-align:center">Message channels</h1><p><br></p><p>Message channels allow bi-directional communication between server-side Python code and client-side Javascript code.</p><p>In this example, we will create an SVG image&nbsp;on which there is a dot that can be repositioned with the mouse, via client-side Javascript code. When the user clicks, the dot is repositioned and a message containing the new co-ordinates is sent to the server. The server will respond by updating the state of some text entry controls to reflect the change. The user may also change the values in the text entry controls and click a reposition button, that will cause the server to send a message over the channel&nbsp;<br></p><p> You will also be able to set its position by entering co-ordinates into text entry boxes and clicking the reposition button, which will cause the server to send a message via a message channel asking the client-side code to reposition the dot.</p>
p722
sg28
g716
sbag0
(g188
g2
Ntp723
Rp724
(dp725
g37
g0
(g192
g2
Ntp726
Rp727
(dp728
g37
V// Arguments are:\u000a// node: the SVG element\u000a// channel: the message channel\u000afunction initRepositionableDotWithChannel(node, channel) {\u000a	var dotElement = $(node).children().get(0);\u000a\u000a    // When the SVG element is clicked ...\u000a    $(node).click(function(event) {\u000a		// ... get the event position, relative to the SVG element\u000a        var parentOffset = $(this).offset(); \u000a   		var relX = event.pageX - parentOffset.left;\u000a   		var relY = event.pageY - parentOffset.top;\u000a        \u000a        // Move the dot\u000a        dotElement.setAttribute('cx', relX);\u000a        dotElement.setAttribute('cy', relY);\u000a        \u000a        // Send a message to the server side\u000a        var outgoingMessage = {x: relX, y: relY};\u000a        channel.sendMessage(outgoingMessage);\u000a    });\u000a    \u000a    // When a message arrives from the channel ...\u000a    channel.addListener(function(incomingMessage) {\u000a        // move the dot to the specified position\u000a        dotElement.setAttribute('cx', incomingMessage.x);\u000a        dotElement.setAttribute('cy', incomingMessage.y);\u000a    });\u000a}
p729
sg43
I01
sbsg197
Vrepos_dot_js
p730
sg28
g716
sbag0
(g33
g2
Ntp731
Rp732
(dp733
g37
g0
(g38
g2
Ntp734
Rp735
(dp736
g37
Vfrom larch.pres.html import Html\u000afrom larch.pres import resource\u000afrom larch.controls import button, spinner\u000afrom larch.live import LiveValue\u000a\u000a\u000a# Create the message channel\u000achan = resource.MessageChannel()\u000a\u000a# Create live values to store the X and Y co-ordinates\u000apos_x = LiveValue(200)\u000apos_y = LiveValue(200)\u000a\u000a# When the reposition button is clicked ...\u000adef on_reposition_clicked(event):\u000a    # Get the co-ordinates from the live values, create a message, and send\u000a    outgoing_msg = {'x': pos_x.value, 'y': pos_y.value}\u000a    chan.send(outgoing_msg)\u000a\u000a\u000a# When a message is received ...\u000adef on_message_received(incoming_message):\u000a    # ... update the values of pos_x and pos_y\u000a    # this will cause the spinner controls (below) to update\u000a    pos_x.value = incoming_message['x']    \u000a    pos_y.value = incoming_message['y']\u000a    \u000a# Add the message received listener\u000achan.add_listener(on_message_received)\u000a    \u000a# Controls to edit the values\u000ax_spin = spinner.live_spinner(pos_x)\u000ay_spin = spinner.live_spinner(pos_y)\u000a# Reposition button\u000arepos_button = button.button('Reposition', on_reposition_clicked)\u000a\u000a# The image\u000adot = Html('<svg width="400" height="400" style="border: 1px solid black;"><circle cx="200" cy="200" r="4" fill="#4090a0"/></svg>')\u000adot = dot.js_function_call('initRepositionableDotWithChannel', chan)\u000adot = dot.use_js(source=repos_dot_js)\u000a\u000a# Arrange with controls\u000aHtml(dot, '<br>',\u000a     'X: ', x_spin, '<br>',\u000a     'Y: ', y_spin, '<br>',\u000a     'Click to move dot: ', repos_button)
p737
sg43
I01
sbsg28
g716
sbasbsg93
Vmessage_channels
p738
sg95
I8
sbag0
(g11
g2
Ntp739
Rp740
(dp741
g15
g0
(g16
g2
Ntp742
Rp743
(dp744
g20
(lp745
g0
(g22
g2
Ntp746
Rp747
(dp748
g26
V<h1 style="text-align:center">Page resources</h1><p><br></p><p>Page resources allow you to display a visual value -&nbsp;can be a presentable value (subclass of Pres) or a Python object with a <code>__present__</code> method (see <a data-cke-saved-href="/pages/docs/larch_concepts/objpres" href="/pages/docs/larch_concepts/objpres">here</a> for more info) - in its own page, either within an <a data-cke-saved-href="http://www.w3schools.com/tags/tag_iframe.asp" href="http://www.w3schools.com/tags/tag_iframe.asp"><code>iframe</code></a>&nbsp;element or as a link that will take your browser to a page that will display the value.</p><p>First, lets construct a simple piece of content to display:</p>
p749
sg28
g743
sbag0
(g33
g2
Ntp750
Rp751
(dp752
g37
g0
(g38
g2
Ntp753
Rp754
(dp755
g37
Vfrom larch.pres.html import Html\u000afrom larch.pres import resource\u000a\u000apage = Html('<h1>From within a page resource</h1><p>This content is being displayed via a page resource</p>')\u000a
p756
sg43
I01
sbsg28
g743
sbag0
(g22
g2
Ntp757
Rp758
(dp759
g26
V<h3>Within an iframe</h3><p>We can display the content within an <code>iframe</code> like so:</p>
p760
sg28
g743
sbag0
(g33
g2
Ntp761
Rp762
(dp763
g37
g0
(g38
g2
Ntp764
Rp765
(dp766
g37
V# parameters are: the content to display, width and height\u000aresource.PresIFrame(page, 640, 480)
p767
sg43
I01
sbsg28
g743
sbag0
(g22
g2
Ntp768
Rp769
(dp770
g26
V<h3>From a link</h3><p>We can generate a link from which the content can be accessed:</p>
p771
sg28
g743
sbag0
(g33
g2
Ntp772
Rp773
(dp774
g37
g0
(g38
g2
Ntp775
Rp776
(dp777
g37
V# parameters are: the content to display in the destination page and the link text/content\u000aresource.PresLink(page, Html('Click to visit the page'))
p778
sg43
I01
sbsg28
g743
sbasbsg93
Vpage_resources
p779
sg95
I9
sbasb.