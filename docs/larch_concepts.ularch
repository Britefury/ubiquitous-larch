ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
NsS'front_page_id'
p8
NsS'contents'
p9
(lp10
g0
(clarch.apps.project.project_page
ProjectPage
p11
g2
Ntp12
Rp13
(dp14
S'data'
p15
g0
(clarch.apps.notebook.notebook
Notebook
p16
g2
Ntp17
Rp18
(dp19
S'blocks'
p20
(lp21
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p22
g2
Ntp23
Rp24
(dp25
S'text'
p26
V<h1 style="text-align:center">Larch concepts:&nbsp;presentation system</h1><p><br></p><p>The Larch presentation system is based around the concepts&nbsp;of presentation types and type coercion.</p><h3>Presentation types</h3><p><em>Presentation type</em> is the term used to describe a type/class that derives from the abstract base class <code>Pres</code>&nbsp;that is defined within the <code>larch.pres.pres</code> module.</p><p>Within a standard Python console, values are displayed in textual form. As a result, any value is first converted to a string in order for it to be displayed.</p><p>Ubiquitous Larch displays&nbsp;values visually through a similar mechanism. Rather than converting a value to a string, it is converted to a presentation type (or rather an instance of one). Given that the output is rendered by a web browser, a simple means of achieving this would be to convert it to HTML, stored either within a string or other container. While feasible, such a representation would not lend itself naturally to:</p><ul><li>Using style-sheets. (Style-sheets could be included&nbsp;in-line, but this would lead to duplication wherever they were used)</li><li>Using Javascript. (Same work-around and issues as style-sheets)<br></li><li>Receiving user events. (Could be done in client side Javascript, but what about sending messages back to the server to affect data there?)</li><li>Dynamic content (How would you update part of the page in response to changes on the server side? Most likely, you would have to implement dynamic parts&nbsp;by hand in each instance; very time consuming)<br></li></ul><p>In order to support these requirements, Ubiquitous Larch provides a set of presentation types that cover these cases.</p>
p27
sS'notebook'
p28
g18
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p29
g2
Ntp30
Rp31
(dp32
S'code'
p33
g0
(clarch.apps.source_code
PythonCode
p34
g2
Ntp35
Rp36
(dp37
g33
S''
p38
sS'editable'
p39
I01
sbsg28
g18
sbasbsS'name'
p40
Vpres_system
p41
sS'id'
p42
I0
sbasb.