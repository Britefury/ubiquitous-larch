ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
NsS'front_page_id'
p8
NsS'contents'
p9
(lp10
g0
(clarch.apps.project.project_page
ProjectPage
p11
g2
Ntp12
Rp13
(dp14
S'data'
p15
g0
(clarch.apps.notebook.notebook
Notebook
p16
g2
Ntp17
Rp18
(dp19
S'blocks'
p20
(lp21
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p22
g2
Ntp23
Rp24
(dp25
S'text'
p26
V<h1 style="text-align:center">Larch concepts:&nbsp;presentation system</h1><p><br></p><p>The Larch presentation system is based around the concepts&nbsp;of presentation types and type coercion.</p><h3>Presentation types</h3><p>The Larch&nbsp;<em>presentation types</em>&nbsp;are used to represent visually presentable content.</p><p>In contrast, within a standard Python console, values are displayed in textual form. As a result, any value is first converted to a string in order for it to be displayed. The conversion process uses type coercion; while the value to be displayed can be any type, it is converted to a string for display.</p><p>Ubiquitous Larch displays&nbsp;values visually through a similar mechanism. Rather than converting a value to a string, it is converted to a presentation type (technically,&nbsp;an instance of a presentation type).</p>
p27
sS'notebook'
p28
g18
sbag0
(g22
g2
Ntp29
Rp30
(dp31
g26
V<h3>Presentation types act as descriptions and factories</h3><p>Presentation types describe the visual content that is to be displayed. They also&nbsp;act as factories in that they create the visual content that they describe&nbsp;when they are used.</p><p>For example, using the&nbsp;<code>Html</code>&nbsp;presentation type described&nbsp;in&nbsp;<a data-cke-saved-href="http://127.0.0.1:5000/pages/docs/basic_html" href="http://127.0.0.1:5000/pages/docs/basic_html">Basic HTML</a>, we can demonstrate that it acts as a factory that can stamp out multiple copies of the presentation it describes:</p>
p32
sg28
g18
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p33
g2
Ntp34
Rp35
(dp36
S'code'
p37
g0
(clarch.apps.source_code
PythonCode
p38
g2
Ntp39
Rp40
(dp41
g37
V# Import Html\u000afrom larch.pres.html import Html\u000a\u000a# Create HTML representing an SVG circle\u000acircle = Html('<svg width="25" height="25"><circle cx="12.5" cy="12.5" r="10" fill="#4090a0"/></svg>')\u000a\u000a# Repeated 5 times in a list. Each button is capable of operating independently.\u000a[circle, circle, circle, circle, circle]
p42
sS'editable'
p43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp44
Rp45
(dp46
g26
V<h3>Presentation types can be nested</h3><p>Presentation types can be freely nested within one another; they are composeable:</p>
p47
sg28
g18
sbag0
(g33
g2
Ntp48
Rp49
(dp50
g37
g0
(g38
g2
Ntp51
Rp52
(dp53
g37
V# Put the circle in a button\u000abutton = Html('<button>', circle, '</button>')\u000a\u000a# Put buttons within text\u000aHtml('Some ', button, ' text ', button, ' separated ', button, ' by ', button, ' circles ', button, ' in ', button, ' buttons')
p54
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp55
Rp56
(dp57
g26
V<h3>Representing plain HTML</h3><p>As seen in <a data-cke-saved-href="/pages/docs/basic_html" href="/pages/docs/basic_html">Basic HTML</a>, for this we use the <code>Html</code> presentation type:</p>
p58
sg28
g18
sbag0
(g33
g2
Ntp59
Rp60
(dp61
g37
g0
(g38
g2
Ntp62
Rp63
(dp64
g37
Vfrom larch.pres.html import Html\u000a\u000aHtml('<h4>Hello world</h4>')
p65
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp66
Rp67
(dp68
g26
V<h3>Motivation</h3><p>Given that the output is rendered by a web browser, a simple means of achieving this would be to convert it to plain HTML, stored either within a string or other container. While feasible, such a representation would not lend itself naturally to:</p><ul><li>Using style-sheets. (Style-sheets could be included&nbsp;in-line, but this would lead to duplication wherever they were used)</li><li>Using Javascript. (Same work-around and issues as style-sheets)</li><li>Receiving user events. (Could be done in client side Javascript, but what about sending messages back to the server to affect data there?)</li><li>Dynamic content (How would you update part of the page in response to changes to&nbsp;server side data? Most likely, you would have to implement dynamic behaviour&nbsp;by hand in each instance where you need it; very time consuming)</li></ul><p>Ubiquitous Larch provides a set of presentation types that simplify the above tasks.</p>
p69
sg28
g18
sbag0
(g22
g2
Ntp70
Rp71
(dp72
g26
V<h3>Implementation</h3><p>The Larch presentation types are classes that are rooted at the abstract base class&nbsp;<code>Pres</code>&nbsp;that is defined within the&nbsp;<code>larch.pres.pres</code>&nbsp;module.</p>
p73
sg28
g18
sbasbsS'name'
p74
Vpres_system
p75
sS'id'
p76
I0
sbasb.