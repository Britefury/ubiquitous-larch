ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
NsS'front_page_id'
p8
NsS'contents'
p9
(lp10
g0
(clarch.apps.project.project_page
ProjectPage
p11
g2
Ntp12
Rp13
(dp14
S'data'
p15
g0
(clarch.apps.notebook.notebook
Notebook
p16
g2
Ntp17
Rp18
(dp19
S'blocks'
p20
(lp21
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p22
g2
Ntp23
Rp24
(dp25
S'text'
p26
V<h1 style="text-align:center">Larch concepts:&nbsp;presentation system</h1><p><br></p><p>The Larch presentation system is based around the concepts&nbsp;of presentation types and type coercion.</p><h3>Presentation types</h3><p>The Larch&nbsp;<em>presentation types</em>&nbsp;are used to represent visually presentable content.</p><p>In contrast, within a standard Python console, values are displayed as text, by converting them to strings and outputting&nbsp;the text. This&nbsp;conversion process is known as type coercion.</p><p>Ubiquitous Larch displays&nbsp;values visually through a similar mechanism. Rather than converting a value to a string, it is converted to a presentation type (technically,&nbsp;an instance of a presentation type).</p>
p27
sS'notebook'
p28
g18
sbag0
(g22
g2
Ntp29
Rp30
(dp31
g26
V<h3>Presentation types act as descriptions and factories</h3><p>Presentation types describe the visual content that is to be displayed. They also&nbsp;act as factories, as&nbsp;they create the visual content that they describe&nbsp;when they are used.</p><p>For example, using the&nbsp;<code>Html</code>&nbsp;presentation type described&nbsp;in&nbsp;<a data-cke-saved-href="http://127.0.0.1:5000/pages/docs/basic_html" href="http://127.0.0.1:5000/pages/docs/basic_html">Basic HTML</a>, we can demonstrate that it acts as a factory that can create&nbsp;multiple copies of the presentation it describes:</p>
p32
sg28
g18
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p33
g2
Ntp34
Rp35
(dp36
S'code'
p37
g0
(clarch.apps.source_code
PythonCode
p38
g2
Ntp39
Rp40
(dp41
g37
V# Import Html\u000afrom larch.pres.html import Html\u000a\u000a# Create an SVG circle\u000acircle = Html('<svg width="25" height="25"><circle cx="12.5" cy="12.5" r="10" fill="#4090a0"/></svg>')\u000a\u000a# Repeated 5 times in a list. Each button is capable of operating independently.\u000a[circle, circle, circle, circle, circle]
p42
sS'editable'
p43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp44
Rp45
(dp46
g26
V<h3>Presentation types can be nested</h3>
p47
sg28
g18
sbag0
(g33
g2
Ntp48
Rp49
(dp50
g37
g0
(g38
g2
Ntp51
Rp52
(dp53
g37
V# Put the circle in a button\u000abutton = Html('<button>', circle, '</button>')\u000a\u000a# Put buttons within text\u000aHtml('Some ', button, ' text ', button, ' separated ', button, ' by ', button, ' circles ', button, ' in ', button, ' buttons, ')
p54
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp55
Rp56
(dp57
g26
V<h3>Presentation types are (mostly) immutable</h3><p>The methods that affect presentation types do not (normally) alter the underlying object; instead they create new objects (see <em>Chain method operations</em>, below). Some convenience methods do alter the underlying object; the <code>append</code> and <code>extend</code> methods of <code>Html</code>&nbsp;for&nbsp;example.</p><p>To demonstrate immutability; observe that <code>circle</code> can still be used by itself, desipite being contained within <code>circle_in_button</code>:</p>
p58
sg28
g18
sbag0
(g33
g2
Ntp59
Rp60
(dp61
g37
g0
(g38
g2
Ntp62
Rp63
(dp64
g37
VHtml('The button containing a circle: ', button, ', followed by the circle by itself: ', circle)
p65
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp66
Rp67
(dp68
g26
V<h3>Chain method operations</h3><p>Chain methods are a pattern that is used frequently by presentation types. For example:</p><pre>y = x.with_event_handler(handler)</pre><p>invokes the <code>with_event_handler</code>&nbsp;chain method, that attaches an event handler. Many presentation system chain methods do not return the original object (x). Instead, a new object is returned that contains x. The new object also derives from the <code>Pres</code> base class, so has a compatible interface, along with the ability to use other chain methods.</p><p>The above chain method is equivalent to:</p><pre>y = EventSource(handler, x)</pre><p>y is therefore an instance of&nbsp;EventSource, that&nbsp;is also a presentation type. y&nbsp;also contains x&nbsp;nested within it.</p>
p69
sg28
g18
sbag0
(g22
g2
Ntp70
Rp71
(dp72
g26
V<h3>Presentation types can set up dynamic behaviour</h3><p>In <a data-cke-saved-href="/pages/docs/js_css" href="/pages/docs/js_css">Javascript and CSS</a> we show how chain methods can be used to attach CSS and Javascript&nbsp;to presentations that use it. We also show how to use Javascript code&nbsp;to initialise and shutdown presentations as they are added to and removed from the browse DOM. In <a data-cke-saved-href="/pages/docs/event_handling" href="/pages/docs/event_handling">Event Handling</a>&nbsp;we show how Python funtions can be used to handle&nbsp;events from the browser DOM.</p>
p73
sg28
g18
sbag0
(g22
g2
Ntp74
Rp75
(dp76
g26
V<h3>Representing plain HTML</h3><p>As seen in <a data-cke-saved-href="/pages/docs/basic_html" href="/pages/docs/basic_html">Basic HTML</a>, for this we use the <code>Html</code> presentation type:</p>
p77
sg28
g18
sbag0
(g33
g2
Ntp78
Rp79
(dp80
g37
g0
(g38
g2
Ntp81
Rp82
(dp83
g37
Vfrom larch.pres.html import Html\u000a\u000aHtml('<h4>Hello world</h4>')
p84
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp85
Rp86
(dp87
g26
V<h3>Motivation</h3><p>Given that the output is rendered by a web browser, a simple means of achieving this would be to convert it to plain HTML, stored either within a string or other container. While feasible, such a representation would not lend itself naturally to:</p><ul><li>Using style-sheets. (Style-sheets could be included&nbsp;in-line, but this would lead to duplication wherever they were used)</li><li>Using Javascript. (Same work-around and issues as style-sheets)</li><li>Receiving user events. (Could be done in client side Javascript, but what about sending messages back to the server to affect data there?)</li><li>Dynamic content (How would you update part of the page in response to changes to&nbsp;server side data? Most likely, you would have to implement dynamic behaviour&nbsp;by hand in each instance where you need it; very time consuming)</li></ul><p>Ubiquitous Larch provides a set of presentation types that simplify the above tasks.</p>
p88
sg28
g18
sbag0
(g22
g2
Ntp89
Rp90
(dp91
g26
V<h3>Implementation</h3><p>The Larch presentation types are classes that are rooted at the abstract base class&nbsp;<code>Pres</code>&nbsp;that is defined within the&nbsp;<code>larch.pres.pres</code>&nbsp;module.</p>
p92
sg28
g18
sbasbsS'name'
p93
Vpres_system
p94
sS'id'
p95
I0
sbag0
(g11
g2
Ntp96
Rp97
(dp98
g15
g0
(g16
g2
Ntp99
Rp100
(dp101
g20
(lp102
g0
(g22
g2
Ntp103
Rp104
(dp105
g26
V<h1 style="text-align:center">Understanding the Larch presentation system</h1><p><br></p><p>In contrast to a normal Python console, the output of blocks within a Larch notebook is visual. The two systems operate on similar principals in that they both use type coercion; values are first converted to a string (in a normal console) or a visual representation (in Larch) to display them.</p><p>Lets take a quick tour of how to build and use visual representations.</p><p><strong>A quick definintion:</strong>&nbsp;presentation type: visual output is created and represented using objects whose types are known as presentation types.</p>
p106
sg28
g100
sbag0
(g22
g2
Ntp107
Rp108
(dp109
g26
V<h3>DEFINITION: Presentation types</h3><p>In a normal Python console, values created by&nbsp;evaluating an expression are displayed. Output in a Python console is plain text, so values&nbsp;are first converted to strings (using <code>repr</code>) so that they can be printed.</p><p>In contrast, the output within Larch is visual. Values are first converted to instances of <em>presentation types</em> for display. Sometimes instances of <em>presentation types</em> are referred to <em>presentation values</em>.</p>
p110
sg28
g100
sbag0
(g22
g2
Ntp111
Rp112
(dp113
g26
V<h3>HTML</h3><p>Lets look at the <code>Html</code> presentation type. We can display a simple heading:</p>
p114
sg28
g100
sbag0
(g33
g2
Ntp115
Rp116
(dp117
g37
g0
(g38
g2
Ntp118
Rp119
(dp120
g37
Vfrom larch.pres.html import Html\u000a\u000aHtml('<h4>A heading</h4>')
p121
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp122
Rp123
(dp124
g26
V<p>We can make an image using SVG:</p>
p125
sg28
g100
sbag0
(g33
g2
Ntp126
Rp127
(dp128
g37
g0
(g38
g2
Ntp129
Rp130
(dp131
g37
Vcircle = Html('<svg width="25" height="25"><circle cx="12.5" cy="12.5" r="10" fill="#4090a0"/></svg>')\u000a\u000acircle
p132
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp133
Rp134
(dp135
g26
V<h3>Nesting</h3><p>We can nest <code>Html</code> visuals within one another:</p>
p136
sg28
g100
sbag0
(g33
g2
Ntp137
Rp138
(dp139
g37
g0
(g38
g2
Ntp140
Rp141
(dp142
g37
Vbutton = Html('<button>', circle, '</button>')\u000a\u000abutton
p143
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp144
Rp145
(dp146
g26
V<p>Presentation types act as descriptions of the visuals that are to be built. They can be re-used as many times as necessary. Each time they appear in a presentation, a new visual is created:</p>
p147
sg28
g100
sbag0
(g33
g2
Ntp148
Rp149
(dp150
g37
g0
(g38
g2
Ntp151
Rp152
(dp153
g37
VHtml('Some ', button, ' text ', circle, ' separated ', button, ' by ', circle, ' buttons ', button, ' and ', circle, ' circles')
p154
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp155
Rp156
(dp157
g26
V<h3>Within Python data structures</h3><p>Presentation types display as expected&nbsp;within Python data structures:</p>
p158
sg28
g100
sbag0
(g33
g2
Ntp159
Rp160
(dp161
g37
g0
(g38
g2
Ntp162
Rp163
(dp164
g37
V# They will appear as items within a list:\u000a[circle, button, circle, button]
p165
sg43
I01
sbsg28
g100
sbag0
(g33
g2
Ntp166
Rp167
(dp168
g37
g0
(g38
g2
Ntp169
Rp170
(dp171
g37
V# Or within a dictionary:\u000a{'button': button, 'circle': circle}
p172
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp173
Rp174
(dp175
g26
V<p>They also display correctly within&nbsp;Python objects:</p>
p176
sg28
g100
sbag0
(g33
g2
Ntp177
Rp178
(dp179
g37
g0
(g38
g2
Ntp180
Rp181
(dp182
g37
Vclass ObjectWithValue (object):\u000a    def __init__(self, x, y):\u000a        self.x = x\u000a        self.y = y\u000a        \u000a\u000a# The object will be displayed in a debugger style form. Click to expand the 'Attributes' section to see x and y.\u000aObjectWithValue(button, circle)
p183
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp184
Rp185
(dp186
g26
V<h3>Dynamic behaviour with Javascript</h3><p>Presentation types allow you to add dynamic behaviour to your visuals.</p><p>In the this example, we will attach some Javascript code that will allow the user to resize the circle by clicking and dragging with the mouse. First for the Javascript code:</p>
p187
sg28
g100
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p188
g2
Ntp189
Rp190
(dp191
g37
g0
(clarch.apps.source_code
JSCode
p192
g2
Ntp193
Rp194
(dp195
g37
Vfunction init_resizeable_circle(svgElement) {\u000a    // Create an object with three fields (position X and Y, and button-down) and attach it to the element\u000a    svgElement._behaviour = {x: 0, y: 0, down: false};\u000a    \u000a    var q = $(svgElement);\u000a    \u000a    // On mouse down; get the position and set the button down flag\u000a    q.mousedown(function(event) {\u000a	   	svgElement._behaviour.x = event.pageX;\u000a    	svgElement._behaviour.y = event.pageY;\u000a    	svgElement._behaviour.down = true;\u000a    });\u000a    \u000a    // On mouse up: clear the mouse down flag\u000a    q.mouseup(function(event) {\u000a    	svgElement._behaviour.down = false;\u000a    });\u000a    \u000a    // On mouse out: clear the mouse down flag\u000a    q.mouseout(function(event) {\u000a    	svgElement._behaviour.down = false;\u000a    });\u000a    \u000a    // On mouse move; alter the radius according to the motion in X\u000a    q.mousemove(function(event) {\u000a        // Only make changes if the button is down\u000a        if (svgElement._behaviour.down) {\u000a            // Work out the difference in position from the last event\u000a            var dx = event.pageX - svgElement._behaviour.x;\u000a            var dy = event.pageY - svgElement._behaviour.y;\u000a            \u000a            // Update the position\u000a            svgElement._behaviour.x = event.pageX;\u000a            svgElement._behaviour.y = event.pageY;\u000a            \u000a            // Get the circle element; the first child\u000a            var circleElem = q.children().get(0);\u000a            // Get its radius\u000a            var radius = circleElem.r.baseVal.value;\u000a            // Offset the radius by the motion in X\u000a            radius = Math.max(10, radius + dx);\u000a\u000a           	// Update circle radius and centre\u000a            circleElem.r.baseVal.value = radius;\u000a            circleElem.cx.baseVal.value = circleElem.cy.baseVal.value = radius + 2.5;\u000a            // Update the SVG image size to fit\u000a            svgElement.width.baseVal.value = svgElement.height.baseVal.value = radius * 2 + 5;\u000a        }\u000a    });\u000a}
p196
sg43
I01
sbsS'var_name'
p197
Vbasic_resizeable_circle_js
p198
sg28
g100
sbag0
(g22
g2
Ntp199
Rp200
(dp201
g26
V<p>Now for the Python code that uses it (click and drag the blue circle to resize it):</p>
p202
sg28
g100
sbag0
(g33
g2
Ntp203
Rp204
(dp205
g37
g0
(g38
g2
Ntp206
Rp207
(dp208
g37
V# js_function_call causes the element described by the presentation value on which it is invoked ('circle' in this case)\u000a# must be initialised by calling a named Javascript function ('init_resizeable_circle' in this case) and passing the\u000a# element as a parameter.\u000a# Note that subsequent arguments to js_function_call will be passed through to the Javascript code on the client.\u000a\u000a# use_js informs the presentation system that the provided Javascript code is required by the presentation value\u000a# on which it is invoked (the value returned by the js_function_call method). We attach the source within the\u000a# above Javascript code block, which is available in the global variable 'basic_resizeable_circle_js'.\u000aresizeable_circle = circle.js_function_call('init_resizeable_circle').use_js(source=basic_resizeable_circle_js)\u000a\u000aresizeable_circle
p209
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp210
Rp211
(dp212
g26
V<p>It still works with multiple instances, along side the original fixed size circle:</p>
p213
sg28
g100
sbag0
(g33
g2
Ntp214
Rp215
(dp216
g37
g0
(g38
g2
Ntp217
Rp218
(dp219
g37
V# The last circle will NOT respond\u000a[resizeable_circle, resizeable_circle, resizeable_circle, resizeable_circle, resizeable_circle, circle]
p220
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp221
Rp222
(dp223
g26
V<h3>Dynamic behaviour with Python</h3><p>Restricting dynamic behaviour to Javascript only would be very limiting, as Javascript lacks libraries and features that Python has access to, e.g. NumPy, SciPy, etc.</p><p>For this example, we will introduce the <code>LiveValue</code> class. It will be covered in more detail later. For now however, consider it to be a container that contains a single value. It is presented visually as the value it contains; it gives no hint that it 'surrounds' the value. Additionally, changing its value will cause any visual representations to be updated automatically.</p><p>In this example, we will construct a jQuery slider, which we will use to control the radius of the circle.</p>
p224
sg28
g100
sbag0
(g188
g2
Ntp225
Rp226
(dp227
g37
g0
(g192
g2
Ntp228
Rp229
(dp230
g37
Vfunction init_resize_slider(elem, options) {\u000a    // options contains values from the Python (server) side\u000a    \u000a    // Set the function that responds to slide events\u000a    options.slide = function(event, ui) {\u000a        // Get the value\u000a        var slider_value = ui.value;\u000a        // Send an event to the server side Python code using larch.postEvent\u000a        // First argument: the DOM element from which the event originates\u000a        // Second argument: the name of the event\u000a        // Third argument: event specific data; the value in this case\u000a        larch.postEvent(elem, 'slider_value_event', slider_value);\u000a    };\u000a    \u000a    // Create a jQuery UI slider\u000a    $(elem).slider(options);\u000a}\u000a
p231
sg43
I01
sbsg197
Vdyn_py_js
p232
sg28
g100
sbag0
(g33
g2
Ntp233
Rp234
(dp235
g37
g0
(g38
g2
Ntp236
Rp237
(dp238
g37
Vfrom larch.live import LiveValue\u000a\u000a# THE CIRCLE\u000a\u000a# This live value will contain our circle\u000adynamic_python_circle = LiveValue()\u000a\u000a# This function:\u000a# - takes a radius\u000a# - builds an SVG circle of that radius\u000a# - sets the value of dynamic_python_circle to that SVG image\u000adef set_radius(radius):\u000a    sz = radius * 2 + 5.0\u000a    pos = radius + 2.5\u000a    dynamic_python_circle.value = Html('<svg width="{0}" height="{0}"><circle r="{1}" cx="{2}" cy="{2}" fill="#4090a0"/></svg>'.format(sz, radius, pos))\u000a\u000a# Initialise the circle\u000aset_radius(10.0);\u000a\u000a\u000a# THE SLIDER\u000a    \u000adef on_slider_value_event(event):\u000a    # event.name will be 'slider_value_event', as only those events will be received by this function\u000a    # event.data will contain the value sent from the client side Javascript code; the second argument to larch.postEvent in the JS above\u000a    set_radius(event.data)\u000a\u000a# The slider to control the radius: range between 10 and 200, step of 1\u000aslider_options = {'value': 10.0, 'min': 10.0, 'max': 200.0, 'step': 1.0}\u000a# Use jQuery to turn a 400px wide div into a slider. Pass the options above as a parameter; notice that it comes through\u000a# on the client side Javascript as a parameter to the init_resize_slider function.\u000aslider = Html('<div style="width: 400px;"></div>').js_function_call('init_resize_slider', slider_options).use_js(source=dyn_py_js)\u000a# Attach an event handler that will receive 'slider_value_event' events received from the client side Javascript\u000aconnected_slider = slider.with_event_handler('slider_value_event', on_slider_value_event)\u000a\u000a\u000a# PUTTING THEM TOGETHER\u000a\u000aHtml(connected_slider, '<br>', dynamic_python_circle, '<br>', slider)
p239
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp240
Rp241
(dp242
g26
V<p>Note that the top slider changes the radius of the circle, while the bottom one has no effect. This is because of the fact that slider has no event handler attached. Events emitted by this slider propagate through the server side representation of the page and are never handled.</p><p>This demonstrates that Larch allows&nbsp;Python code to be used to implemented dynamic behaviour.</p>
p243
sg28
g100
sbasbsg93
Vvisual_larch_intro
p244
sg95
I1
sbag0
(g11
g2
Ntp245
Rp246
(dp247
g15
g0
(g16
g2
Ntp248
Rp249
(dp250
g20
(lp251
g0
(g22
g2
Ntp252
Rp253
(dp254
g26
V<h1 style="text-align:center">Spreadsheet style live interactivity with live values and functions</h1><p><br></p><p>Live values and functions provide spreadsheet style live computation within Python. It is likened to a spreadsheet due to the live, interactive updates, not due to a grid-like visual format; live values and functions (the equivalent of cells in Larch) make take whatever visual form is required.</p><p>A live value is like a&nbsp;spreadsheet cell that contains a value., while a&nbsp;live function is like to a cell that uses a formula to compute its value (except the function is written in Python). Visual representations of both will automatically update in response to changes.</p>
p255
sg28
g249
sbag0
(g22
g2
Ntp256
Rp257
(dp258
g26
V<h3>Live values; a very simple example</h3><p>This example will create buttons that&nbsp;increment and decrement an integer contained in a live value. Modifying the live value will cause its visual representation to update automatically; there is&nbsp;no need to explicitly request a refresh.</p><p>The example at the end of <a data-cke-saved-href="/pages/docs/larch_concepts/visual_larch_intro" href="/pages/docs/larch_concepts/visual_larch_intro">Understanding the Larch presentation system</a> used Javascript code to pass events on to the server and event handlers to respond to them. This example will import the <code>button</code> control from the <code>larch.controls</code> packae, which handles these responsibilities,&nbsp;saving some code. The button control is documented in more detail <a data-cke-saved-href="/pages/docs/controls/Button" href="/pages/docs/controls/Button">here</a>.</p>
p259
sg28
g249
sbag0
(g33
g2
Ntp260
Rp261
(dp262
g37
g0
(g38
g2
Ntp263
Rp264
(dp265
g37
V# Import button\u000afrom larch.controls.button import button\u000a# Import live value\u000afrom larch.live import LiveValue\u000a# Import Html\u000afrom larch.pres.html import Html\u000a\u000a# Create our live value with an initial value of 0\u000ax = LiveValue(0)\u000a\u000a# Increment and decrement listeners\u000adef on_dec(event):\u000a    x.value -= 1\u000a    \u000adef on_inc(event):\u000a    x.value += 1\u000a\u000a# Increment and decrement buttons\u000adec_button = button('-', on_dec)\u000ainc_button = button('+', on_inc)\u000a\u000a# Arrange the buttons next to one another, with the value below\u000aHtml(dec_button, ' ', inc_button, '<br>', x)
p266
sg43
I01
sbsg28
g249
sbag0
(g22
g2
Ntp267
Rp268
(dp269
g26
V<h3>Using controls to edit a live value</h3><p>Controls that produce a value (sliders, spinners, text boxes and the like) have live counterparts that are&nbsp;attached to&nbsp;live values in order to edit them. A simple demo:</p>
p270
sg28
g249
sbag0
(g33
g2
Ntp271
Rp272
(dp273
g37
g0
(g38
g2
Ntp274
Rp275
(dp276
g37
Vfrom larch.controls.spinner import live_spinner\u000a\u000ax2 = LiveValue(0)\u000as = live_spinner(x2)\u000a\u000aHtml(s, '<br>', x2)
p277
sg43
I01
sbsg28
g249
sbag0
(g22
g2
Ntp278
Rp279
(dp280
g26
V<h3>Using live functions to build a simple spreadsheet style computation</h3><p>Live functions are passed a Python function as a parameter. The value represented by a live function is the value returned by the function. If the function accesses the value of any live values or live functions, then it said to depend on them and its&nbsp;will be automatically updated in response to changes to the values of the dependents.</p><p>This example uses live values, controls and a live function to create a simple spreadsheet style computation showing the efficiency of a motor. Notice that modifying the values affects the result interactively. The events from the client side jQuery controls are sent to the server, where they are handled and the appropriate updates to the DOM are generated.</p><p>Note that the controls and the output values are in-line within the example text; in contrast to spreadsheet cells,&nbsp;live values and functions are not constrained to act as cells within a grid or any other specific visual format.</p>
p281
sg28
g249
sbag0
(g33
g2
Ntp282
Rp283
(dp284
g37
g0
(g38
g2
Ntp285
Rp286
(dp287
g37
Vfrom larch.live import LiveFunction\u000a\u000ain_power = LiveValue(1000.0)   # Initial value of input power: 1000W\u000aefficiency = LiveValue(80.0)   # Initial value for efficiency: 80%\u000a\u000a\u000a@LiveFunction\u000adef out_power():\u000a    return in_power.value * efficiency.value * 0.01\u000a\u000aHtml('<h4>An electric motor</h4>',\u000a     '<p>Input electrical power = ', live_spinner(in_power), 'W, efficiency of motor = ', live_spinner(efficiency), '%<br>Resulting output power = ', out_power, 'W.</p>')
p288
sg43
I01
sbsg28
g249
sbag0
(g22
g2
Ntp289
Rp290
(dp291
g26
V<h3>Going beyond a spreadsheet; use any Python object</h3><p>Live values and functions are not restricted to working only with numbers and text; their values can be of any type.</p><p>We will now build an interactive diagram that shows the gravitational force between two bodies. Use the sliders to control the distance between the bodies and their respective masses.</p>
p292
sg28
g249
sbag0
(g33
g2
Ntp293
Rp294
(dp295
g37
g0
(g38
g2
Ntp296
Rp297
(dp298
g37
Vimport math\u000a\u000afrom larch.controls.slider import live_slider\u000a\u000a# gravitational constant\u000aG = 6.67384e-11\u000a\u000a# r - the distance between the bodies\u000ar = LiveValue(500.0)\u000ar_slider = live_slider(r, width=800, min=1.0, max=800.0, step=1.0, update_on_slide=True)\u000a\u000a# m1 - mass 1\u000am1 = LiveValue(10.0)\u000am1_slider = live_slider(m1, width=800, min=1.0, max=100.0, step=0.1, update_on_slide=True)\u000a\u000a# m2 - mass 2\u000am2 = LiveValue(10.0)\u000am2_slider = live_slider(m2, width=800, min=1.0, max=100.0, step=0.1, update_on_slide=True)\u000a\u000a\u000a@LiveFunction\u000adef force():\u000a    # Convert masses from tonnes to kg and distances from mm to m\u000a    m1_kg = m1.value * 1000.0\u000a    m2_kg = m2.value * 1000.0\u000a    r_m = r.value * 0.001\u000a    return m1_kg * m2_kg * G / (r_m*r_m)\u000a\u000a\u000a@LiveFunction\u000adef diagram():\u000a    # body 1\u000a    b1_r = math.sqrt(m1.value)\u000a    b1 = Html('<circle r="{0}" cx="50" cy="100" fill="#800000"/>'.format(b1_r))\u000a    # body 2\u000a    b2_x = 50.0 + r.value\u000a    b2_r = math.sqrt(m2.value)\u000a    b2 = Html('<circle r="{0}" cx="{1}" cy="100" fill="#000080"/>'.format(b2_r, b2_x))\u000a    # force text\u000a    f1 = Html('<text x="{0}" y="150" fill="#ff0000">F = {1}N</text>'.format(50.0, force.value))\u000a    f2 = Html('<text x="{0}" y="150" fill="#0000ff">F = {1}N</text>'.format(b2_x, force.value))\u000a    # force lines\u000a    fl1 = Html('<line x1="{0}" y1="100" x2="{1}" y2="100" stroke="#ff0000"/>'.format(50.0 + b1_r, 50.0 + b1_r + force.value*100.0))\u000a    fl2 = Html('<line x1="{0}" y1="100" x2="{1}" y2="100" stroke="#0000ff"/>'.format(b2_x - b2_r, b2_x - b2_r - force.value*100.0))\u000a    return Html('<svg width="1024" height="200" style="border: 1px solid #808080;">', b1, b2, f1, f2, fl1, fl2, '</svg>')\u000a\u000a\u000aHtml(r_slider, 'r = ', r, 'mm<br>', m1_slider, 'M<sub>1</sub> = ', m1, 't<br>', m2_slider, 'M<sub>2</sub> = ', m2, 't<br>', 'F = ', force, 'N<br>', diagram)\u000a
p299
sg43
I01
sbsg28
g249
sbasbsg93
Vlive_values_and_functions
p300
sg95
I2
sbasb.