ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
NsS'front_page_id'
p8
NsS'contents'
p9
(lp10
g0
(clarch.apps.project.project_page
ProjectPage
p11
g2
Ntp12
Rp13
(dp14
S'data'
p15
g0
(clarch.apps.notebook.notebook
Notebook
p16
g2
Ntp17
Rp18
(dp19
S'blocks'
p20
(lp21
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p22
g2
Ntp23
Rp24
(dp25
S'text'
p26
V<h1 style="text-align:center">Larch concepts:&nbsp;presentation system</h1><p><br></p><p>The Larch presentation system is based around the concepts&nbsp;of presentation types and type coercion.</p><h3>Presentation types</h3><p>The Larch&nbsp;<em>presentation types</em>&nbsp;are used to represent visually presentable content.</p><p>In contrast, within a standard Python console, values are displayed as text, by converting them to strings and outputting&nbsp;the text. This&nbsp;conversion process is known as type coercion.</p><p>Ubiquitous Larch displays&nbsp;values visually through a similar mechanism. Rather than converting a value to a string, it is converted to a presentation type (technically,&nbsp;an instance of a presentation type).</p>
p27
sS'notebook'
p28
g18
sbag0
(g22
g2
Ntp29
Rp30
(dp31
g26
V<h3>Presentation types act as descriptions and factories</h3><p>Presentation types describe the visual content that is to be displayed. They also&nbsp;act as factories, as&nbsp;they create the visual content that they describe&nbsp;when they are used.</p><p>For example, using the&nbsp;<code>Html</code>&nbsp;presentation type described&nbsp;in&nbsp;<a data-cke-saved-href="http://127.0.0.1:5000/pages/docs/basic_html" href="http://127.0.0.1:5000/pages/docs/basic_html">Basic HTML</a>, we can demonstrate that it acts as a factory that can create&nbsp;multiple copies of the presentation it describes:</p>
p32
sg28
g18
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p33
g2
Ntp34
Rp35
(dp36
S'code'
p37
g0
(clarch.apps.source_code
PythonCode
p38
g2
Ntp39
Rp40
(dp41
g37
V# Import Html\u000afrom larch.pres.html import Html\u000a\u000a# Create an SVG circle\u000acircle = Html('<svg width="25" height="25"><circle cx="12.5" cy="12.5" r="10" fill="#4090a0"/></svg>')\u000a\u000a# Repeated 5 times in a list. Each button is capable of operating independently.\u000a[circle, circle, circle, circle, circle]
p42
sS'editable'
p43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp44
Rp45
(dp46
g26
V<h3>Presentation types can be nested</h3>
p47
sg28
g18
sbag0
(g33
g2
Ntp48
Rp49
(dp50
g37
g0
(g38
g2
Ntp51
Rp52
(dp53
g37
V# Put the circle in a button\u000abutton = Html('<button>', circle, '</button>')\u000a\u000a# Put buttons within text\u000aHtml('Some ', button, ' text ', button, ' separated ', button, ' by ', button, ' circles ', button, ' in ', button, ' buttons, ')
p54
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp55
Rp56
(dp57
g26
V<h3>Presentation types are (mostly) immutable</h3><p>The methods that affect presentation types do not (normally) alter the underlying object; instead they create new objects (see <em>Chain method operations</em>, below). Some convenience methods do alter the underlying object; the <code>append</code> and <code>extend</code> methods of <code>Html</code>&nbsp;for&nbsp;example.</p><p>To demonstrate immutability; observe that <code>circle</code> can still be used by itself, desipite being contained within <code>circle_in_button</code>:</p>
p58
sg28
g18
sbag0
(g33
g2
Ntp59
Rp60
(dp61
g37
g0
(g38
g2
Ntp62
Rp63
(dp64
g37
VHtml('The button containing a circle: ', button, ', followed by the circle by itself: ', circle)
p65
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp66
Rp67
(dp68
g26
V<h3>Chain method operations</h3><p>Chain methods are a pattern that is used frequently by presentation types. For example:</p><pre>y = x.with_event_handler(handler)</pre><p>invokes the <code>with_event_handler</code>&nbsp;chain method, that attaches an event handler. Many presentation system chain methods do not return the original object (x). Instead, a new object is returned that contains x. The new object also derives from the <code>Pres</code> base class, so has a compatible interface, along with the ability to use other chain methods.</p><p>The above chain method is equivalent to:</p><pre>y = EventSource(handler, x)</pre><p>y is therefore an instance of&nbsp;EventSource, that&nbsp;is also a presentation type. y&nbsp;also contains x&nbsp;nested within it.</p>
p69
sg28
g18
sbag0
(g22
g2
Ntp70
Rp71
(dp72
g26
V<h3>Presentation types can set up dynamic behaviour</h3><p>In <a data-cke-saved-href="/pages/docs/js_css" href="/pages/docs/js_css">Javascript and CSS</a> we show how chain methods can be used to attach CSS and Javascript&nbsp;to presentations that use it. We also show how to use Javascript code&nbsp;to initialise and shutdown presentations as they are added to and removed from the browse DOM. In <a data-cke-saved-href="/pages/docs/event_handling" href="/pages/docs/event_handling">Event Handling</a>&nbsp;we show how Python funtions can be used to handle&nbsp;events from the browser DOM.</p>
p73
sg28
g18
sbag0
(g22
g2
Ntp74
Rp75
(dp76
g26
V<h3>Representing plain HTML</h3><p>As seen in <a data-cke-saved-href="/pages/docs/basic_html" href="/pages/docs/basic_html">Basic HTML</a>, for this we use the <code>Html</code> presentation type:</p>
p77
sg28
g18
sbag0
(g33
g2
Ntp78
Rp79
(dp80
g37
g0
(g38
g2
Ntp81
Rp82
(dp83
g37
Vfrom larch.pres.html import Html\u000a\u000aHtml('<h4>Hello world</h4>')
p84
sg43
I01
sbsg28
g18
sbag0
(g22
g2
Ntp85
Rp86
(dp87
g26
V<h3>Motivation</h3><p>Given that the output is rendered by a web browser, a simple means of achieving this would be to convert it to plain HTML, stored either within a string or other container. While feasible, such a representation would not lend itself naturally to:</p><ul><li>Using style-sheets. (Style-sheets could be included&nbsp;in-line, but this would lead to duplication wherever they were used)</li><li>Using Javascript. (Same work-around and issues as style-sheets)</li><li>Receiving user events. (Could be done in client side Javascript, but what about sending messages back to the server to affect data there?)</li><li>Dynamic content (How would you update part of the page in response to changes to&nbsp;server side data? Most likely, you would have to implement dynamic behaviour&nbsp;by hand in each instance where you need it; very time consuming)</li></ul><p>Ubiquitous Larch provides a set of presentation types that simplify the above tasks.</p>
p88
sg28
g18
sbag0
(g22
g2
Ntp89
Rp90
(dp91
g26
V<h3>Implementation</h3><p>The Larch presentation types are classes that are rooted at the abstract base class&nbsp;<code>Pres</code>&nbsp;that is defined within the&nbsp;<code>larch.pres.pres</code>&nbsp;module.</p>
p92
sg28
g18
sbasbsS'name'
p93
Vpres_system
p94
sS'id'
p95
I0
sbag0
(g11
g2
Ntp96
Rp97
(dp98
g15
g0
(g16
g2
Ntp99
Rp100
(dp101
g20
(lp102
g0
(g22
g2
Ntp103
Rp104
(dp105
g26
V<h1 style="text-align:center">Understanding the Larch presentation system</h1><p><br></p><p>In contrast to a normal Python console, the output of blocks within a Larch notebook is visual. The two systems operate on similar principals in that they both use type coercion; values are first converted to a string (in a normal console) or a visual representation (in Larch) to display them.</p><p>Lets take a quick tour of how to build and use visual representations.</p><p><strong>A quick definintion:</strong>&nbsp;presentation type: visual output is created and represented using objects whose types are known as presentation types.</p>
p106
sg28
g100
sbag0
(g22
g2
Ntp107
Rp108
(dp109
g26
V<h3>DEFINITION: Presentation types</h3><p>In a normal Python console, values created by&nbsp;evaluating an expression are displayed. Output in a Python console is plain text, so values&nbsp;are first converted to strings (using <code>repr</code>) so that they can be printed.</p><p>In contrast, the output within Larch is visual. Values are first converted to instances of <em>presentation types</em> for display. Sometimes instances of <em>presentation types</em> are referred to <em>presentation values</em>.</p>
p110
sg28
g100
sbag0
(g22
g2
Ntp111
Rp112
(dp113
g26
V<h3>HTML</h3><p>Lets look at the <code>Html</code> presentation type. We can display a simple heading:</p>
p114
sg28
g100
sbag0
(g33
g2
Ntp115
Rp116
(dp117
g37
g0
(g38
g2
Ntp118
Rp119
(dp120
g37
Vfrom larch.pres.html import Html\u000a\u000aHtml('<h4>A heading</h4>')
p121
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp122
Rp123
(dp124
g26
V<p>We can make an image using SVG:</p>
p125
sg28
g100
sbag0
(g33
g2
Ntp126
Rp127
(dp128
g37
g0
(g38
g2
Ntp129
Rp130
(dp131
g37
Vcircle = Html('<svg width="25" height="25"><circle cx="12.5" cy="12.5" r="10" fill="#4090a0"/></svg>')\u000a\u000acircle
p132
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp133
Rp134
(dp135
g26
V<h3>Nesting</h3><p>We can nest <code>Html</code> visuals within one another:</p>
p136
sg28
g100
sbag0
(g33
g2
Ntp137
Rp138
(dp139
g37
g0
(g38
g2
Ntp140
Rp141
(dp142
g37
Vbutton = Html('<button>', circle, '</button>')\u000a\u000abutton
p143
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp144
Rp145
(dp146
g26
V<p>Presentation types act as descriptions of the visuals that are to be built. They can be re-used as many times as necessary. Each time they appear in a presentation, a new visual is created:</p>
p147
sg28
g100
sbag0
(g33
g2
Ntp148
Rp149
(dp150
g37
g0
(g38
g2
Ntp151
Rp152
(dp153
g37
VHtml('Some ', button, ' text ', circle, ' separated ', button, ' by ', circle, ' buttons ', button, ' and ', circle, ' circles')
p154
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp155
Rp156
(dp157
g26
V<h3>Inside Python data structures</h3><p>Presentation types display as expected&nbsp;within Python data structures:</p>
p158
sg28
g100
sbag0
(g33
g2
Ntp159
Rp160
(dp161
g37
g0
(g38
g2
Ntp162
Rp163
(dp164
g37
V# They will appear as items within a list:\u000a[circle, button, circle, button]
p165
sg43
I01
sbsg28
g100
sbag0
(g33
g2
Ntp166
Rp167
(dp168
g37
g0
(g38
g2
Ntp169
Rp170
(dp171
g37
V# Or within a dictionary:\u000a{'button': button, 'circle': circle}
p172
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp173
Rp174
(dp175
g26
V<p>They also display correctly within&nbsp;Python objects:</p>
p176
sg28
g100
sbag0
(g33
g2
Ntp177
Rp178
(dp179
g37
g0
(g38
g2
Ntp180
Rp181
(dp182
g37
Vclass ObjectWithValue (object):\u000a    def __init__(self, x, y):\u000a        self.x = x\u000a        self.y = y\u000a        \u000a\u000a# The object will be displayed in a debugger style form. Click to expand the 'Attributes' section to see x and y.\u000aObjectWithValue(button, circle)
p183
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp184
Rp185
(dp186
g26
V<h3>Dynamic behaviour with Javascript</h3><p>Presentation types allow you to add dynamic behaviour to your visuals.</p><p>In the this example, we will attach some Javascript code that will allow the user to resize the circle by clicking and dragging with the mouse. First for the Javascript code:</p>
p187
sg28
g100
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p188
g2
Ntp189
Rp190
(dp191
g37
g0
(clarch.apps.source_code
JSCode
p192
g2
Ntp193
Rp194
(dp195
g37
Vfunction init_resizeable_circle(svgElement) {\u000a    // Create an object with three fields (position X and Y, and button-down) and attach it to the element\u000a    svgElement._behaviour = {x: 0, y: 0, down: false};\u000a    \u000a    var q = $(svgElement);\u000a    \u000a    // On mouse down; get the position and set the button down flag\u000a    q.mousedown(function(event) {\u000a	   	svgElement._behaviour.x = event.pageX;\u000a    	svgElement._behaviour.y = event.pageY;\u000a    	svgElement._behaviour.down = true;\u000a    });\u000a    \u000a    // On mouse up: clear the mouse down flag\u000a    q.mouseup(function(event) {\u000a    	svgElement._behaviour.down = false;\u000a    });\u000a    \u000a    // On mouse out: clear the mouse down flag\u000a    q.mouseout(function(event) {\u000a    	svgElement._behaviour.down = false;\u000a    });\u000a    \u000a    // On mouse move; alter the radius according to the motion in X\u000a    q.mousemove(function(event) {\u000a        // Only make changes if the button is down\u000a        if (svgElement._behaviour.down) {\u000a            // Work out the difference in position from the last event\u000a            var dx = event.pageX - svgElement._behaviour.x;\u000a            var dy = event.pageY - svgElement._behaviour.y;\u000a            \u000a            // Update the position\u000a            svgElement._behaviour.x = event.pageX;\u000a            svgElement._behaviour.y = event.pageY;\u000a            \u000a            // Get the circle element; the first child\u000a            var circleElem = q.children().get(0);\u000a            // Get its radius\u000a            var radius = circleElem.r.baseVal.value;\u000a            // Offset the radius by the motion in X\u000a            radius = Math.max(10, radius + dx);\u000a\u000a           	// Update circle radius and centre\u000a            circleElem.r.baseVal.value = radius;\u000a            circleElem.cx.baseVal.value = circleElem.cy.baseVal.value = radius + 2.5;\u000a            // Update the SVG image size to fit\u000a            svgElement.width.baseVal.value = svgElement.height.baseVal.value = radius * 2 + 5;\u000a        }\u000a    });\u000a}
p196
sg43
I01
sbsS'var_name'
p197
Vbasic_resizeable_circle_js
p198
sg28
g100
sbag0
(g22
g2
Ntp199
Rp200
(dp201
g26
V<p>Now for the Python code that uses it:</p>
p202
sg28
g100
sbag0
(g33
g2
Ntp203
Rp204
(dp205
g37
g0
(g38
g2
Ntp206
Rp207
(dp208
g37
V# js_function_call causes the element described by the presentation value on which it is invoked ('circle' in this case)\u000a# must be initialised by calling a named Javascript function ('init_resizeable_circle' in this case) and passing the\u000a# element as a parameter.\u000a# Note that subsequent arguments to js_function_call will be passed through to the Javascript code on the client.\u000a\u000a# use_js informs the presentation system that the provided Javascript code is required by the presentation value\u000a# on which it is invoked (the value returned by the js_function_call method). We attach the source within the\u000a# above Javascript code block, which is available in the global variable 'basic_resizeable_circle_js'.\u000aresizeable_circle = circle.js_function_call('init_resizeable_circle').use_js(source=basic_resizeable_circle_js)\u000a\u000aresizeable_circle
p209
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp210
Rp211
(dp212
g26
V<p>It still works with multiple instances, along side the original fixed size circle:</p>
p213
sg28
g100
sbag0
(g33
g2
Ntp214
Rp215
(dp216
g37
g0
(g38
g2
Ntp217
Rp218
(dp219
g37
V# The last circle will NOT respond\u000a[resizeable_circle, resizeable_circle, resizeable_circle, resizeable_circle, resizeable_circle, circle]
p220
sg43
I01
sbsg28
g100
sbag0
(g22
g2
Ntp221
Rp222
(dp223
g26
V<h3>Dynamic behaviour with Python</h3><p>Restricting dynamic behaviour to Javascript only would be very limiting, as Javascript lacks libraries and features that Python has access to, e.g. NumPy, SciPy, etc.</p>
p224
sg28
g100
sbasbsg93
Vvisual_larch_intro
p225
sg95
I1
sbasb.