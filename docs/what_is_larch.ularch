ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vdoc_whatis
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1 style="text-align:center">Larch notebooks</h1><p><br></p><p>Larch notebooks appear and operate much like the notebooks in other systems such as <a data-cke-saved-href="http://ipython.org/" href="http://ipython.org/">IPython</a>.</p><p>Notebooks mix rich text and Python code. Rich text - provided by <a data-cke-saved-href="http://ckeditor.com/" href="http://ckeditor.com/">ckEditor</a> - is used for documentation that explains the code. Python code is displayed and executed with execution results displayed immediately below.</p>
p28
sS'notebook'
p29
g19
sbag0
(g23
g2
Ntp30
Rp31
(dp32
g27
V<h3>Start simple</h3><p>Standard out:</p>
p33
sg29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p34
g2
Ntp35
Rp36
(dp37
S'code'
p38
g0
(clarch.apps.source_code
PythonCode
p39
g2
Ntp40
Rp41
(dp42
g38
Vprint 'Text sent to stdout is displayed as seen here'
p43
sS'editable'
p44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp45
Rp46
(dp47
g27
V<p>If the last line is an expression that can be evaluated, it's result is displayed:</p>
p48
sg29
g19
sbag0
(g34
g2
Ntp49
Rp50
(dp51
g38
g0
(g39
g2
Ntp52
Rp53
(dp54
g38
Vimport math\u000a\u000amath.pi*10*10
p55
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp56
Rp57
(dp58
g27
V<h3>Graphics</h3><p>Output can be visual too, in this case using SVG generated by the browser:</p>
p59
sg29
g19
sbag0
(g34
g2
Ntp60
Rp61
(dp62
g38
g0
(g39
g2
Ntp63
Rp64
(dp65
g38
Vimport random\u000afrom larch.pres.html import Html\u000a\u000a# Function to generate a colour for a given co-ordinate\u000adef default_colour(x, y):\u000a    red = (x/500.0) * 100.0 + 100.0\u000a    grn = (y/500.0) * 100.0 + 100.0\u000a    blu = 200.0\u000a    return 'rgba({0}, {1}, {2}, 0.5)'.format(int(red), int(grn), int(blu))\u000a\u000a# Function to create a circle, with a given centre and radius\u000adef circle(x, y, r, colour_fn=default_colour):\u000a    return Html('<circle cx="{0}" cy="{1}" r="{2}" fill="{3}" stroke="{3}" stroke-width="1"/>'.format(x, y, r, colour_fn(x, y)))\u000a\u000a# Function to create an SVG element. The size and contents are specified\u000adef svg(width, height, contents):\u000a    # Html(*([a, b, c] + xs + [p, q, r])) is ugly: use the extend() and append() chain methods to get around this:\u000a    return Html('<svg width="{0}" height="{1}">'.format(width, height)).extend(contents).append('</svg>')\u000a\u000a# Function generate a randomly positioned circle. As arguments, it takes the centre of the distribution, standard deviation and radius\u000adef random_circle(mu_x, mu_y, sigma, radius, colour_fn=default_colour):\u000a    return circle(random.gauss(mu_x, sigma), random.gauss(mu_y, sigma), radius, colour_fn=colour_fn)\u000a\u000a# Function to generate a random dots diagram, of a given size, sigma and number if circles\u000adef random_dots(width, height, sigma, radius, N, colour_fn=default_colour):\u000a    return svg(width, height, [random_circle(width*0.5, height*0.5, sigma, radius, colour_fn)   for i in xrange(N)])\u000a\u000a\u000arandom_dots(500.0, 500.0, 60.0, 4.0, 2048)
p66
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp67
Rp68
(dp69
g27
V<h3>Interactive</h3><p>Larch notebooks can generate interactive results. Use the <a data-cke-saved-href="http://jquery.com/" href="http://jquery.com/">jQuery</a> <a data-cke-saved-href="http://jqueryui.com/slider/" href="http://jqueryui.com/slider/">slider</a> bars below the diagram&nbsp;to control it:</p>
p70
sg29
g19
sbag0
(g34
g2
Ntp71
Rp72
(dp73
g38
g0
(g39
g2
Ntp74
Rp75
(dp76
g38
V# Import live values and functions\u000afrom larch.live import LiveValue, LiveFunction\u000a# Import controls\u000afrom larch.controls import slider\u000a# Import Html\u000afrom larch.pres.html import Html\u000a\u000a\u000anum_dots = LiveValue(2048)\u000asigma = LiveValue(60.0)\u000aradius = LiveValue(4.0)\u000ared = LiveValue((100.0, 200.0))\u000agreen = LiveValue((100.0, 200.0))\u000ablue = LiveValue(200.0)\u000a\u000a\u000a@LiveFunction\u000adef dots():\u000a    _r = red.value\u000a    _g = green.value\u000a    _b = blue.value\u000a    r_offset = _r[0]\u000a    r_scale = _r[1] - _r[0]\u000a    g_offset = _g[0]\u000a    g_scale = _g[1] - _g[0]\u000a    \u000a    \u000a    def user_colour(x, y):\u000a        rd = (x/500.0) * r_scale + r_offset\u000a        grn = (y/500.0) * g_scale + g_offset\u000a        blu = _b\u000a        \u000a        return 'rgba({0}, {1}, {2}, 0.5)'.format(int(rd), int(grn), int(blu))\u000a\u000a    return random_dots(500.0, 500.0, sigma.value, radius.value, int(num_dots.value), colour_fn=user_colour)\u000a    \u000aHtml(dots, '<br>',\u000a     '# of dots: ', num_dots, '<br>', slider.live_slider(num_dots, min=10, max=5012, step=1, update_on_slide=True, width=600),\u000a     'Sigma: ', sigma, '<br>', slider.live_slider(sigma, min=0.0, max=250.0, step=1.0, update_on_slide=True, width=600),\u000a     'Radius: ', radius, '<br>', slider.live_slider(radius, min=0.5, max=20.0, step=0.5, update_on_slide=True, width=600),\u000a     'Red (varies horizontally): ', red, '<br>', slider.live_range_slider(red, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     'Green (varies vertically): ', green, '<br>', slider.live_range_slider(green, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     'Blue: ', blue, '<br>', slider.live_slider(blue, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     )\u000a\u000a
p77
sg44
I01
sbsg29
g19
sbasbsS'name'
p78
Vnotebook
p79
sS'id'
p80
I0
sbasb.