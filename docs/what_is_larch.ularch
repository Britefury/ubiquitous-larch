ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vdoc_whatis
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1 style="text-align:center">Larch notebooks</h1><p><br></p><p>Larch notebooks appear and operate much like the notebooks in other systems such as <a data-cke-saved-href="http://ipython.org/" href="http://ipython.org/">IPython</a>.</p><p>Notebooks mix rich text and Python code. Rich text - provided by <a data-cke-saved-href="http://ckeditor.com/" href="http://ckeditor.com/">ckEditor</a> - is used for documentation that explains the code. Python code is displayed and executed with execution results displayed immediately below.</p>
p28
sS'notebook'
p29
g19
sbag0
(g23
g2
Ntp30
Rp31
(dp32
g27
V<h3>Start simple</h3><p>Standard out:</p>
p33
sg29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p34
g2
Ntp35
Rp36
(dp37
S'code'
p38
g0
(clarch.apps.source_code
PythonCode
p39
g2
Ntp40
Rp41
(dp42
g38
Vprint 'Text sent to stdout is displayed as seen here'
p43
sS'editable'
p44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp45
Rp46
(dp47
g27
V<p>If the last line is an expression that can be evaluated, it's result is displayed:</p>
p48
sg29
g19
sbag0
(g34
g2
Ntp49
Rp50
(dp51
g38
g0
(g39
g2
Ntp52
Rp53
(dp54
g38
Vimport math\u000a\u000amath.pi*10*10
p55
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp56
Rp57
(dp58
g27
V<h3>Graphics</h3><p>Output can be visual too, in this case using SVG generated by the browser:</p>
p59
sg29
g19
sbag0
(g34
g2
Ntp60
Rp61
(dp62
g38
g0
(g39
g2
Ntp63
Rp64
(dp65
g38
Vimport random\u000afrom larch.pres.html import Html\u000a\u000a# Function to generate a colour for a given co-ordinate\u000adef default_colour(x, y):\u000a    red = (x/500.0) * 100.0 + 100.0\u000a    grn = (y/500.0) * 100.0 + 100.0\u000a    blu = 200.0\u000a    return 'rgba({0}, {1}, {2}, 0.5)'.format(int(red), int(grn), int(blu))\u000a\u000a# Function to create a circle, with a given centre and radius\u000adef circle(x, y, r, colour_fn=default_colour):\u000a    return Html('<circle cx="{0}" cy="{1}" r="{2}" fill="{3}" stroke="{3}" stroke-width="1"/>'.format(x, y, r, colour_fn(x, y)))\u000a\u000a# Function to create an SVG element. The size and contents are specified\u000adef svg(width, height, contents):\u000a    # Html(*([a, b, c] + xs + [p, q, r])) is ugly: use the extend() and append() chain methods to get around this:\u000a    return Html('<svg width="{0}" height="{1}">'.format(width, height)).extend(contents).append('</svg>')\u000a\u000a# Function generate a randomly positioned circle. As arguments, it takes the centre of the distribution, standard deviation and radius\u000adef random_circle(mu_x, mu_y, sigma, radius, colour_fn=default_colour):\u000a    return circle(random.gauss(mu_x, sigma), random.gauss(mu_y, sigma), radius, colour_fn=colour_fn)\u000a\u000a# Function to generate a random dots diagram, of a given size, sigma and number if circles\u000adef random_dots(width, height, sigma, radius, N, colour_fn=default_colour):\u000a    return svg(width, height, [random_circle(width*0.5, height*0.5, sigma, radius, colour_fn)   for i in xrange(N)])\u000a\u000a\u000arandom_dots(500.0, 500.0, 60.0, 4.0, 2048)
p66
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp67
Rp68
(dp69
g27
V<h3>Interactive</h3><p>Larch notebooks can generate interactive results. Use the <a data-cke-saved-href="http://jquery.com/" href="http://jquery.com/">jQuery</a> <a data-cke-saved-href="http://jqueryui.com/slider/" href="http://jqueryui.com/slider/">slider</a> bars below the diagram&nbsp;to control it:</p>
p70
sg29
g19
sbag0
(g34
g2
Ntp71
Rp72
(dp73
g38
g0
(g39
g2
Ntp74
Rp75
(dp76
g38
V# Import live values and functions\u000afrom larch.live import LiveValue, LiveFunction\u000a# Import controls\u000afrom larch.controls import slider\u000a# Import Html\u000afrom larch.pres.html import Html\u000a\u000a\u000a# A LiveValue is like a spreadsheet cell that contains a constant numeric value\u000a# LiveValue instances can contain any type of object though, not just numbers\u000a# When the value changes, the event propagates to any live functions (see below),\u000a# and causes visual representations (output) to update automatically\u000anum_dots = LiveValue(2048)\u000asigma = LiveValue(60.0)\u000aradius = LiveValue(4.0)\u000ared = LiveValue((100.0, 200.0))\u000agreen = LiveValue((100.0, 200.0))\u000ablue = LiveValue(200.0)\u000a\u000a\u000a# A LiveFunction is like a spreadsheet cell with a formula, except that the formula\u000a# is defined by a Python function. This 'cell' creates a diagram\u000a@LiveFunction\u000adef dots():\u000a    # Getting values from LiveValues can introduce overhead, so store before using:\u000a    _r = red.value\u000a    _g = green.value\u000a    _b = blue.value\u000a    # Compute offsets and scale factors\u000a    r_offset = _r[0]\u000a    r_scale = _r[1] - _r[0]\u000a    g_offset = _g[0]\u000a    g_scale = _g[1] - _g[0]\u000a    \u000a    # Define a colour function that generates a CSS rgba colour\u000a    def user_colour(x, y):\u000a        rd = (x/500.0) * r_scale + r_offset\u000a        grn = (y/500.0) * g_scale + g_offset\u000a        blu = _b\u000a        \u000a        return 'rgba({0}, {1}, {2}, 0.5)'.format(int(rd), int(grn), int(blu))\u000a\u000a    # Create random dots\u000a    return random_dots(500.0, 500.0, sigma.value, radius.value, int(num_dots.value), colour_fn=user_colour)\u000a   \u000a    \u000a# The Html presentation type is used so that HTML tags can be used to spatially arrange the diagram\u000a# and the controls, along with labels and values\u000aHtml(dots, '<br>',\u000a     '# of dots: ', num_dots, '<br>', slider.live_slider(num_dots, min=10, max=5012, step=1, update_on_slide=True, width=600),\u000a     'Sigma: ', sigma, '<br>', slider.live_slider(sigma, min=0.0, max=250.0, step=1.0, update_on_slide=True, width=600),\u000a     'Radius: ', radius, '<br>', slider.live_slider(radius, min=0.5, max=20.0, step=0.5, update_on_slide=True, width=600),\u000a     'Red (varies horizontally): ', red, '<br>', slider.live_range_slider(red, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     'Green (varies vertically): ', green, '<br>', slider.live_range_slider(green, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     'Blue: ', blue, '<br>', slider.live_slider(blue, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     )\u000a\u000a
p77
sg44
I01
sbsg29
g19
sbasbsS'name'
p78
Vnotebook
p79
sS'id'
p80
I0
sbag0
(g12
g2
Ntp81
Rp82
(dp83
g16
g0
(g17
g2
Ntp84
Rp85
(dp86
g21
(lp87
g0
(g23
g2
Ntp88
Rp89
(dp90
g27
V<h1 style="text-align:center">Live object system</h1><p><br></p><p>The Ubiquitous Larch operates as a live object system, like smalltalk. Every part of the application that you see is composed of Python objects. Objects are presented using a novel take on Model-View-Controller (MVC), explained in our <a data-cke-saved-href="http://onlinelibrary.wiley.com/doi/10.1002/spe.2182/abstract;jsessionid=4F31562429A3AD8A0198197F74C63547.f03t03?deniedAccessCustomisedMessage=&amp;userIsAuthenticated=false" href="http://onlinelibrary.wiley.com/doi/10.1002/spe.2182/abstract;jsessionid=4F31562429A3AD8A0198197F74C63547.f03t03?deniedAccessCustomisedMessage=&amp;userIsAuthenticated=false">journal article</a>.</p>
p91
sg29
g85
sbag0
(g23
g2
Ntp92
Rp93
(dp94
g27
V<h3>Presentation types</h3><p>Presentation types are classes whose instances represent visual content. The one that is mostly commonly used in Larch is <code>Html</code>, that allows you to create HTML content. Let's use it create an SVG circle for use later in this notebook:</p>
p95
sg29
g85
sbag0
(g34
g2
Ntp96
Rp97
(dp98
g38
g0
(g39
g2
Ntp99
Rp100
(dp101
g38
Vfrom larch.pres.html import Html\u000a\u000acircle = Html('<svg width="25" height="25" style="border: 1px solid #ddd;"><circle cx="12.5" cy="12.5" r="10" fill="#49a"></svg>')\u000a\u000acircle
p102
sg44
I01
sbsg29
g85
sbag0
(g23
g2
Ntp103
Rp104
(dp105
g27
V<h3>Displaying an object</h3><p>Lets start simple, by defining a simple class and display an instance of it. By default, objects are displayed using the object inspect, that shows a debugger style view of the object. Expand the&nbsp;<em>type</em>,&nbsp;<em>attributes</em>&nbsp;and&nbsp;<em>repr</em>&nbsp;sections to see the contents of the object.</p>
p106
sg29
g85
sbag0
(g34
g2
Ntp107
Rp108
(dp109
g38
g0
(g39
g2
Ntp110
Rp111
(dp112
g38
Vclass SimpleObject (object):\u000a    def __init__(self, x, y):\u000a        self.x, self.y = x, y\u000a\u000aSimpleObject(10, 20)
p113
sg44
I01
sbsg29
g85
sbag0
(g23
g2
Ntp114
Rp115
(dp116
g27
V<p>If we make a <code>SimpleObject</code> that has&nbsp;the circle in an attribute, it can be seen&nbsp;in the inspector:</p>
p117
sg29
g85
sbag0
(g34
g2
Ntp118
Rp119
(dp120
g38
g0
(g39
g2
Ntp121
Rp122
(dp123
g38
VSimpleObject(10, circle)
p124
sg44
I01
sbsg29
g85
sbag0
(g23
g2
Ntp125
Rp126
(dp127
g27
V<h3>Presentation by type coercion</h3><p>Objects are presented within Larch using type coercion. Instances of presentation types remain as is. Other objects are&nbsp;<em>coerced</em>&nbsp;into instances of presentation types that are used to generate HTML, CSS and Javascript for the browser.</p><p>In the above example the inspector converts the <code>SimpleObject</code> instance to a collection of presentation instances that will construct the interactive inspector seen above. As the circle is already an instance of presentation type (<code>Html</code>), it is left as is.</p>
p128
sg29
g85
sbag0
(g23
g2
Ntp129
Rp130
(dp131
g27
V<h3>Customising an object's appearance</h3><p>You can customise an object's appearance by defining a <code>__present__</code> method:</p>
p132
sg29
g85
sbasbsg78
Vlive_objects
p133
sg80
I1
sbasb.