ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vdoc_whatis
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1 style="text-align:center">Larch notebooks</h1><p><br></p><p>Larch notebooks appear and operate much like the notebooks in other systems such as <a data-cke-saved-href="http://ipython.org/" href="http://ipython.org/">IPython</a>.</p><p>Notebooks mix rich text and Python code. Rich text - provided by <a data-cke-saved-href="http://ckeditor.com/" href="http://ckeditor.com/">ckEditor</a> - is used for documentation that explains the code. Python code is displayed and executed with execution results displayed immediately below.</p>
p28
sS'notebook'
p29
g19
sbag0
(g23
g2
Ntp30
Rp31
(dp32
g27
V<h3>Start simple</h3><p>Standard out:</p>
p33
sg29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p34
g2
Ntp35
Rp36
(dp37
S'code'
p38
g0
(clarch.apps.source_code
PythonCode
p39
g2
Ntp40
Rp41
(dp42
g38
Vprint 'Text sent to stdout is displayed as seen here'
p43
sS'editable'
p44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp45
Rp46
(dp47
g27
V<p>If the last line is an expression that can be evaluated, it's result is displayed:</p>
p48
sg29
g19
sbag0
(g34
g2
Ntp49
Rp50
(dp51
g38
g0
(g39
g2
Ntp52
Rp53
(dp54
g38
Vimport math\u000a\u000amath.pi*10*10
p55
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp56
Rp57
(dp58
g27
V<h3>Graphics</h3><p>Output can be visual too, in this case using SVG generated by the browser:</p>
p59
sg29
g19
sbag0
(g34
g2
Ntp60
Rp61
(dp62
g38
g0
(g39
g2
Ntp63
Rp64
(dp65
g38
Vimport random\u000afrom larch.pres.html import Html\u000a\u000a# Function to generate a colour for a given co-ordinate\u000adef default_colour(x, y):\u000a    red = (x/500.0) * 100.0 + 100.0\u000a    grn = (y/500.0) * 100.0 + 100.0\u000a    blu = 200.0\u000a    return 'rgba({0}, {1}, {2}, 0.5)'.format(int(red), int(grn), int(blu))\u000a\u000a# Function to create a circle, with a given centre and radius\u000adef circle(x, y, r, colour_fn=default_colour):\u000a    return Html('<circle cx="{0}" cy="{1}" r="{2}" fill="{3}" stroke="{3}" stroke-width="1"/>'.format(x, y, r, colour_fn(x, y)))\u000a\u000a# Function to create an SVG element. The size and contents are specified\u000adef svg(width, height, contents):\u000a    # Html(*([a, b, c] + xs + [p, q, r])) is ugly: use the extend() and append() chain methods to get around this:\u000a    return Html('<svg width="{0}" height="{1}" style="border: 1px solid #ddd;">'.format(width, height)).extend(contents).append('</svg>')\u000a\u000a# Function generate a randomly positioned circle. As arguments, it takes the centre of the distribution, standard deviation and radius\u000adef random_circle(mu_x, mu_y, sigma, radius, colour_fn=default_colour):\u000a    return circle(random.gauss(mu_x, sigma), random.gauss(mu_y, sigma), radius, colour_fn=colour_fn)\u000a\u000a# Function to generate a random dots diagram, of a given size, sigma and number if circles\u000adef random_dots(width, height, sigma, radius, N, colour_fn=default_colour):\u000a    return svg(width, height, [random_circle(width*0.5, height*0.5, sigma, radius, colour_fn)   for i in xrange(N)])\u000a\u000a\u000arandom_dots(500.0, 500.0, 60.0, 4.0, 2048)
p66
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp67
Rp68
(dp69
g27
V<h3>Interactive</h3><p>Larch notebooks can generate interactive results. Use the <a data-cke-saved-href="http://jquery.com/" href="http://jquery.com/">jQuery</a> <a data-cke-saved-href="http://jqueryui.com/slider/" href="http://jqueryui.com/slider/">slider</a> bars below the diagram&nbsp;to control it:</p>
p70
sg29
g19
sbag0
(g34
g2
Ntp71
Rp72
(dp73
g38
g0
(g39
g2
Ntp74
Rp75
(dp76
g38
V# Import live values and functions\u000afrom larch.live import LiveValue, LiveFunction\u000a# Import controls\u000afrom larch.controls import slider\u000a# Import Html\u000afrom larch.pres.html import Html\u000a\u000a\u000a# A LiveValue is like a spreadsheet cell that contains a constant numeric value\u000a# LiveValue instances can contain any type of object though, not just numbers\u000a# When the value changes, the event propagates to any live functions (see below),\u000a# and causes visual representations (output) to update automatically\u000anum_dots = LiveValue(2048)\u000asigma = LiveValue(60.0)\u000aradius = LiveValue(4.0)\u000ared = LiveValue((100.0, 200.0))\u000agreen = LiveValue((100.0, 200.0))\u000ablue = LiveValue(200.0)\u000a\u000a\u000a# A LiveFunction is like a spreadsheet cell with a formula, except that the formula\u000a# is defined by a Python function. This 'cell' creates a diagram\u000a@LiveFunction\u000adef dots():\u000a    # Getting values from LiveValues can introduce overhead, so store before using:\u000a    _r = red.value\u000a    _g = green.value\u000a    _b = blue.value\u000a    # Compute offsets and scale factors\u000a    r_offset = _r[0]\u000a    r_scale = _r[1] - _r[0]\u000a    g_offset = _g[0]\u000a    g_scale = _g[1] - _g[0]\u000a    \u000a    # Define a colour function that generates a CSS rgba colour\u000a    def user_colour(x, y):\u000a        rd = (x/500.0) * r_scale + r_offset\u000a        grn = (y/500.0) * g_scale + g_offset\u000a        blu = _b\u000a        \u000a        return 'rgba({0}, {1}, {2}, 0.5)'.format(int(rd), int(grn), int(blu))\u000a\u000a    # Create random dots\u000a    return random_dots(500.0, 500.0, sigma.value, radius.value, int(num_dots.value), colour_fn=user_colour)\u000a   \u000a    \u000a# The Html presentation type is used so that HTML tags can be used to spatially arrange the diagram\u000a# and the controls, along with labels and values\u000aHtml(dots, '<br>',\u000a     '# of dots: ', num_dots, '<br>', slider.live_slider(num_dots, min=10, max=5012, step=1, update_on_slide=True, width=600),\u000a     'Sigma: ', sigma, '<br>', slider.live_slider(sigma, min=0.0, max=250.0, step=1.0, update_on_slide=True, width=600),\u000a     'Radius: ', radius, '<br>', slider.live_slider(radius, min=0.5, max=20.0, step=0.5, update_on_slide=True, width=600),\u000a     'Red (varies horizontally): ', red, '<br>', slider.live_range_slider(red, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     'Green (varies vertically): ', green, '<br>', slider.live_range_slider(green, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     'Blue: ', blue, '<br>', slider.live_slider(blue, min=0, max=255, step=1, update_on_slide=True, width=600),\u000a     )\u000a\u000a
p77
sg44
I01
sbsg29
g19
sbasbsS'name'
p78
Vnotebook
p79
sS'id'
p80
I0
sbag0
(g12
g2
Ntp81
Rp82
(dp83
g16
g0
(g17
g2
Ntp84
Rp85
(dp86
g21
(lp87
g0
(g23
g2
Ntp88
Rp89
(dp90
g27
V<h1 style="text-align:center">Live object system</h1><p><br></p><p>The Ubiquitous Larch operates as a live object system, like Smalltalk. Every part of the application that you see is composed of Python objects. Objects are presented using a novel take on Model-View-Controller (MVC), explained in our <a data-cke-saved-href="http://onlinelibrary.wiley.com/doi/10.1002/spe.2182/abstract;jsessionid=4F31562429A3AD8A0198197F74C63547.f03t03?deniedAccessCustomisedMessage=&amp;userIsAuthenticated=false" href="http://onlinelibrary.wiley.com/doi/10.1002/spe.2182/abstract;jsessionid=4F31562429A3AD8A0198197F74C63547.f03t03?deniedAccessCustomisedMessage=&amp;userIsAuthenticated=false">journal article</a>.</p>
p91
sg29
g85
sbag0
(g23
g2
Ntp92
Rp93
(dp94
g27
V<h3>Live object inspector</h3><p>Within Larch, the live object inspector can be accessed with&nbsp;<code>Alt-Shift-Right-click</code>&nbsp;(or <code>Ctrl-Alt-Right-click</code>; the second combination may not work on some platforms). The live object inspector will appear at the bottom of the page. It will show a list of objects that are the Python objects whose visual representations contain the mouse pointer at the click position. The inner most object is first, with the outer most last. Hover the mouse over them to highlight the visual representations of the objects in the page. Try it now on objects displayed in this page. Clicking on a object in the inspector will cause a new browser tab or window to open, containing a console from which you can access the object - through the variable <code>m</code> -&nbsp;that was selected. You can now enter code the interacts with or modifies the object that you selected.</p><p>If you are interested in seeing how a Larch notebook is structured, inspect one of the blocks in this page using the aforementioned action. Choose the <code>Notebook</code> object in the inspector to bring up a console, form which&nbsp;From within the console type:</p><pre>inspect(m)</pre><p>You may now browse the object's attributes.</p>
p95
sg29
g85
sbag0
(g23
g2
Ntp96
Rp97
(dp98
g27
V<h3>A notebook within a notebook</h3><p>The live object system can be demonstrated by creating a console within a notebook; a console will be created and displayed as the result of executing a code block. It is full interactive and useable. It is even possible to further nest consoles within one another.</p>
p99
sg29
g85
sbag0
(g34
g2
Ntp100
Rp101
(dp102
g38
g0
(g39
g2
Ntp103
Rp104
(dp105
g38
Vfrom larch.apps.console import console\u000a\u000acon = console.PythonConsole()\u000acon.add_binding('console', console)\u000a\u000a#con
p106
sg44
I01
sbsg29
g85
sbag0
(g23
g2
Ntp107
Rp108
(dp109
g27
V<h2>How does it all work?</h2><p>Lets take a quick tour of the Larch presentation system.</p>
p110
sg29
g85
sbag0
(g23
g2
Ntp111
Rp112
(dp113
g27
V<h3>Presentation types</h3><p>Presentation types are classes whose instances represent visual content. The one that is mostly commonly used in Larch is <code>Html</code>, that allows you to create HTML content. Let's use it create an SVG circle for use later in this notebook:</p>
p114
sg29
g85
sbag0
(g34
g2
Ntp115
Rp116
(dp117
g38
g0
(g39
g2
Ntp118
Rp119
(dp120
g38
Vfrom larch.pres.html import Html\u000a\u000acircle = Html('<svg width="25" height="25" style="border: 1px solid #ddd;"><circle cx="12.5" cy="12.5" r="10" fill="#49a"></svg>')\u000a\u000acircle
p121
sg44
I01
sbsg29
g85
sbag0
(g23
g2
Ntp122
Rp123
(dp124
g27
V<h3>Displaying an object</h3><p>Lets start simple, by defining a simple class and display an instance of it. By default, objects are displayed using the object inspect, that shows a debugger style view of the object. Expand the&nbsp;<em>type</em>,&nbsp;<em>attributes</em>&nbsp;and&nbsp;<em>repr</em>&nbsp;sections to see the contents of the object.</p>
p125
sg29
g85
sbag0
(g34
g2
Ntp126
Rp127
(dp128
g38
g0
(g39
g2
Ntp129
Rp130
(dp131
g38
Vclass SimpleObject (object):\u000a    def __init__(self, x, y):\u000a        self.x, self.y = x, y\u000a\u000aSimpleObject(10, 20)
p132
sg44
I01
sbsg29
g85
sbag0
(g23
g2
Ntp133
Rp134
(dp135
g27
V<p>If we make a <code>SimpleObject</code> that has&nbsp;the circle in an attribute, it can be seen&nbsp;in the inspector:</p>
p136
sg29
g85
sbag0
(g34
g2
Ntp137
Rp138
(dp139
g38
g0
(g39
g2
Ntp140
Rp141
(dp142
g38
VSimpleObject(10, circle)
p143
sg44
I01
sbsg29
g85
sbag0
(g23
g2
Ntp144
Rp145
(dp146
g27
V<h3>Presentation by type coercion</h3><p>Objects are presented within Larch using type coercion. Instances of presentation types remain as is. Other objects are&nbsp;<em>coerced</em>&nbsp;into instances of presentation types that are used to generate HTML, CSS and Javascript for the browser.</p><p>In the above example the inspector converts the <code>SimpleObject</code> instance to a collection of presentation instances that will construct the interactive inspector seen above. As the circle is already an instance of presentation type (<code>Html</code>), it is left as is.</p>
p147
sg29
g85
sbag0
(g23
g2
Ntp148
Rp149
(dp150
g27
V<h3>Customising an object's appearance</h3><p>You can customise an object's appearance by defining a <code>__present__</code> method. In this example, we define <code>Leaf</code> and <code>Branch</code> classes for building a simple tree. We also declare CSS for styling:</p>
p151
sg29
g85
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p152
g2
Ntp153
Rp154
(dp155
g38
g0
(clarch.apps.source_code
CSSCode
p156
g2
Ntp157
Rp158
(dp159
g38
Vdiv.value {\u000a    text-align: center;\u000a}\u000a\u000adiv.branch {\u000a    margin: 4px;\u000a    border: 1px solid #8cf;\u000a    border-radius: 4px;\u000a    background: #f0f8ff;\u000a}\u000a\u000adiv.leaf {\u000a    margin: 4px;\u000a    border: 1px solid #6c6;\u000a    border-radius: 4px;\u000a    background: #f8fff8;\u000a    padding: 3px 6px;\u000a}\u000a\u000adiv.child {\u000a    float: left;\u000a}\u000a\u000adiv.clear_both {\u000a    clear: both;\u000a}
p160
sg44
I01
sbsS'var_name'
p161
Vtree_css
p162
sg29
g85
sbag0
(g34
g2
Ntp163
Rp164
(dp165
g38
g0
(g39
g2
Ntp166
Rp167
(dp168
g38
Vimport heapq\u000aimport random\u000a\u000a\u000aclass TNode (object):\u000a    # Branch node\u000a    def __init__(self, value, *children):\u000a        self.value = value\u000a        self.children = list(children)\u000a        \u000a    def __present__(self, fragment):\u000a        if len(self.children) == 0:\u000a            # Leaf: display value in a green box\u000a            return Html('<div class="leaf value">', self.value, '</div>').use_css(source=tree_css)\u000a        else:\u000a            # Branch\u000a            value = Html('<div class="value">', self.value, '</div>')				# Value within its div\u000a            children = [Html('<div class="child">', child, '</div>')   for child in self.children]	# Children arranged horizontally (float: left)\u000a            clearance = Html('<div class="clear_both"></div>')						# clear: both ensures that the containing div will reach the bottom of the children\u000a            return Html('<div class="branch">', value).extend(children).append(clearance).append('</div>')	# Arrange vertically\u000a    \u000a\u000a# Make heap from random numbers\u000adef make_heap(N):\u000a    xs = [random.randint(0,N)   for i in xrange(N)]\u000a    heapq.heapify(xs)\u000a    return xs\u000a\u000a# Convert heap to tree\u000adef heap_to_tree(h, k=0):\u000a    node = TNode(h[k])\u000a    l, m = k * 2 + 1,  k * 2 + 2\u000a    if l < len(h):\u000a        node.children.append(heap_to_tree(h, l))\u000a    if m < len(h):\u000a        node.children.append(heap_to_tree(h, m))\u000a    return node\u000a        \u000a# Create and display a sample heap    \u000atree = heap_to_tree(make_heap(20))\u000atree
p169
sg44
I01
sbsg29
g85
sbag0
(g23
g2
Ntp170
Rp171
(dp172
g27
V<h3>Understanding the presentation process</h3><p>To better demonstrate the presentation process, we will re-use the tree example above, this time modifying Larch's presentation process so that you can see it step by step.</p><p>The tree will be replaced with a dark place holder that shows the type name. Click the place holder to show how the presentation system replaces the <code>TNode</code> object -&nbsp;that it does not know how to display -&nbsp;with presentation types&nbsp;such as <code>Html</code> - that it does. Since each node has other objects, you will uncover more place holders. Keep clicking them until they have been replaced with visual content. This is what the Larch presentation system does in order to display a Python object.</p><p>The replacement process depends on the perspective. The default perspective tries to invoke a method called <code>__present__</code> on the object. If that fails, it will hand the object to the inspector perspective. The inspector perspective displays Python primitive types as one would expect, while displaying objects in the debugger-style expandable type/attributes/repr form seen earlier.</p>
p173
sg29
g85
sbag0
(g34
g2
Ntp174
Rp175
(dp176
g38
g0
(g39
g2
Ntp177
Rp178
(dp179
g38
Vfrom doc_whatis.pres_process_persp import UncoverPerspective\u000a\u000aUncoverPerspective.instance(tree)
p180
sg44
I01
sbsg29
g85
sbasbsg78
Vlive_objects
p181
sg80
I1
sbag0
(g12
g2
Ntp182
Rp183
(dp184
g16
g0
(g17
g2
Ntp185
Rp186
(dp187
g21
(lp188
g0
(g23
g2
Ntp189
Rp190
(dp191
g27
V<h1 style="text-align:center">Presentation Process Perspective</h1><p><br></p><p>The presentation process perspective allows us to see the presentation process as it happens.</p><p>It takes an existing perspective and augments it, allowing the user to uncover the presentation process.</p><p><br></p><p>First, we implement a function that allows us to hide something behind a placeholder:</p>
p192
sg29
g186
sbag0
(g152
g2
Ntp193
Rp194
(dp195
g38
g0
(g156
g2
Ntp196
Rp197
(dp198
g38
Vtable.__uncover_placeholder {\u000a	display: inline;\u000a}\u000a\u000atable.__uncover_placeholder > tbody {\u000a	display: inline;\u000a}    \u000a\u000atable.__uncover_placeholder > tbody > tr {\u000a	display: inline;\u000a}\u000a\u000atable.__uncover_placeholder > tbody > tr > td {\u000a	display: inline;\u000a}\u000a\u000atable.__uncover_placeholder > tbody > tr > td > a {\u000a    text-decoration: none;\u000a    background: #333;\u000a    color: #f0f0f0;\u000a    border: 1px solid #666;\u000a    border-radius: 5px;\u000a}\u000a\u000atable.__uncover_placeholder > tbody > tr > td > td a:hover {\u000a    background: #555;\u000a    color: #fff;\u000a    border: 1px solid #888;\u000a}\u000a\u000a.__uncover_value {\u000a}\u000a\u000a.__uncover_hidden {\u000a    display: none;\u000a}\u000a\u000atable.__uncover_hidden {\u000a    display: none;\u000a}
p199
sg44
I01
sbsg161
Vuncover_pres_css
p200
sg29
g186
sbag0
(g152
g2
Ntp201
Rp202
(dp203
g38
g0
(clarch.apps.source_code
JSCode
p204
g2
Ntp205
Rp206
(dp207
g38
Vfunction init_uncover_pres(node) {\u000a    var a = $(node);\u000a    \u000a    a.click(function(event) {\u000a        var table = a.closest("table.__uncover_placeholder");\u000a        var span = table.next();\u000a        span.removeClass("__uncover_hidden");\u000a        table.addClass("__uncover_hidden");\u000a        event.preventDefault();\u000a    });\u000a}\u000a
p208
sg44
I01
sbsg161
Vuncover_pres_js
p209
sg29
g186
sbag0
(g34
g2
Ntp210
Rp211
(dp212
g38
g0
(g39
g2
Ntp213
Rp214
(dp215
g38
Vfrom larch.pres.html import Html\u000a\u000adef removable_placeholder(placeholder_text, value):\u000a    placeholder = Html('<a href="#">{0}</a>'.format(placeholder_text)).js_function_call('init_uncover_pres').use_js(source=uncover_pres_js)\u000a    return Html('<table class="__uncover_placeholder"><tbody><tr><td>', placeholder, '</td></tr></tbody></table>',\u000a                '<span class="__uncover_value __uncover_hidden">', value, '</span>').use_css(source=uncover_pres_css)\u000a    \u000a    \u000aremovable_placeholder('Click', 5)
p216
sg44
I01
sbsg29
g186
sbag0
(g23
g2
Ntp217
Rp218
(dp219
g27
V<p>Now we build the perspective:</p>
p220
sg29
g186
sbag0
(g34
g2
Ntp221
Rp222
(dp223
g38
g0
(g39
g2
Ntp224
Rp225
(dp226
g38
Vimport cgi\u000afrom larch.default_perspective import DefaultPerspective\u000a\u000a\u000aclass UncoverPerspective (DefaultPerspective):\u000a    def present_model(self, model, fragment):\u000a        p = super(UncoverPerspective, self).present_model(model, fragment)\u000a        return removable_placeholder('<span style="font-family: monospace;">{0}</span>'.format(cgi.escape(type(model).__name__)), p)\u000a    \u000a    \u000aUncoverPerspective.instance = UncoverPerspective()
p227
sg44
I01
sbsg29
g186
sbasbsg78
Vpres_process_persp
p228
sg80
I2
sbasb.