ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vdocs_media
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1 style="text-align:center">Larch media: audio</h1><p>Browser based audio capture and playback</p><h2>API</h2><p>Package: <code>larch.media.audio</code></p><pre>def audio_capture_button(num_channels, format, audio_data_callback)</pre><p style="margin-left:40px">Create an audio capture button</p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>num_channels</code> - the number of channels; 1 = mono, 2 = stereo</li><li><code>format</code> - the data format, with constants defined in the <code>larch.media.audio</code> module:<ul><li><code>FORMAT_WAV</code>:&nbsp;WAV file format</li><li><code>FORMAT_RAW8</code>: raw data, 8-bit signed integer per sample per channel</li><li><code>FORMAT_RAW16</code>: raw data, 16-bit signed integer&nbsp;per sample&nbsp;per channel</li><li><code>FORMAT_RAWF32</code>: raw data, 32-bit float per sample&nbsp;per channel</li></ul></li><li><code>audio_data_callback </code>- a callback function that is invoked when audio data is received from the browser, parameters are:<ul><li><code>data_file</code>&nbsp;- an object that contains the audio data, has a read method, the same kind of object as used to form file uploads.</li><li><code>sample_rate</code>&nbsp;- the sample rate of the received audio data, in Hz</li><li><code>num_samples</code>&nbsp;- the number of samples received; to get length in seconds, divide this number by sample_rate</li><li><code>num_channels</code>&nbsp;- the number of channels in the received data</li></ul></li></ul><p><br></p><pre>\u200bdef wav_player_from_rsc(rsc, width=500, height=100)</pre><p style="margin-left:40px">Create a WAV audio player, with the data provided by a <a data-cke-saved-href="/pages/docs/larch_concepts/resources" href="/pages/docs/larch_concepts/resources">resource</a></p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>rsc</code> - a resource that provides WAV format data</li><li><code>width</code> - width</li><li><code>height</code> - height</li></ul><p><br></p><pre>def wav_player_from_data(data, width=500, height=100)</pre><p style="margin-left:40px">Create a WAV audio player, with data provided in binary form, as a string</p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>data</code>&nbsp;- binary WAV format data</li><li><code>width</code>&nbsp;- width</li><li><code>height</code>&nbsp;- height</li></ul><p><br></p><pre>def raw16_to_wav(data, sample_rate, num_channels)</pre><p style="margin-left: 40px;">Convert 16-bit RAW audio to WAV format; normally used to take RAW data and prepare it for playback in the broser<br></p><p style="margin-left: 40px;">Parameters:</p><ul><li style="margin-left: 40px;"><code>data</code> -&nbsp;RAW binary audio data, 16-bit signed integer per sample per channel</li><li style="margin-left: 40px;"><code>sample_rate</code> -&nbsp;the sample rate in Hz</li><li style="margin-left: 40px;"><code>num_channels</code> -&nbsp;the number of channels; 1 = mono, 2 = stereo</li></ul>
p28
sS'notebook'
p29
g19
sbag0
(g23
g2
Ntp30
Rp31
(dp32
g27
V<h3>Example: WAV audio capture and playback</h3>
p33
sg29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p34
g2
Ntp35
Rp36
(dp37
S'code'
p38
g0
(clarch.apps.source_code
PythonCode
p39
g2
Ntp40
Rp41
(dp42
g38
V# Import Html for help with presentations, LiveValue so that we can have automatic updates\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a# Import audio module\u000afrom larch.media import audio\u000a\u000a\u000a\u000a# Create a live value to contain the output\u000aoutput = LiveValue()\u000a\u000a# Callback\u000adef on_wav_data(data_file, sample_rate, num_samples, num_channels):\u000a    data = data_file.read()\u000a    # Set the value of output to a visual presentation that shows an audio player, above a description of the received audio data\u000a    output.value = Html(audio.wav_player_from_data(data), '<br>',\u000a                   '<div>Sample rate: {0}</div>'.format(sample_rate),\u000a                   '<div>{0} samples ({1} seconds)</div>'.format(num_samples, float(num_samples)/sample_rate),\u000a                   '<div>{0} channels</div>'.format(num_channels),\u000a                   '<div>{0} bytes</div>'.format(len(data)))\u000a    \u000a\u000a# Audio capture button, 1 channel (mono), WAV format\u000acap_wav = audio.audio_capture_button(1, audio.FORMAT_WAV, on_wav_data)\u000a\u000a# Arrange the capture button above the output\u000aHtml(cap_wav, '<br>', output)
p43
sS'editable'
p44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp45
Rp46
(dp47
g27
V<h3>Example: 16-bit raw audio capture and playback after conversion to WAV</h3><p>Now we create a capture button that generates 16-bit raw data and use the <code>raw_16_to_wav</code> function to convert it to WAV, so that the browser <code>audio</code>&nbsp;element can handle it:</p>
p48
sg29
g19
sbag0
(g34
g2
Ntp49
Rp50
(dp51
g38
g0
(g39
g2
Ntp52
Rp53
(dp54
g38
V# Now using raw:\u000araw_convert_out = LiveValue()\u000a\u000adef on_raw16_data(data_file, sample_rate, num_samples, num_channels):\u000a    # Read the data\u000a    raw16_data = data_file.read()\u000a    # Convert it to WAV\u000a    wav_data = audio.raw16_to_wav(raw16_data, sample_rate, num_channels)\u000a    # Player with stats below, as before\u000a    raw_convert_out.value = Html(audio.wav_player_from_data(wav_data), '<br>',\u000a                   '<div>Sample rate: {0}</div>'.format(sample_rate),\u000a                   '<div>{0} samples ({1} seconds)</div>'.format(num_samples, float(num_samples)/sample_rate),\u000a                   '<div>{0} channels</div>'.format(num_channels),\u000a                   '<div>{0} bytes</div>'.format(len(raw16_data)))\u000a    \u000a# Audio capture button, 1 channel (mono), RAW 16-bit format\u000acap_raw16 = audio.audio_capture_button(1, audio.FORMAT_RAW16, on_raw16_data)\u000a\u000a# Arrange the capture button above the output\u000aHtml(cap_raw16, '<br>', raw_convert_out)
p55
sg44
I01
sbsg29
g19
sbasbsS'name'
p56
Vaudio
p57
sS'id'
p58
I0
sbasb.