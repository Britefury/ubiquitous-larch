ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vctltest
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1>Slider test</h1><p>Imports and some live values</p>
p28
sS'notebook'
p29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p30
g2
Ntp31
Rp32
(dp33
S'code'
p34
g0
(clarch.apps.source_code
PythonCode
p35
g2
Ntp36
Rp37
(dp38
g34
Vfrom larch.controls import slider\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue(1.0)\u000ar = LiveValue((1.0, 4.0))
p39
sS'editable'
p40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp41
Rp42
(dp43
g27
V<p>Slider:</p>
p44
sg29
g19
sbag0
(g30
g2
Ntp45
Rp46
(dp47
g34
g0
(g35
g2
Ntp48
Rp49
(dp50
g34
Vslider.slider(value=1.0, min=0.0, max=10.0, step=0.01)
p51
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp52
Rp53
(dp54
g27
V<p>Range slider:</p>
p55
sg29
g19
sbag0
(g30
g2
Ntp56
Rp57
(dp58
g34
g0
(g35
g2
Ntp59
Rp60
(dp61
g34
Vslider.range_slider(values=[1.0, 9.0], min=0.0, max=10.0, step=0.01)
p62
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp63
Rp64
(dp65
g27
V<p>Two live sliders editing the same live value:</p>
p66
sg29
g19
sbag0
(g30
g2
Ntp67
Rp68
(dp69
g34
g0
(g35
g2
Ntp70
Rp71
(dp72
g34
Vslider.live_slider(x, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p73
sg40
I01
sbsg29
g19
sbag0
(g30
g2
Ntp74
Rp75
(dp76
g34
g0
(g35
g2
Ntp77
Rp78
(dp79
g34
Vslider.live_slider(x, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p80
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp81
Rp82
(dp83
g27
V<p>Two live range sliders editing the same live value:<br></p>
p84
sg29
g19
sbag0
(g30
g2
Ntp85
Rp86
(dp87
g34
g0
(g35
g2
Ntp88
Rp89
(dp90
g34
Vslider.live_range_slider(r, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p91
sg40
I01
sbsg29
g19
sbag0
(g30
g2
Ntp92
Rp93
(dp94
g34
g0
(g35
g2
Ntp95
Rp96
(dp97
g34
Vslider.live_range_slider(r, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p98
sg40
I01
sbsg29
g19
sbasbsS'name'
p99
VSlider
p100
sS'id'
p101
I0
sbag0
(g12
g2
Ntp102
Rp103
(dp104
g16
g0
(g17
g2
Ntp105
Rp106
(dp107
g21
(lp108
g0
(g23
g2
Ntp109
Rp110
(dp111
g27
V<h1 style="text-align:center">Button control</h1><p>The button control creates a JQuery push button.</p><h2>API</h2><p><code>button(text=None, action_fn=None, primary_icon=None, secondary_icon=None, disabled=False)</code></p><p>Parameters:</p><ul><li><code>text</code>: the text to display in the button, can use HTML</li><li><code>action_fn</code>: a function of the form <code>fn(event)</code> that is invoked when the button is clicked</li><li><code>primary_icon</code>: a string identifying the <a data-cke-saved-href="http://api.jqueryui.com/theming/icons/" href="http://api.jqueryui.com/theming/icons/">JQuery UI icon</a> to display on the left of the button</li><li><code>secondary_icon</code>: a string identifying the <a data-cke-saved-href="http://api.jqueryui.com/theming/icons/" href="http://api.jqueryui.com/theming/icons/">JQuery UI icon</a> to display on the right of the button</li><li><code>disabled</code>: the button will be disabled if True</li></ul>
p112
sg29
g106
sbag0
(g23
g2
Ntp113
Rp114
(dp115
g27
V<h2>Example</h2>
p116
sg29
g106
sbag0
(g30
g2
Ntp117
Rp118
(dp119
g34
g0
(g35
g2
Ntp120
Rp121
(dp122
g34
Vfrom ctltest.lib.eventview import EventViewer\u000afrom larch.controls import button\u000a\u000a# An event viewer logs events and displays them\u000aev = EventViewer()\u000abt = button.button(text='Hello world', action_fn=lambda event: ev('Clicked'), primary_icon='ui-icon-plus')\u000a# Place the event viewer below the control\u000aev.below(bt)
p123
sg40
I01
sbsg29
g106
sbasbsg99
VButton
p124
sg101
I1
sbag0
(g12
g2
Ntp125
Rp126
(dp127
g16
g0
(g17
g2
Ntp128
Rp129
(dp130
g21
(lp131
g0
(g30
g2
Ntp132
Rp133
(dp134
g34
g0
(g35
g2
Ntp135
Rp136
(dp137
g34
Vfrom larch.controls import expander\u000a\u000aexpander.dropdown_expander('Hello world', 'The end')
p138
sg40
I01
sbsg29
g129
sbasbsg99
VDropDownExpander
p139
sg101
I2
sbag0
(g12
g2
Ntp140
Rp141
(dp142
g16
g0
(g17
g2
Ntp143
Rp144
(dp145
g21
(lp146
g0
(g23
g2
Ntp147
Rp148
(dp149
g27
V<p>Spinner test</p><p>Some imports and live values</p>
p150
sg29
g144
sbag0
(g30
g2
Ntp151
Rp152
(dp153
g34
g0
(g35
g2
Ntp154
Rp155
(dp156
g34
Vfrom larch.controls import spinner\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue(1.0)
p157
sg40
I01
sbsg29
g144
sbag0
(g23
g2
Ntp158
Rp159
(dp160
g27
V<p>Spinner:<br></p>
p161
sg29
g144
sbag0
(g30
g2
Ntp162
Rp163
(dp164
g34
g0
(g35
g2
Ntp165
Rp166
(dp167
g34
Vspinner.spinner(value=1.0)
p168
sg40
I01
sbsg29
g144
sbag0
(g23
g2
Ntp169
Rp170
(dp171
g27
V<p>Two live sliders editing the same live value:<br></p>
p172
sg29
g144
sbag0
(g30
g2
Ntp173
Rp174
(dp175
g34
g0
(g35
g2
Ntp176
Rp177
(dp178
g34
Vspinner.live_spinner(x)
p179
sg40
I01
sbsg29
g144
sbag0
(g30
g2
Ntp180
Rp181
(dp182
g34
g0
(g35
g2
Ntp183
Rp184
(dp185
g34
Vspinner.live_spinner(x)
p186
sg40
I01
sbsg29
g144
sbasbsg99
VSpinner
p187
sg101
I3
sbag0
(g12
g2
Ntp188
Rp189
(dp190
g16
g0
(g17
g2
Ntp191
Rp192
(dp193
g21
(lp194
g0
(g23
g2
Ntp195
Rp196
(dp197
g27
V<h1 style="text-align:center">ckEditor control</h1><p>The ckEditor&nbsp;control creates a ckEditor based rich text editing pane.</p><h2>API</h2><p><code>ckeditor(text, immediate_events=False, use_edit_button=False, config=None, on_edit=None, on_focus=None, on_blur=None)</code></p><p>Parameters:</p><ul><li><code>text</code>: the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>use_edit_button</code>: if False the component&nbsp;is always editable, if True the use must enable edit mode by Alt-clicking or hovering over the component&nbsp;and clicking the edit button that appears</li><li><code>config</code>: ckEditor <a data-cke-saved-href="http://docs.ckeditor.com/#!/api/CKEDITOR.config" href="http://docs.ckeditor.com/#!/api/CKEDITOR.config">configuration</a></li><li><code>on_edit</code>: a function of the form <code>fn(event)</code> that is invoked when the content is edited</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li></ul>
p198
sg29
g192
sbag0
(g23
g2
Ntp199
Rp200
(dp201
g27
V<h2>Examples</h2>
p202
sg29
g192
sbag0
(g30
g2
Ntp203
Rp204
(dp205
g34
g0
(g35
g2
Ntp206
Rp207
(dp208
g34
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import ckeditor
p209
sg40
I01
sbsg29
g192
sbag0
(g23
g2
Ntp210
Rp211
(dp212
g27
V<p>A basic ckeditor:</p>
p213
sg29
g192
sbag0
(g30
g2
Ntp214
Rp215
(dp216
g34
g0
(g35
g2
Ntp217
Rp218
(dp219
g34
V# An event viewer logs events and displays them\u000aev1 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>',\u000a                       on_edit=lambda event, content: ev1('Edit'), on_focus=lambda event: ev1('Focus'), on_blur=lambda event: ev1('Blur'))\u000a# Place the event viewer below the control\u000aev1.below(ed)
p220
sg40
I01
sbsg29
g192
sbag0
(g23
g2
Ntp221
Rp222
(dp223
g27
V<p>With immediate events enabled:</p>
p224
sg29
g192
sbag0
(g30
g2
Ntp225
Rp226
(dp227
g34
g0
(g35
g2
Ntp228
Rp229
(dp230
g34
Vev2 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>', immediate_events=True,\u000a                       on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed)
p231
sg40
I01
sbsg29
g192
sbag0
(g23
g2
Ntp232
Rp233
(dp234
g27
V<p>With edit button enabled:</p>
p235
sg29
g192
sbag0
(g30
g2
Ntp236
Rp237
(dp238
g34
g0
(g35
g2
Ntp239
Rp240
(dp241
g34
Vev3 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>', use_edit_button=True,\u000a                        on_edit=lambda event, content: ev3('Edit'), on_focus=lambda event: ev3('Focus'), on_blur=lambda event: ev3('Blur'))\u000aev3.below(ed)
p242
sg40
I01
sbsg29
g192
sbag0
(g23
g2
Ntp243
Rp244
(dp245
g27
V<h2>Editing a live value</h2><p>The live variants of the ckeditor control edit live values. If the value contained by a live value is modified externally, the control will update correspondingly.</p><h2>API</h2><p><code>live_ckeditor(live, immediate_events=False, use_edit_button=False, config=None, on_focus=None, on_blur=None)</code></p><p>Parameters:</p><ul><li><code>live</code>: a live value containing&nbsp;the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>use_edit_button</code>: if False the component&nbsp;is always editable, if True the use must enable edit mode by Alt-clicking or hovering over the component&nbsp;and clicking the edit button that appears</li><li><code>config</code>: ckEditor configuration</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li></ul>
p246
sg29
g192
sbag0
(g23
g2
Ntp247
Rp248
(dp249
g27
V<h2>Examples</h2>
p250
sg29
g192
sbag0
(g30
g2
Ntp251
Rp252
(dp253
g34
g0
(g35
g2
Ntp254
Rp255
(dp256
g34
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('<h1>Test</h1>')
p257
sg40
I01
sbsg29
g192
sbag0
(g23
g2
Ntp258
Rp259
(dp260
g27
V<p>Example with two live ckeditors editing the same live value; they will be synchronised on focus and on blur.</p>
p261
sg29
g192
sbag0
(g30
g2
Ntp262
Rp263
(dp264
g34
g0
(g35
g2
Ntp265
Rp266
(dp267
g34
Vckeditor.live_ckeditor(x)
p268
sg40
I01
sbsg29
g192
sbag0
(g30
g2
Ntp269
Rp270
(dp271
g34
g0
(g35
g2
Ntp272
Rp273
(dp274
g34
Vckeditor.live_ckeditor(x)
p275
sg40
I01
sbsg29
g192
sbag0
(g23
g2
Ntp276
Rp277
(dp278
g27
V<p>The same live value being edited, this time with edit buttons:</p>
p279
sg29
g192
sbag0
(g30
g2
Ntp280
Rp281
(dp282
g34
g0
(g35
g2
Ntp283
Rp284
(dp285
g34
Vckeditor.live_ckeditor(x, use_edit_button=True)
p286
sg40
I01
sbsg29
g192
sbag0
(g30
g2
Ntp287
Rp288
(dp289
g34
g0
(g35
g2
Ntp290
Rp291
(dp292
g34
Vckeditor.live_ckeditor(x, use_edit_button=True)
p293
sg40
I01
sbsg29
g192
sbasbsg99
VckEditor
p294
sg101
I4
sbag0
(g12
g2
Ntp295
Rp296
(dp297
g16
g0
(g17
g2
Ntp298
Rp299
(dp300
g21
(lp301
g0
(g23
g2
Ntp302
Rp303
(dp304
g27
V<h1 style="text-align:center">CodeMirror control</h1><p>The CodeMirror control creates a CodeMirror&nbsp;based source code&nbsp;editing pane.</p><h2>API</h2><p><code>code_mirror(text, immediate_events=False, config=None, on_edit=None, on_focus=None, on_blur=None, modes=None)</code></p><p>Parameters:</p><ul><li><code>text</code>: the text display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>config</code>: CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/doc/manual.html#config" href="http://codemirror.net/doc/manual.html#config">configuration</a></li><li><code>on_edit</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the content is edited</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li><li><code>modes</code>:&nbsp;a list of names of CodeMirror&nbsp;language plugins to load (e.g. '<code>python</code>', '<code>javascript</code>', '<code>glsl</code>', etc; see CodeMirror <a data-cke-saved-href="http://codemirror.net/mode/" href="http://codemirror.net/mode/">modes</a>)</li></ul>
p305
sg29
g299
sbag0
(g23
g2
Ntp306
Rp307
(dp308
g27
V<h2>Examples</h2>
p309
sg29
g299
sbag0
(g30
g2
Ntp310
Rp311
(dp312
g34
g0
(g35
g2
Ntp313
Rp314
(dp315
g34
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import code_mirror
p316
sg40
I01
sbsg29
g299
sbag0
(g23
g2
Ntp317
Rp318
(dp319
g27
V<p>A basic CodeMirror:</p>
p320
sg29
g299
sbag0
(g30
g2
Ntp321
Rp322
(dp323
g34
g0
(g35
g2
Ntp324
Rp325
(dp326
g34
V# An event viewer logs events and displays them\u000aev1 = EventViewer()\u000aed = code_mirror.code_mirror('def f(x):\u005cn\u005ctreturn x*x\u005cn',\u000a                             on_edit=lambda event, content: ev1('Edit'), on_focus=lambda event: ev1('Focus'), on_blur=lambda event: ev1('Blur'))\u000a# Place the event viewer below the control\u000aev1.below(ed)
p327
sg40
I01
sbsg29
g299
sbag0
(g23
g2
Ntp328
Rp329
(dp330
g27
V<p>A CodeMirror with immediate events enabled:</p>
p331
sg29
g299
sbag0
(g30
g2
Ntp332
Rp333
(dp334
g34
g0
(g35
g2
Ntp335
Rp336
(dp337
g34
Vev2 = EventViewer()\u000aed = code_mirror.code_mirror('def f(x):\u005cn\u005ctreturn x*x\u005cn', immediate_events=True,\u000a                             on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed)
p338
sg40
I01
sbsg29
g299
sbag0
(g23
g2
Ntp339
Rp340
(dp341
g27
V<h2>Editing a live value</h2><p>The live variants of the CodeMirror&nbsp;control edit live values. If the value contained by a live value is modified externally, the control will update correspondingly.</p><h2>API</h2><p><code>live_code_mirror(live, immediate_events=False, config=None, on_focus=None, on_blur=None, modes=None, text_filter_fn=None)</code></p><p>Parameters:</p><ul><li><code>live</code>: a live value containing&nbsp;the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>config</code>: CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/doc/manual.html#config" href="http://codemirror.net/doc/manual.html#config">configuration</a></li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li><li><code>modes</code>:&nbsp;a list of names of CodeMirror&nbsp;language plugins to load (e.g. '<code>python</code>', '<code>javascript</code>', '<code>glsl</code>', etc; see CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/mode/" href="http://codemirror.net/mode/">modes</a>)</li><li><code>text_filter_fn</code>: a function of the form fn(text);&nbsp;when storing the text from the CodeMirror into the live value, the text is first passed through this function&nbsp;and its return value is used. This is necessary when editing Python code, as pasting from external sources can cause the source to indent with tabs on some lines and spaces on others. This inconsistency is now permitted by Python. <code>text_filter_fn</code> would be used in this case to convert leading tabs into spaces.</li></ul>
p342
sg29
g299
sbag0
(g23
g2
Ntp343
Rp344
(dp345
g27
V<h2>Examples</h2><p>Two CodeMirrors&nbsp;editing a live value; they will synchronise there contents after a delay of about 1s.</p>
p346
sg29
g299
sbag0
(g30
g2
Ntp347
Rp348
(dp349
g34
g0
(g35
g2
Ntp350
Rp351
(dp352
g34
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Test 1\u005cnTest 2\u005cn')\u000a\u000acode_mirror.live_code_mirror(x)
p353
sg40
I01
sbsg29
g299
sbag0
(g30
g2
Ntp354
Rp355
(dp356
g34
g0
(g35
g2
Ntp357
Rp358
(dp359
g34
Vcode_mirror.live_code_mirror(x)
p360
sg40
I01
sbsg29
g299
sbasbsg99
VCodeMirror
p361
sg101
I5
sbag0
(g12
g2
Ntp362
Rp363
(dp364
g16
g0
(g17
g2
Ntp365
Rp366
(dp367
g21
(lp368
g0
(g23
g2
Ntp369
Rp370
(dp371
g27
V<p>Text Entry</p>
p372
sg29
g366
sbag0
(g30
g2
Ntp373
Rp374
(dp375
g34
g0
(g35
g2
Ntp376
Rp377
(dp378
g34
Vfrom larch.controls import text_entry\u000a\u000atext_entry.text_entry('Hello world')
p379
sg40
I01
sbsg29
g366
sbag0
(g30
g2
Ntp380
Rp381
(dp382
g34
g0
(g35
g2
Ntp383
Rp384
(dp385
g34
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Hello live')\u000a\u000atext_entry.live_text_entry(x)
p386
sg40
I01
sbsg29
g366
sbag0
(g30
g2
Ntp387
Rp388
(dp389
g34
g0
(g35
g2
Ntp390
Rp391
(dp392
g34
Vtext_entry.live_text_entry(x)
p393
sg40
I01
sbsg29
g366
sbasbsg99
VTextEntry
p394
sg101
I6
sbag0
(g12
g2
Ntp395
Rp396
(dp397
g16
g0
(g17
g2
Ntp398
Rp399
(dp400
g21
(lp401
g0
(g23
g2
Ntp402
Rp403
(dp404
g27
V<h1>Noty test</h1><p>The noty library is used throughout Ubiquitous Larch to provide notifications.</p><p>In the example below, note that the content within the notification is live; the sliders are synchronised.</p>
p405
sg29
g399
sbag0
(g30
g2
Ntp406
Rp407
(dp408
g34
g0
(g35
g2
Ntp409
Rp410
(dp411
g34
Vfrom larch.controls import noty, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    notification_content = Html('<h3>Notification</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    n = noty.noty(notification_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    n.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the noty, x, and a slider\u000aHtml(button.button('Show notification', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))\u000a
p412
sg40
I01
sbsg29
g399
sbasbsg99
VNoty
p413
sg101
I7
sbag0
(g12
g2
Ntp414
Rp415
(dp416
g16
g0
(g17
g2
Ntp417
Rp418
(dp419
g21
(lp420
g0
(g23
g2
Ntp421
Rp422
(dp423
g27
V<h1>Dialog&nbsp;test</h1><p>jQuery UI dialogs can be displayed within Ubiquitous&nbsp;Larch.</p><p>In the example below, note that the content within the dialog is live; the sliders are synchronised.</p>
p424
sg29
g418
sbag0
(g30
g2
Ntp425
Rp426
(dp427
g34
g0
(g35
g2
Ntp428
Rp429
(dp430
g34
Vfrom larch.controls import dialog, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    notification_content = Html('<h3>Notification</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    n = dialog.dialog(notification_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    n.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the noty, x, and a slider\u000aHtml(button.button('Show notification', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))
p431
sg40
I01
sbsg29
g418
sbasbsg99
VDialog
p432
sg101
I8
sbag0
(clarch.apps.project.project_package
ProjectPackage
p433
g2
Ntp434
Rp435
(dp436
g99
Vlib
p437
sg10
(lp438
g0
(g12
g2
Ntp439
Rp440
(dp441
g16
g0
(g17
g2
Ntp442
Rp443
(dp444
g21
(lp445
g0
(g23
g2
Ntp446
Rp447
(dp448
g27
V<h1>Event viewer</h1>
p449
sg29
g443
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p450
g2
Ntp451
Rp452
(dp453
g34
g0
(clarch.apps.source_code
CSSCode
p454
g2
Ntp455
Rp456
(dp457
g34
V.event_viewer {\u000a    background: #e0e0e0;\u000a    border: 1px solid #c0c0c0;\u000a    border-radius: 5px;\u000a    padding: 5px;\u000a}
p458
sg40
I01
sbsS'var_name'
p459
Vev_css
p460
sg29
g443
sbag0
(g30
g2
Ntp461
Rp462
(dp463
g34
g0
(g35
g2
Ntp464
Rp465
(dp466
g34
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000aclass EventViewer (object):\u000a    def __init__(self):\u000a        self.__events = LiveValue([])\u000a        \u000a        \u000a    def __call__(self, *events):\u000a        self.__events.value = self.__events.value + list(events)\u000a        \u000a        \u000a    def __present__(self, fragment):\u000a        return Html('<div class="event_viewer">', '<br>'.join([Html.escape_str(x)   for x in self.__events.value]), '</div>').use_css(source=ev_css)\u000a    \u000a    \u000a    def below(self, p):\u000a        return Html('<div>', p, '</div><div>', self, '</div>')
p467
sg40
I01
sbsg29
g443
sbasbsg99
Veventview
p468
sg101
I9
sbasbasb.