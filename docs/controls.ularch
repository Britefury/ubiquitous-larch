ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vctltest
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1 style="text-align:center">Slider control</h1><p>The slider control creates a JQuery UI slider.</p><h2>Slider&nbsp;API</h2><p>Package: <code>larch.controls.slider</code></p><p><code>class slider (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>slider(self, release_fn=None, slide_fn=None, width=None, value=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>release_fn</code>: callback function of the form <code>fn(event)</code> that is invoked when the user releases the slider</li><li><code>slide_fn</code>: callback function of the form <code>fn(event)</code> that is invoked when the user slides the slider</li><li><code>width</code>: the width of the slider. Integer or long values are interpreted as pixel values, otherwise a string should be used, which should specify the width in a manner compatible with CSS, e.g. <kbd>'5px'</kbd>, <code>'5em'</code> or <code>'50%'</code></li><li><code>value</code>: the initial value</li><li><code>min</code>: the minimum value</li><li><code>max</code>: the maximum value</li><li><code>step</code>: the step size; the slider value will be a multiple of this</li><li><code>orientation</code>: the orientation of the slider</li><li><code>animate</code>: if True, animate the slider's transition when the user clicks to set the value</li><li><code>disabled</code>: the control will be disabled if True</li></ul><p style="margin-left:40px">Methods:</p><p style="margin-left:80px"><code>set_value(self, value)</code></p><p style="margin-left:120px">Set the value of the slider</p><p style="margin-left:120px">Parameters:</p><ul style="margin-left:120px"><li><code>value</code>: the new value</li></ul><p><br></p>
p28
sS'notebook'
p29
g19
sbag0
(g23
g2
Ntp30
Rp31
(dp32
g27
V<h2>Examples</h2>
p33
sg29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p34
g2
Ntp35
Rp36
(dp37
S'code'
p38
g0
(clarch.apps.source_code
PythonCode
p39
g2
Ntp40
Rp41
(dp42
g38
V# Import EventViewer\u000afrom ctltest.lib.eventview import EventViewer\u000a# Import slider and import button so that we can create a reset button\u000afrom larch.controls import slider, button\u000a# Import Html so that we can spatially arrange thing\u000afrom larch.pres.html import Html\u000a\u000aev1 = EventViewer()\u000a\u000as1 = slider.slider(release_fn=lambda event, value: ev1('Release: {0}'.format(value)),\u000a                   slide_fn=lambda event, value: ev1('Slide: {0}'.format(value)),\u000a                   width=400,\u000a                   value=1.0, min=0.0, max=10.0, step=0.01)\u000areset1 = button.button('Set value to 1', lambda event: s1.set_value(1.0))\u000a\u000aHtml(s1, '<br>', reset1, '<br>', ev1)\u000a
p43
sS'editable'
p44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp45
Rp46
(dp47
g27
V<p>Slider with larger step, vertical orientation and animation. Notice the jerky motion of the slider when dragging due to the larger step and the animated motion when you click on the slider to set the value.</p>
p48
sg29
g19
sbag0
(g34
g2
Ntp49
Rp50
(dp51
g38
g0
(g39
g2
Ntp52
Rp53
(dp54
g38
Vev2 = EventViewer()\u000a\u000as2 = slider.slider(release_fn=lambda event, value: ev2('Release: {0}'.format(value)),\u000a                   slide_fn=lambda event, value: ev2('Slide: {0}'.format(value)),\u000a                   value=1.0, min=0.0, max=10.0, step=1.0,\u000a                   orientation='vertical', animate=True)\u000areset2 = button.button('Set value to 1', lambda event: s2.set_value(1.0))\u000a\u000aHtml(s2, '<br>', reset2, '<br>', ev2)\u000a
p55
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp56
Rp57
(dp58
g27
V<h2>Range slider&nbsp;API</h2><p>Range sliders edit two values in the form of a 2-tuple</p><p><code>class range_slider (CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;<code></code><code>range_slider(self, release_fn=None, slide_fn=None, width=None, values=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>release_fn</code>: callback function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the user releases the slider</li><li><code>slide_fn</code>: callback function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the user slides the slider</li><li><code>width</code>: the width of the slider. Integer or long values are interpreted as pixel values, otherwise a string should be used, which should specify the width in a manner compatible with CSS, e.g.&nbsp;<kbd>'5px'</kbd>,&nbsp;<code>'5em'</code>&nbsp;or&nbsp;<code>'50%'</code></li><li><code>values</code>: the initial lower and upper&nbsp;values in a tuple</li><li><code>min</code>: the minimum value</li><li><code>max</code>: the maximum value</li><li><code>step</code>: the step size; the slider value will be a multiple of this</li><li><code>orientation</code>: the orientation of the slider</li><li><code>animate</code>: if True, animate the slider's transition when the user clicks to set the value</li><li><code>disabled</code>: the control will be disabled if True</li></ul><p style="margin-left:40px">Methods:</p><p style="margin-left:80px"><code>set_values(self, values)</code></p><p style="margin-left:120px">Set the value range of the slider</p><p style="margin-left:120px">Parameters:</p><ul style="margin-left:120px"><li><code>values</code>: the lower and upper values in a tuple</li></ul><p><br></p>
p59
sg29
g19
sbag0
(g23
g2
Ntp60
Rp61
(dp62
g27
V<h2>Example</h2>
p63
sg29
g19
sbag0
(g34
g2
Ntp64
Rp65
(dp66
g38
g0
(g39
g2
Ntp67
Rp68
(dp69
g38
Vev3 = EventViewer()\u000a\u000as3 = slider.range_slider(release_fn=lambda event, values: ev3('Release: {0}'.format(values)),\u000a                         slide_fn=lambda event, values: ev3('Slide: {0}'.format(values)),\u000a                         width=400,\u000a                         values=(1.0, 2.0), min=0.0, max=10.0, step=0.01, animate=True)\u000areset3 = button.button('Set range to 1,2', lambda event: s3.set_values((1.0, 2.0)))\u000a\u000aHtml(s3, '<br>', reset3, '<br>', ev3)\u000a
p70
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp71
Rp72
(dp73
g27
V<h2>Live slider API</h2><p>Live sliders edit a value contained in a live value. If multiple sliders are editing the same live value, they will be synchronised</p><p><code>class live_slider (CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;<code>live_slider(self, live, update_on_slide=False, &nbsp;width=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>live</code>: the live value whose value the slider is to display and edit</li><li><code>update_on_slide</code>: if False, the live value will be updated when the user releases the slider, if True the live value will be updated when the user moves the slider</li><li><code>width</code>: the width of the slider. Integer or long values are interpreted as pixel values, otherwise a string should be used, which should specify the width in a manner compatible with CSS, e.g.&nbsp;<kbd>'5px'</kbd>,&nbsp;<code>'5em'</code>&nbsp;or&nbsp;<code>'50%'</code></li><li><code>min</code>: the minimum value</li><li><code>max</code>: the maximum value</li><li><code>step</code>: the step size; the slider value will be a multiple of this</li><li><code>orientation</code>: the orientation of the slider</li><li><code>animate</code>: if True, animate the slider's transition when the user clicks to set the value</li><li><code>disabled</code>: the control will be disabled if True</li></ul><p><br></p>
p74
sg29
g19
sbag0
(g23
g2
Ntp75
Rp76
(dp77
g27
V<h2>Examples</h2><p>Two live sliders editing the same live value.<br></p>
p78
sg29
g19
sbag0
(g34
g2
Ntp79
Rp80
(dp81
g38
g0
(g39
g2
Ntp82
Rp83
(dp84
g38
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000a\u000ax = LiveValue(1.0)\u000a\u000a\u000aslider.live_slider(x, update_on_slide=True, width=400, min=0.0, max=10.0, step=0.01, animate=True)
p85
sg44
I01
sbsg29
g19
sbag0
(g34
g2
Ntp86
Rp87
(dp88
g38
g0
(g39
g2
Ntp89
Rp90
(dp91
g38
Vslider.live_slider(x, update_on_slide=True, width=400, min=0.0, max=10.0, step=0.01)
p92
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp93
Rp94
(dp95
g27
V<p>A third, but with update on slide turned off:</p>
p96
sg29
g19
sbag0
(g34
g2
Ntp97
Rp98
(dp99
g38
g0
(g39
g2
Ntp100
Rp101
(dp102
g38
Vslider.live_slider(x, update_on_slide=False, width=400, min=0.0, max=10.0, step=0.01)
p103
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp104
Rp105
(dp106
g27
V<h2>Live range slider API</h2><p>Live range sliders edit a range value (pair of values) contained in a live value. If multiple sliders are editing the same live value, they will be synchronised</p><p><code>class live_range_slider (CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;live_range_slider<code>(self, live, update_on_slide=False, &nbsp;width=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>live</code>: the live value whose value the slider is to display and edit</li><li><code>update_on_slide</code>: if False, the live value will be updated when the user releases the slider, if True the live value will be updated when the user moves the slider</li><li><code>width</code>: the width of the slider. Integer or long values are interpreted as pixel values, otherwise a string should be used, which should specify the width in a manner compatible with CSS, e.g.&nbsp;<kbd>'5px'</kbd>,&nbsp;<code>'5em'</code>&nbsp;or&nbsp;<code>'50%'</code></li><li><code>min</code>: the minimum value</li><li><code>max</code>: the maximum value</li><li><code>step</code>: the step size; the slider value will be a multiple of this</li><li><code>orientation</code>: the orientation of the slider</li><li><code>animate</code>: if True, animate the slider's transition when the user clicks to set the value</li><li><code>disabled</code>: the control will be disabled if True</li></ul><p><br></p>
p107
sg29
g19
sbag0
(g23
g2
Ntp108
Rp109
(dp110
g27
V<p>Two live range sliders editing the same live value:</p>
p111
sg29
g19
sbag0
(g34
g2
Ntp112
Rp113
(dp114
g38
g0
(g39
g2
Ntp115
Rp116
(dp117
g38
Vr = LiveValue((1.0, 4.0))\u000a\u000aslider.live_range_slider(r, update_on_slide=True, width=400, min=0.0, max=10.0, step=0.01, animate=True)
p118
sg44
I01
sbsg29
g19
sbag0
(g34
g2
Ntp119
Rp120
(dp121
g38
g0
(g39
g2
Ntp122
Rp123
(dp124
g38
Vslider.live_range_slider(r, update_on_slide=True, width=400, min=0.0, max=10.0, step=0.01)
p125
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp126
Rp127
(dp128
g27
V<p>A third, but with update on slide turned off:<br></p>
p129
sg29
g19
sbag0
(g34
g2
Ntp130
Rp131
(dp132
g38
g0
(g39
g2
Ntp133
Rp134
(dp135
g38
Vslider.live_range_slider(r, update_on_slide=False, width=400, min=0.0, max=10.0, step=0.01)
p136
sg44
I01
sbsg29
g19
sbasbsS'name'
p137
VSlider
p138
sS'id'
p139
I0
sbag0
(g12
g2
Ntp140
Rp141
(dp142
g16
g0
(g17
g2
Ntp143
Rp144
(dp145
g21
(lp146
g0
(g23
g2
Ntp147
Rp148
(dp149
g27
V<h1 style="text-align:center">Button control</h1><p>The button control creates a JQuery push button.</p><h2>API</h2><p>Package: <code>larch.controls.button</code></p><p><code>class button (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>button(self,&nbsp;text=None, action_fn=None, primary_icon=None, secondary_icon=None, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>text</code>: the text to display in the button, can use HTML</li><li><code>action_fn</code>: a function of the form <code>fn(event)</code> that is invoked when the button is clicked</li><li><code>primary_icon</code>: a string identifying the <a data-cke-saved-href="http://api.jqueryui.com/theming/icons/" href="http://api.jqueryui.com/theming/icons/">JQuery UI icon</a> to display on the left of the button</li><li><code>secondary_icon</code>: a string identifying the <a data-cke-saved-href="http://api.jqueryui.com/theming/icons/" href="http://api.jqueryui.com/theming/icons/">JQuery UI icon</a> to display on the right of the button</li><li><code>disabled</code>: the button will be disabled if True</li></ul>
p150
sg29
g144
sbag0
(g23
g2
Ntp151
Rp152
(dp153
g27
V<h2>Example</h2>
p154
sg29
g144
sbag0
(g34
g2
Ntp155
Rp156
(dp157
g38
g0
(g39
g2
Ntp158
Rp159
(dp160
g38
Vfrom ctltest.lib.eventview import EventViewer\u000afrom larch.controls import button\u000a\u000a# An event viewer logs events and displays them\u000aev = EventViewer()\u000abt = button.button(text='Hello world', action_fn=lambda event: ev('Clicked'), primary_icon='ui-icon-plus')\u000a# Place the event viewer below the control\u000aev.below(bt)
p161
sg44
I01
sbsg29
g144
sbasbsg137
VButton
p162
sg139
I1
sbag0
(g12
g2
Ntp163
Rp164
(dp165
g16
g0
(g17
g2
Ntp166
Rp167
(dp168
g21
(lp169
g0
(g23
g2
Ntp170
Rp171
(dp172
g27
V<h1 style="text-align:center">Drop-down expander&nbsp;control</h1><p>The drop-down expander control displays a header and contents, with the header in a button and the contents below. The contents are only visible when it is in an expanded state. The user may toggle the state by clicking the button.</p><h2>API</h2><p>\u200bPackage:&nbsp;<code>larch.controls.expander</code></p><p><code>class dropdown_expander&nbsp;(CompositePres)</code></p><p style="margin-left: 40px;">Constructor: <code>dropdown_expander(self, header, content, state=None, on_expand=None)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li>header: the header that will be displayed in the button</li><li><code>content</code>: the content that will be displayed below the button</li><li><code>state</code>: the expander state; use a boolean to set the initial state (False=collapsed, True=expanded) or use a live value containing the state (the live value will be updated when the user expands or collapses the control)</li><li><code>on_expand</code>: a callback function of the form <code>fn(state)</code> that is invoked when the user expands or collapses the expander</li></ul>
p173
sg29
g167
sbag0
(g23
g2
Ntp174
Rp175
(dp176
g27
V<h2>Examples</h2><p>Basic expander:</p>
p177
sg29
g167
sbag0
(g34
g2
Ntp178
Rp179
(dp180
g38
g0
(g39
g2
Ntp181
Rp182
(dp183
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import expander\u000a\u000a# Create an event viewer that will show is the events as they arrive\u000aev1 = EventViewer()\u000a\u000ax = expander.dropdown_expander('Click to expand', 'The expander contents', on_expand=lambda state: ev1('Expanded' if state else 'Collapsed'))\u000a\u000a# Arrange the event viewer below the expander\u000aev1.below(x)
p184
sg44
I01
sbsg29
g167
sbag0
(g23
g2
Ntp185
Rp186
(dp187
g27
V<p>With an an initial state of True:</p>
p188
sg29
g167
sbag0
(g34
g2
Ntp189
Rp190
(dp191
g38
g0
(g39
g2
Ntp192
Rp193
(dp194
g38
Vexpander.dropdown_expander('Click to expand', 'The expander contents; this should be visible to start with', True)
p195
sg44
I01
sbsg29
g167
sbag0
(g23
g2
Ntp196
Rp197
(dp198
g27
V<p>Using a live value as the state:</p>
p199
sg29
g167
sbag0
(g34
g2
Ntp200
Rp201
(dp202
g38
g0
(g39
g2
Ntp203
Rp204
(dp205
g38
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000as = LiveValue(False)\u000a\u000ax = expander.dropdown_expander('Click to expand', 'The expander contents; this should be visible to start with', s)\u000a\u000a# Display the live value above the expander; operating the expander will toggle the state between False and True\u000aHtml(s, '<br>', x)
p206
sg44
I01
sbsg29
g167
sbasbsg137
VDropDownExpander
p207
sg139
I2
sbag0
(g12
g2
Ntp208
Rp209
(dp210
g16
g0
(g17
g2
Ntp211
Rp212
(dp213
g21
(lp214
g0
(g23
g2
Ntp215
Rp216
(dp217
g27
V<p>Spinner test</p><p>Some imports and live values</p>
p218
sg29
g212
sbag0
(g34
g2
Ntp219
Rp220
(dp221
g38
g0
(g39
g2
Ntp222
Rp223
(dp224
g38
Vfrom larch.controls import spinner\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue(1.0)
p225
sg44
I01
sbsg29
g212
sbag0
(g23
g2
Ntp226
Rp227
(dp228
g27
V<p>Spinner:<br></p>
p229
sg29
g212
sbag0
(g34
g2
Ntp230
Rp231
(dp232
g38
g0
(g39
g2
Ntp233
Rp234
(dp235
g38
Vspinner.spinner(value=1.0)
p236
sg44
I01
sbsg29
g212
sbag0
(g23
g2
Ntp237
Rp238
(dp239
g27
V<p>Two live sliders editing the same live value:<br></p>
p240
sg29
g212
sbag0
(g34
g2
Ntp241
Rp242
(dp243
g38
g0
(g39
g2
Ntp244
Rp245
(dp246
g38
Vspinner.live_spinner(x)
p247
sg44
I01
sbsg29
g212
sbag0
(g34
g2
Ntp248
Rp249
(dp250
g38
g0
(g39
g2
Ntp251
Rp252
(dp253
g38
Vspinner.live_spinner(x)
p254
sg44
I01
sbsg29
g212
sbasbsg137
VSpinner
p255
sg139
I3
sbag0
(g12
g2
Ntp256
Rp257
(dp258
g16
g0
(g17
g2
Ntp259
Rp260
(dp261
g21
(lp262
g0
(g23
g2
Ntp263
Rp264
(dp265
g27
V<h1 style="text-align:center">ckEditor control</h1><p>The ckEditor&nbsp;control creates a ckEditor based rich text editing pane.</p><h2>API</h2><p>Package:&nbsp;<code>larch.controls.ckeditor</code></p><p><code>class ckeditor (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>ckeditor(self, text, immediate_events=False, use_edit_button=False, config=None, on_edit=None, on_focus=None, on_blur=None)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>text</code>: the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>use_edit_button</code>: if False the component&nbsp;is always editable, if True the use must enable edit mode by Alt-clicking or hovering over the component&nbsp;and clicking the edit button that appears</li><li><code>config</code>: ckEditor <a data-cke-saved-href="http://docs.ckeditor.com/#!/api/CKEDITOR.config" href="http://docs.ckeditor.com/#!/api/CKEDITOR.config">configuration</a></li><li><code>on_edit</code>: a function of the form <code>fn(event)</code> that is invoked when the content is edited</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li></ul>
p266
sg29
g260
sbag0
(g23
g2
Ntp267
Rp268
(dp269
g27
V<h2>Examples</h2>
p270
sg29
g260
sbag0
(g34
g2
Ntp271
Rp272
(dp273
g38
g0
(g39
g2
Ntp274
Rp275
(dp276
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import ckeditor
p277
sg44
I01
sbsg29
g260
sbag0
(g23
g2
Ntp278
Rp279
(dp280
g27
V<p>A basic ckeditor:</p>
p281
sg29
g260
sbag0
(g34
g2
Ntp282
Rp283
(dp284
g38
g0
(g39
g2
Ntp285
Rp286
(dp287
g38
V# An event viewer logs events and displays them\u000aev1 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>',\u000a                       on_edit=lambda event, content: ev1('Edit'), on_focus=lambda event: ev1('Focus'), on_blur=lambda event: ev1('Blur'))\u000a# Place the event viewer below the control\u000aev1.below(ed)
p288
sg44
I01
sbsg29
g260
sbag0
(g23
g2
Ntp289
Rp290
(dp291
g27
V<p>With immediate events enabled:</p>
p292
sg29
g260
sbag0
(g34
g2
Ntp293
Rp294
(dp295
g38
g0
(g39
g2
Ntp296
Rp297
(dp298
g38
Vev2 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>', immediate_events=True,\u000a                       on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed)
p299
sg44
I01
sbsg29
g260
sbag0
(g23
g2
Ntp300
Rp301
(dp302
g27
V<p>With edit button enabled:</p>
p303
sg29
g260
sbag0
(g34
g2
Ntp304
Rp305
(dp306
g38
g0
(g39
g2
Ntp307
Rp308
(dp309
g38
Vev3 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>', use_edit_button=True,\u000a                        on_edit=lambda event, content: ev3('Edit'), on_focus=lambda event: ev3('Focus'), on_blur=lambda event: ev3('Blur'))\u000aev3.below(ed)
p310
sg44
I01
sbsg29
g260
sbag0
(g23
g2
Ntp311
Rp312
(dp313
g27
V<h2>Editing a live value</h2><p>The live variants of the ckeditor control edit live values. If the value contained by a live value is modified externally, the control will update correspondingly.</p><h2>API</h2><p><code>live_ckeditor(live, immediate_events=False, use_edit_button=False, config=None, on_focus=None, on_blur=None)</code></p><p>Parameters:</p><ul><li><code>live</code>: a live value containing&nbsp;the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>use_edit_button</code>: if False the component&nbsp;is always editable, if True the use must enable edit mode by Alt-clicking or hovering over the component&nbsp;and clicking the edit button that appears</li><li><code>config</code>: ckEditor configuration</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li></ul>
p314
sg29
g260
sbag0
(g23
g2
Ntp315
Rp316
(dp317
g27
V<h2>Examples</h2>
p318
sg29
g260
sbag0
(g34
g2
Ntp319
Rp320
(dp321
g38
g0
(g39
g2
Ntp322
Rp323
(dp324
g38
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('<h1>Test</h1>')
p325
sg44
I01
sbsg29
g260
sbag0
(g23
g2
Ntp326
Rp327
(dp328
g27
V<p>Example with two live ckeditors editing the same live value; they will be synchronised on focus and on blur.</p>
p329
sg29
g260
sbag0
(g34
g2
Ntp330
Rp331
(dp332
g38
g0
(g39
g2
Ntp333
Rp334
(dp335
g38
Vckeditor.live_ckeditor(x)
p336
sg44
I01
sbsg29
g260
sbag0
(g34
g2
Ntp337
Rp338
(dp339
g38
g0
(g39
g2
Ntp340
Rp341
(dp342
g38
Vckeditor.live_ckeditor(x)
p343
sg44
I01
sbsg29
g260
sbag0
(g23
g2
Ntp344
Rp345
(dp346
g27
V<p>The same live value being edited, this time with edit buttons:</p>
p347
sg29
g260
sbag0
(g34
g2
Ntp348
Rp349
(dp350
g38
g0
(g39
g2
Ntp351
Rp352
(dp353
g38
Vckeditor.live_ckeditor(x, use_edit_button=True)
p354
sg44
I01
sbsg29
g260
sbag0
(g34
g2
Ntp355
Rp356
(dp357
g38
g0
(g39
g2
Ntp358
Rp359
(dp360
g38
Vckeditor.live_ckeditor(x, use_edit_button=True)
p361
sg44
I01
sbsg29
g260
sbasbsg137
VckEditor
p362
sg139
I4
sbag0
(g12
g2
Ntp363
Rp364
(dp365
g16
g0
(g17
g2
Ntp366
Rp367
(dp368
g21
(lp369
g0
(g23
g2
Ntp370
Rp371
(dp372
g27
V<h1 style="text-align:center">CodeMirror control</h1><p>The CodeMirror control creates a CodeMirror&nbsp;based source code&nbsp;editing pane.</p><h2>API</h2><p>Package:&nbsp;<code>larch.controls.code_mirror</code></p><p><code>class code_mirror (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>code_mirror(self,&nbsp;text, immediate_events=False, config=None, on_edit=None, on_focus=None, on_blur=None, modes=None)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>text</code>: the text display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>config</code>: CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/doc/manual.html#config" href="http://codemirror.net/doc/manual.html#config">configuration</a></li><li><code>on_edit</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the content is edited</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li><li><code>modes</code>:&nbsp;a list of names of CodeMirror&nbsp;language plugins to load (e.g. '<code>python</code>', '<code>javascript</code>', '<code>glsl</code>', etc; see CodeMirror <a data-cke-saved-href="http://codemirror.net/mode/" href="http://codemirror.net/mode/">modes</a>)</li></ul>
p373
sg29
g367
sbag0
(g23
g2
Ntp374
Rp375
(dp376
g27
V<h2>Examples</h2>
p377
sg29
g367
sbag0
(g34
g2
Ntp378
Rp379
(dp380
g38
g0
(g39
g2
Ntp381
Rp382
(dp383
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import code_mirror
p384
sg44
I01
sbsg29
g367
sbag0
(g23
g2
Ntp385
Rp386
(dp387
g27
V<p>A basic CodeMirror:</p>
p388
sg29
g367
sbag0
(g34
g2
Ntp389
Rp390
(dp391
g38
g0
(g39
g2
Ntp392
Rp393
(dp394
g38
V# An event viewer logs events and displays them\u000aev1 = EventViewer()\u000aed = code_mirror.code_mirror('def f(x):\u005cn\u005ctreturn x*x\u005cn',\u000a                             on_edit=lambda event, content: ev1('Edit'), on_focus=lambda event: ev1('Focus'), on_blur=lambda event: ev1('Blur'))\u000a# Place the event viewer below the control\u000aev1.below(ed)
p395
sg44
I01
sbsg29
g367
sbag0
(g23
g2
Ntp396
Rp397
(dp398
g27
V<p>A CodeMirror with immediate events enabled:</p>
p399
sg29
g367
sbag0
(g34
g2
Ntp400
Rp401
(dp402
g38
g0
(g39
g2
Ntp403
Rp404
(dp405
g38
Vev2 = EventViewer()\u000aed = code_mirror.code_mirror('def f(x):\u005cn\u005ctreturn x*x\u005cn', immediate_events=True,\u000a                             on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed)
p406
sg44
I01
sbsg29
g367
sbag0
(g23
g2
Ntp407
Rp408
(dp409
g27
V<h2>Editing a live value</h2><p>The live variants of the CodeMirror&nbsp;control edit live values. If the value contained by a live value is modified externally, the control will update correspondingly.</p><h2>API</h2><p><code>live_code_mirror(live, immediate_events=False, config=None, on_focus=None, on_blur=None, modes=None, text_filter_fn=None)</code></p><p>Parameters:</p><ul><li><code>live</code>: a live value containing&nbsp;the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>config</code>: CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/doc/manual.html#config" href="http://codemirror.net/doc/manual.html#config">configuration</a></li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li><li><code>modes</code>:&nbsp;a list of names of CodeMirror&nbsp;language plugins to load (e.g. '<code>python</code>', '<code>javascript</code>', '<code>glsl</code>', etc; see CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/mode/" href="http://codemirror.net/mode/">modes</a>)</li><li><code>text_filter_fn</code>: a function of the form fn(text);&nbsp;when storing the text from the CodeMirror into the live value, the text is first passed through this function&nbsp;and its return value is used. This is necessary when editing Python code, as pasting from external sources can cause the source to indent with tabs on some lines and spaces on others. This inconsistency is now permitted by Python. <code>text_filter_fn</code> would be used in this case to convert leading tabs into spaces.</li></ul>
p410
sg29
g367
sbag0
(g23
g2
Ntp411
Rp412
(dp413
g27
V<h2>Examples</h2><p>Two CodeMirrors&nbsp;editing a live value; they will synchronise there contents after a delay of about 1s.</p>
p414
sg29
g367
sbag0
(g34
g2
Ntp415
Rp416
(dp417
g38
g0
(g39
g2
Ntp418
Rp419
(dp420
g38
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Test 1\u005cnTest 2\u005cn')\u000a\u000acode_mirror.live_code_mirror(x)
p421
sg44
I01
sbsg29
g367
sbag0
(g34
g2
Ntp422
Rp423
(dp424
g38
g0
(g39
g2
Ntp425
Rp426
(dp427
g38
Vcode_mirror.live_code_mirror(x)
p428
sg44
I01
sbsg29
g367
sbasbsg137
VCodeMirror
p429
sg139
I5
sbag0
(g12
g2
Ntp430
Rp431
(dp432
g16
g0
(g17
g2
Ntp433
Rp434
(dp435
g21
(lp436
g0
(g23
g2
Ntp437
Rp438
(dp439
g27
V<p>Text Entry</p>
p440
sg29
g434
sbag0
(g34
g2
Ntp441
Rp442
(dp443
g38
g0
(g39
g2
Ntp444
Rp445
(dp446
g38
Vfrom larch.controls import text_entry\u000a\u000atext_entry.text_entry('Hello world')
p447
sg44
I01
sbsg29
g434
sbag0
(g34
g2
Ntp448
Rp449
(dp450
g38
g0
(g39
g2
Ntp451
Rp452
(dp453
g38
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Hello live')\u000a\u000atext_entry.live_text_entry(x)
p454
sg44
I01
sbsg29
g434
sbag0
(g34
g2
Ntp455
Rp456
(dp457
g38
g0
(g39
g2
Ntp458
Rp459
(dp460
g38
Vtext_entry.live_text_entry(x)
p461
sg44
I01
sbsg29
g434
sbasbsg137
VTextEntry
p462
sg139
I6
sbag0
(g12
g2
Ntp463
Rp464
(dp465
g16
g0
(g17
g2
Ntp466
Rp467
(dp468
g21
(lp469
g0
(g23
g2
Ntp470
Rp471
(dp472
g27
V<h1 style="text-align:center">Noty control</h1><p>The noty control displays it's contents in a Noty.js notification box. There are few limitations on the content that can be placed in a noty; live, interactive content and objects may be used as normal. You will however need to bear in mind that Noty catches some events (e.g. clicks) for itself; this can interfere with your the operation of its contents.&nbsp;Note that it is not enough to simply construct the dialog control; you must call the&nbsp;<code>show_on</code>&nbsp;method to display it.</p><h2>API</h2><p>\u200bPackage:&nbsp;<code>larch.controls.noty</code></p><p><code>class noty (object)</code></p><p style="margin-left: 40px;">Constructor: <code>noty(self, contents, **options)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li><code>contents</code>: the noty contents</li><li><code>options</code>: noty&nbsp;<a data-cke-saved-href="http://needim.github.io/noty/#options" href="http://needim.github.io/noty/#options">options</a></li></ul><p style="margin-left: 40px;">Methods:</p><p style="margin-left: 80px;"><code>def show_on(self, target)</code></p><p style="margin-left: 120px;">Shows the noty notification box. You must call this method to show the noty.</p><p style="margin-left: 120px;">Parameters:</p><ul style="margin-left: 120px;"><li><code>target</code>: identifies the page on which to show the noty.&nbsp;Can be: an&nbsp;<code>Event</code>,&nbsp;<code>DynamicPage</code>,&nbsp;<code>DynamicSegment</code>,&nbsp;<code>_FragmentView</code>&nbsp;or&nbsp;<code>IncrementalView</code>.</li></ul>
p473
sg29
g467
sbag0
(g23
g2
Ntp474
Rp475
(dp476
g27
V<h2>Example</h2><p>The example below shows a button that will display the noty. Notice how the slider below the button and the slider within the noty are synchronised.</p>
p477
sg29
g467
sbag0
(g34
g2
Ntp478
Rp479
(dp480
g38
g0
(g39
g2
Ntp481
Rp482
(dp483
g38
Vfrom larch.controls import noty, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    notification_content = Html('<h3>Notification</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    n = noty.noty(notification_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    n.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the noty, x, and a slider\u000aHtml(button.button('Show notification', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))\u000a
p484
sg44
I01
sbsg29
g467
sbasbsg137
VNoty
p485
sg139
I7
sbag0
(g12
g2
Ntp486
Rp487
(dp488
g16
g0
(g17
g2
Ntp489
Rp490
(dp491
g21
(lp492
g0
(g23
g2
Ntp493
Rp494
(dp495
g27
V<h1 style="text-align:center">Dialog&nbsp;control</h1><p>The dialog control displays it's contents in a JQuery dialog box. There are few limitations on the content that can be placed in a dialog; live, interactive content and objects may be used as normal. Note that it is not enough to simply construct the dialog control; you must call the&nbsp;<code>show_on</code> method to display it.</p><h2>API</h2><p>\u200bPackage:&nbsp;<code>larch.controls.dialog</code></p><p><code>class dialog (object)</code></p><p style="margin-left: 40px;">Constructor: <code>dialog(self,&nbsp;contents, **options)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li><code>contents</code>: the dialog box contents</li><li><code>options</code>: JQuery UI dialog <a data-cke-saved-href="http://api.jqueryui.com/dialog/" href="http://api.jqueryui.com/dialog/">options</a></li></ul><p style="margin-left: 40px;">Methods:</p><p style="margin-left: 80px;"><code>def show_on(self, target)</code></p><p style="margin-left: 120px;">Shows the dialog box. You must call this method to display the dialog box.</p><p style="margin-left: 120px;">Parameters:</p><ul style="margin-left: 120px;"><li><code>target</code>: identifies the page on which to show the dialog box.&nbsp;Can be: an <code>Event</code>,&nbsp;<code>DynamicPage</code>, <code>DynamicSegment</code>, <code>_FragmentView</code> or&nbsp;<code>IncrementalView</code>.</li></ul>
p496
sg29
g490
sbag0
(g23
g2
Ntp497
Rp498
(dp499
g27
V<h2>Example</h2><p>The example below shows a button that will display the dialog. Notice how the slider below the button and the slider within the dialog are synchronised.</p>
p500
sg29
g490
sbag0
(g34
g2
Ntp501
Rp502
(dp503
g38
g0
(g39
g2
Ntp504
Rp505
(dp506
g38
Vfrom larch.controls import dialog, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    dialog_content = Html('<h3>Dialog</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    d = dialog.dialog(dialog_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    d.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the dialog, x, and a slider\u000aHtml(button.button('Show dialog', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))
p507
sg44
I01
sbsg29
g490
sbasbsg137
VDialog
p508
sg139
I8
sbag0
(clarch.apps.project.project_package
ProjectPackage
p509
g2
Ntp510
Rp511
(dp512
g137
Vlib
p513
sg10
(lp514
g0
(g12
g2
Ntp515
Rp516
(dp517
g16
g0
(g17
g2
Ntp518
Rp519
(dp520
g21
(lp521
g0
(g23
g2
Ntp522
Rp523
(dp524
g27
V<h1>Event viewer</h1>
p525
sg29
g519
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p526
g2
Ntp527
Rp528
(dp529
g38
g0
(clarch.apps.source_code
CSSCode
p530
g2
Ntp531
Rp532
(dp533
g38
V.event_viewer {\u000a    background: #f0f0f0;\u000a    border: 1px solid #c0c0c0;\u000a    border-radius: 5px;\u000a    padding: 5px;\u000a}\u000a\u000a.ev_title {\u000a    font-size: 0.85em;\u000a    color: #406080;\u000a}\u000a
p534
sg44
I01
sbsS'var_name'
p535
Vev_css
p536
sg29
g519
sbag0
(g34
g2
Ntp537
Rp538
(dp539
g38
g0
(g39
g2
Ntp540
Rp541
(dp542
g38
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000afrom larch.controls import button\u000a\u000aclass EventViewer (object):\u000a    def __init__(self):\u000a        self.__events = LiveValue([])\u000a        \u000a        \u000a    def __call__(self, *events):\u000a        self.__events.value = self.__events.value + list(events)\u000a        \u000a    \u000a    def __clear(self, event):\u000a        self.__events.value = []\u000a        \u000a        \u000a    def __present__(self, fragment):\u000a        clear = button.button('Clear', self.__clear)\u000a        return Html('<div class="event_viewer">',\u000a                    '<span class="ev_title">Events: ', clear, '</span>',\u000a                    '<br>',\u000a                    '<br>'.join([Html.escape_str(x)   for x in self.__events.value]),\u000a                    '</div>').use_css(source=ev_css)\u000a    \u000a    \u000a    def below(self, p):\u000a        return Html('<div>', p, '</div><div>', self, '</div>')
p543
sg44
I01
sbsg29
g519
sbasbsg137
Veventview
p544
sg139
I9
sbasbag0
(g12
g2
Ntp545
Rp546
(dp547
g16
g0
(g17
g2
Ntp548
Rp549
(dp550
g21
(lp551
g0
(g23
g2
Ntp552
Rp553
(dp554
g27
V<h1 style="text-align:center">Focusable</h1><p>Focusable wraps its contents and emits events when they gain or lose focus. The Larch client-side libraries keep track of which component currently has focus. The component that has focus will have a box shadow beneath it.</p><h2>API</h2><p>Package:&nbsp;<code>larch.controls.focusable</code></p><p><code>class focusable (CompositePres)</code></p><p style="margin-left: 40px;">Constructor: <code>focusable(self,&nbsp;contents, on_gain_focus=None, on_lose_focus=None)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li><code>contents</code>: the focusable contents</li><li><code>on_gain_focus</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the contents gain focus</li><li><code>on_lose_focus</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the contents lose focus</li></ul>
p555
sg29
g549
sbag0
(g23
g2
Ntp556
Rp557
(dp558
g27
V<h2>Example</h2>
p559
sg29
g549
sbag0
(g526
g2
Ntp560
Rp561
(dp562
g38
g0
(g530
g2
Ntp563
Rp564
(dp565
g38
V.focus_test_item {\u000a    padding: 5px;\u000a    margin: 5px;\u000a    border: 1px solid #d0d0d0;\u000a}
p566
sg44
I01
sbsg535
Vfocus_test_item_css
p567
sg29
g549
sbag0
(g34
g2
Ntp568
Rp569
(dp570
g38
g0
(g39
g2
Ntp571
Rp572
(dp573
g38
V# Import the event viewer so that we can show the events\u000afrom ctltest.lib.eventview import EventViewer\u000a\u000a# import focusable and Html\u000afrom larch.controls import focusable\u000afrom larch.pres.html import Html\u000a\u000a\u000a# Create an event viewer\u000aev = EventViewer()\u000a\u000a\u000a# Function to make cell contents; text in a div that uses the 'focus_test_item' class.\u000adef make_contents(text):\u000a    return Html('<div class="focus_test_item">{0}</div>'.format(text)).use_css(source=focus_test_item_css)\u000a\u000a# Table cell\u000adef cell(x):\u000a    return Html('<td>', x, '</td>')\u000a\u000a# Table that arranges cells horizontally\u000adef table(*cells):\u000a    return Html('<table><tr>').extend(cells).append('</tr></table>')\u000a\u000a\u000a# Focusable item; wrap the results of calling make_contens(), and attach event handlers that add messages to the event viewer\u000adef make_item(item_text):\u000a    return focusable.focusable(make_contents(item_text),\u000a                               on_gain_focus=lambda event: ev('{0} gained focus'.format(item_text)),\u000a                               on_lose_focus=lambda event: ev('{0} lost focus'.format(item_text)))\u000a\u000a# Make the focusable items\u000af1 = make_item('Item 1')\u000af2 = make_item('Item 2')\u000af3 = make_item('Item 3')\u000af4 = make_item('Item 4')\u000a\u000a# Arrange them with a table\u000ax = table(cell(f1), cell(f2), cell(f3), cell(f4))\u000a# Arrange the event viewer below the items\u000aev.below(x)
p574
sg44
I01
sbsg29
g549
sbasbsg137
VFocusable
p575
sg139
I10
sbag0
(g12
g2
Ntp576
Rp577
(dp578
g16
g0
(g17
g2
Ntp579
Rp580
(dp581
g21
(lp582
g0
(g23
g2
Ntp583
Rp584
(dp585
g27
V<h1 style="text-align:center">Forms</h1><p>The form control is used in place of an HTML form element; the form control wraps around the form contents. The form control handles the client side form submission and routes the form data on the server side to an event handler.</p><p>A function is also provided that creates a submit button and uses JQuery UI to alter/improve its appearance. You can use a standard HTML submit button if you wish.</p><h2>API</h2><p>Package:&nbsp;<code>larch.controls.form</code></p><p><code>class form (CompositePres)</code></p><p style="margin-left: 40px;">Constructor: <code>focusable(self,&nbsp;contents, on_submit=None)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li><code>contents</code>: the form contents</li><li><code>on_submit</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the use submits the form. The form data is accessible as a dictionary via <code>event.data\u200b<code>\u200b</code></code></li></ul><p><code>def submit_button(text)</code></p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>text</code>: the button text</li></ul>
p586
sg29
g580
sbag0
(g23
g2
Ntp587
Rp588
(dp589
g27
V<h2>Example</h2>
p590
sg29
g580
sbag0
(g34
g2
Ntp591
Rp592
(dp593
g38
g0
(g39
g2
Ntp594
Rp595
(dp596
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.pres.html import Html\u000afrom larch.controls import form\u000a\u000a# Event viewer so we can see the sutmit events\u000aev = EventViewer()\u000a\u000a# Build the form contents; a text entry box, a select and a submit button\u000aform_contents = Html('File base name: <input type="text" name="name"><br>',\u000a                     'Extension: <select name="ext">',\u000a                     '<option value="py">Python</option>',\u000a                     '<option value="java">Java</option>',\u000a                     '<option value="cs">C#</option>',\u000a                     '<option value="rb">Ruby</option>',\u000a                     '</select><br>',\u000a                     form.submit_button('Submit'))\u000a\u000a    \u000a# Build the form. Add a line to the event veiwer on submit\u000af = form.form(form_contents, on_submit=lambda event: ev('Submit: {0}'.format(event.data)))\u000a\u000a# Arrange the event veiwer below the form\u000aev.below(f)
p597
sg44
I01
sbsg29
g580
sbasbsg137
VForm
p598
sg139
I11
sbag0
(g12
g2
Ntp599
Rp600
(dp601
g16
g0
(g17
g2
Ntp602
Rp603
(dp604
g21
(lp605
g0
(g23
g2
Ntp606
Rp607
(dp608
g27
V<h1 style="text-align:center">Menu controls</h1><p>The <code>menu</code> module supports the construction of nested popup menus that are built using JQuery UI.</p><h2>API</h2><p>Package: <code>larch.controls.menu</code></p><p><code>def separator()</code></p><p style="margin-left:40px">The separator function creates a horizontal separator that can be placed in a menu.</p><p><code>class item (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>item(self, item_content, on_select=None)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>item_content</code>: the content to be displayed within the menu item</li><li><code>on_select</code>: a callback of the form <code>fn(event)</code> that is invoked when the user selects the menu item</li></ul><p><code>def sub_menu(item_content, items)</code></p><p style="margin-left:40px">Create a sub-menu that is accessible through an item.</p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>item_content</code>: the content to be displayed within the menu item that displays the sub-menu</li><li><code>items</code>: the items within the sub-menu</li></ul><p><code>def menu(items, drop_down=False)</code></p><p style="margin-left:40px">Creates a JQuery UI with the given items.</p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>items</code>: the items to be placed in the menu</li><li><code>drop_down</code>: if True, the menu appears below the item that spawned it</li></ul><p><br></p>
p609
sg29
g603
sbag0
(g23
g2
Ntp610
Rp611
(dp612
g27
V<h2>Example</h2><p>First, we shall create the contents:</p>
p613
sg29
g603
sbag0
(g34
g2
Ntp614
Rp615
(dp616
g38
g0
(g39
g2
Ntp617
Rp618
(dp619
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import menu\u000afrom larch.pres.html import Html\u000a\u000aev = EventViewer()\u000a\u000acpu = menu.sub_menu('CPU',\u000a                    [menu.item('x86', lambda event: ev('cpu_x86')),\u000a                     menu.item('ARM', lambda event: ev('cpu_arm'))])\u000ascreen = menu.sub_menu('Display',\u000a                       [menu.item('Touch', lambda event: ev('disp_touch')),\u000a                        menu.item('Monitor', lambda event: ev('disp_monitor'))])\u000aos = menu.sub_menu('OS',\u000a                   [menu.item('Windows', lambda event: ev('os_win')),\u000a                    menu.item('Linux', lambda event: ev('os_linux')),\u000a                    menu.item('Mac', lambda event: ev('os_mac'))])\u000alanguage = menu.sub_menu('Language',\u000a                         [menu.item('Python', lambda event: ev('lang_py')),\u000a                          menu.item('Java', lambda event: ev('lang_java')),\u000a                          menu.item('C#', lambda event: ev('lang_cs'))])\u000acontents = [cpu, screen, menu.separator(), os, language]\u000a
p620
sg44
I01
sbsg29
g603
sbag0
(g23
g2
Ntp621
Rp622
(dp623
g27
V<p>Using the&nbsp;<code>menu</code>&nbsp;function to display the menu directly, within a <code>div</code> with a width of 200px:</p>
p624
sg29
g603
sbag0
(g34
g2
Ntp625
Rp626
(dp627
g38
g0
(g39
g2
Ntp628
Rp629
(dp630
g38
VHtml('<div style="width: 200px;">', menu.menu(contents), '</div>')
p631
sg44
I01
sbsg29
g603
sbag0
(g23
g2
Ntp632
Rp633
(dp634
g27
V<p>Using the <code>sub_menu</code>&nbsp;function to display a button from which we can access the menu:</p>
p635
sg29
g603
sbag0
(g34
g2
Ntp636
Rp637
(dp638
g38
g0
(g39
g2
Ntp639
Rp640
(dp641
g38
VHtml('<div style="width: 200px;">', menu.menu([menu.sub_menu('system', contents)]), '</div>')
p642
sg44
I01
sbsg29
g603
sbag0
(g23
g2
Ntp643
Rp644
(dp645
g27
V<p>Finally, our event log:</p>
p646
sg29
g603
sbag0
(g34
g2
Ntp647
Rp648
(dp649
g38
g0
(g39
g2
Ntp650
Rp651
(dp652
g38
Vev
p653
sg44
I01
sbsg29
g603
sbasbsg137
VMenu
p654
sg139
I12
sbasb.