ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vctltest
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1>Slider test</h1><p>Imports and some live values</p>
p28
sS'notebook'
p29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p30
g2
Ntp31
Rp32
(dp33
S'code'
p34
g0
(clarch.apps.source_code
PythonCode
p35
g2
Ntp36
Rp37
(dp38
g34
Vfrom larch.controls import slider\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue(1.0)\u000ar = LiveValue((1.0, 4.0))
p39
sS'editable'
p40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp41
Rp42
(dp43
g27
V<p>Slider:</p>
p44
sg29
g19
sbag0
(g30
g2
Ntp45
Rp46
(dp47
g34
g0
(g35
g2
Ntp48
Rp49
(dp50
g34
Vslider.slider(value=1.0, min=0.0, max=10.0, step=0.01)
p51
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp52
Rp53
(dp54
g27
V<p>Range slider:</p>
p55
sg29
g19
sbag0
(g30
g2
Ntp56
Rp57
(dp58
g34
g0
(g35
g2
Ntp59
Rp60
(dp61
g34
Vslider.range_slider(values=[1.0, 9.0], min=0.0, max=10.0, step=0.01)
p62
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp63
Rp64
(dp65
g27
V<p>Two live sliders editing the same live value:</p>
p66
sg29
g19
sbag0
(g30
g2
Ntp67
Rp68
(dp69
g34
g0
(g35
g2
Ntp70
Rp71
(dp72
g34
Vslider.live_slider(x, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p73
sg40
I01
sbsg29
g19
sbag0
(g30
g2
Ntp74
Rp75
(dp76
g34
g0
(g35
g2
Ntp77
Rp78
(dp79
g34
Vslider.live_slider(x, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p80
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp81
Rp82
(dp83
g27
V<p>Two live range sliders editing the same live value:<br></p>
p84
sg29
g19
sbag0
(g30
g2
Ntp85
Rp86
(dp87
g34
g0
(g35
g2
Ntp88
Rp89
(dp90
g34
Vslider.live_range_slider(r, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p91
sg40
I01
sbsg29
g19
sbag0
(g30
g2
Ntp92
Rp93
(dp94
g34
g0
(g35
g2
Ntp95
Rp96
(dp97
g34
Vslider.live_range_slider(r, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p98
sg40
I01
sbsg29
g19
sbasbsS'name'
p99
VSlider
p100
sS'id'
p101
I0
sbag0
(g12
g2
Ntp102
Rp103
(dp104
g16
g0
(g17
g2
Ntp105
Rp106
(dp107
g21
(lp108
g0
(g23
g2
Ntp109
Rp110
(dp111
g27
V<h1 style="text-align:center">Button control</h1><p>The button control creates a JQuery UI button.</p><h2>API</h2><p><code>button(text=None, action_fn=None, primary_icon=None, secondary_icon=None, disabled=False)</code></p><p>Parameters:</p><ul><li><code>text</code>: the button text. Can use HTML</li><li><code>action_fn</code>: a Python function that is invoked when the button is clicked. Takes a single parameter; the event.</li><li><code>primary_icon</code>: name of the JQuery UI icon to display on the left of the button</li><li><code>secondary_icon</code>: name of the JQuery&nbsp;UI icon to display on the right of the button</li><li><code>disabled</code>: the button will be disabled when True</li></ul><h2>Example</h2>
p112
sg29
g106
sbag0
(g30
g2
Ntp113
Rp114
(dp115
g34
g0
(g35
g2
Ntp116
Rp117
(dp118
g34
Vfrom larch.pres.html import Html\u000afrom larch.controls import button, dialog\u000a\u000a# Show a dialog when clicked\u000adef on_clicked(event):\u000a    dialog.dialog(Html('Button clicked')).show_on(event)\u000a\u000a\u000abutton.button(text='Hello world', action_fn=on_clicked, primary_icon='ui-icon-plus')
p119
sg40
I01
sbsg29
g106
sbasbsg99
VButton
p120
sg101
I1
sbag0
(g12
g2
Ntp121
Rp122
(dp123
g16
g0
(g17
g2
Ntp124
Rp125
(dp126
g21
(lp127
g0
(g30
g2
Ntp128
Rp129
(dp130
g34
g0
(g35
g2
Ntp131
Rp132
(dp133
g34
Vfrom larch.controls import expander\u000a\u000aexpander.dropdown_expander('Hello world', 'The end')
p134
sg40
I01
sbsg29
g125
sbasbsg99
VDropDownExpander
p135
sg101
I2
sbag0
(g12
g2
Ntp136
Rp137
(dp138
g16
g0
(g17
g2
Ntp139
Rp140
(dp141
g21
(lp142
g0
(g23
g2
Ntp143
Rp144
(dp145
g27
V<p>Spinner test</p><p>Some imports and live values</p>
p146
sg29
g140
sbag0
(g30
g2
Ntp147
Rp148
(dp149
g34
g0
(g35
g2
Ntp150
Rp151
(dp152
g34
Vfrom larch.controls import spinner\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue(1.0)
p153
sg40
I01
sbsg29
g140
sbag0
(g23
g2
Ntp154
Rp155
(dp156
g27
V<p>Spinner:<br></p>
p157
sg29
g140
sbag0
(g30
g2
Ntp158
Rp159
(dp160
g34
g0
(g35
g2
Ntp161
Rp162
(dp163
g34
Vspinner.spinner(value=1.0)
p164
sg40
I01
sbsg29
g140
sbag0
(g23
g2
Ntp165
Rp166
(dp167
g27
V<p>Two live sliders editing the same live value:<br></p>
p168
sg29
g140
sbag0
(g30
g2
Ntp169
Rp170
(dp171
g34
g0
(g35
g2
Ntp172
Rp173
(dp174
g34
Vspinner.live_spinner(x)
p175
sg40
I01
sbsg29
g140
sbag0
(g30
g2
Ntp176
Rp177
(dp178
g34
g0
(g35
g2
Ntp179
Rp180
(dp181
g34
Vspinner.live_spinner(x)
p182
sg40
I01
sbsg29
g140
sbasbsg99
VSpinner
p183
sg101
I3
sbag0
(g12
g2
Ntp184
Rp185
(dp186
g16
g0
(g17
g2
Ntp187
Rp188
(dp189
g21
(lp190
g0
(g23
g2
Ntp191
Rp192
(dp193
g27
V<h1 style="text-align:center">ckEditor control</h1><p>The ckEditor control creates an editable rich text pane.</p><h3>API</h3><p><code>ckeditor(text, immediate_events=False, use_edit_button=False, config=None, on_edit=None, on_focus=None, on_blur=None)</code></p><p>Parameters:</p><ul><li><code>text</code>: the HTML text to edit</li><li><code>immediate_events</code>: True: an edit event is sent on each change, False: client side waits until no edits have occurred for 1 second, after which the event is sent</li><li><code>use_edit_button</code>: False: editor component is always editable, True: component is not editable to start with. An edit button hovers when the pointer hovers over the ckEditor, allowing the user to enable edit mode</li><li><code>config</code>: ckEditor configuration</li><li><code>on_edit</code>: function(event) invoked on edit event</li><li><code>on_focus</code>: function(event) invoked when the component gains focus</li><li><code>on_blur</code>: function(event) invoked then the component loses focus</li></ul><h2>Examples</h2><p>Import the event viewer, the <code>ckEditor</code> control, <code>LiveValue</code> and <code>Html</code>.</p>
p194
sg29
g188
sbag0
(g30
g2
Ntp195
Rp196
(dp197
g34
g0
(g35
g2
Ntp198
Rp199
(dp200
g34
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import ckeditor\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue('<h1>Test</h1>')
p201
sg40
I01
sbsg29
g188
sbag0
(g23
g2
Ntp202
Rp203
(dp204
g27
V<p>Basic ckEditor:<br></p>
p205
sg29
g188
sbag0
(g30
g2
Ntp206
Rp207
(dp208
g34
g0
(g35
g2
Ntp209
Rp210
(dp211
g34
Vev = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>',\u000a                       on_edit=lambda event, content: ev('Edit'),\u000a                       on_focus=lambda event: ev('Focus'),\u000a                       on_blur=lambda event: ev('Blur'))\u000aev.below(ed)
p212
sg40
I01
sbsg29
g188
sbag0
(g23
g2
Ntp213
Rp214
(dp215
g27
V<p>With immedate events enabled:</p>
p216
sg29
g188
sbag0
(g30
g2
Ntp217
Rp218
(dp219
g34
g0
(g35
g2
Ntp220
Rp221
(dp222
g34
Vev = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>',\u000a                       immediate_events=True,\u000a                       on_edit=lambda event, content: ev('Edit'),\u000a                       on_focus=lambda event: ev('Focus'),\u000a                       on_blur=lambda event: ev('Blur'))\u000aev.below(ed)
p223
sg40
I01
sbsg29
g188
sbag0
(g23
g2
Ntp224
Rp225
(dp226
g27
V<p>A ckEditor with an edit button:</p>
p227
sg29
g188
sbag0
(g30
g2
Ntp228
Rp229
(dp230
g34
g0
(g35
g2
Ntp231
Rp232
(dp233
g34
Vev2 = EventViewer()\u000aed2 = ckeditor.ckeditor('<p>ckEditor test</p>', use_edit_button=True, on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed2)
p234
sg40
I01
sbsg29
g188
sbag0
(g23
g2
Ntp235
Rp236
(dp237
g27
V<h2>Editing live values</h2><h3>API</h3><p><code>live_ckeditor(live, immediate_events=False, use_edit_button=False, config=None, on_focus=None, on_blur=None)</code></p><p>Two ckEditors editing a live value:</p>
p238
sg29
g188
sbag0
(g30
g2
Ntp239
Rp240
(dp241
g34
g0
(g35
g2
Ntp242
Rp243
(dp244
g34
Vckeditor.live_ckeditor(x)
p245
sg40
I01
sbsg29
g188
sbag0
(g30
g2
Ntp246
Rp247
(dp248
g34
g0
(g35
g2
Ntp249
Rp250
(dp251
g34
Vckeditor.live_ckeditor(x)
p252
sg40
I01
sbsg29
g188
sbag0
(g23
g2
Ntp253
Rp254
(dp255
g27
V<p>The same live value being edited, this time with edit buttons:</p>
p256
sg29
g188
sbag0
(g30
g2
Ntp257
Rp258
(dp259
g34
g0
(g35
g2
Ntp260
Rp261
(dp262
g34
Vckeditor.live_ckeditor(x, use_edit_button=True)
p263
sg40
I01
sbsg29
g188
sbag0
(g30
g2
Ntp264
Rp265
(dp266
g34
g0
(g35
g2
Ntp267
Rp268
(dp269
g34
Vckeditor.live_ckeditor(x, use_edit_button=True)
p270
sg40
I01
sbsg29
g188
sbasbsg99
VckEditor
p271
sg101
I4
sbag0
(g12
g2
Ntp272
Rp273
(dp274
g16
g0
(g17
g2
Ntp275
Rp276
(dp277
g21
(lp278
g0
(g23
g2
Ntp279
Rp280
(dp281
g27
V<h1 style="text-align: center;">CodeMirror Control</h1><p>Some imports and live values.</p>
p282
sg29
g276
sbag0
(g30
g2
Ntp283
Rp284
(dp285
g34
g0
(g35
g2
Ntp286
Rp287
(dp288
g34
Vfrom larch.controls import code_mirror\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue('Test 1\u005cnTest 2\u005cn')
p289
sg40
I01
sbsg29
g276
sbag0
(g23
g2
Ntp290
Rp291
(dp292
g27
V<p>CodeMirror:<br></p>
p293
sg29
g276
sbag0
(g30
g2
Ntp294
Rp295
(dp296
g34
g0
(g35
g2
Ntp297
Rp298
(dp299
g34
Vcode_mirror.code_mirror('Test 1\u005cnTest 2\u005cn')
p300
sg40
I01
sbsg29
g276
sbag0
(g23
g2
Ntp301
Rp302
(dp303
g27
V<p>Two CodeMirrors&nbsp;editing a live value:<br></p>
p304
sg29
g276
sbag0
(g30
g2
Ntp305
Rp306
(dp307
g34
g0
(g35
g2
Ntp308
Rp309
(dp310
g34
Vcode_mirror.live_code_mirror(x)
p311
sg40
I01
sbsg29
g276
sbag0
(g30
g2
Ntp312
Rp313
(dp314
g34
g0
(g35
g2
Ntp315
Rp316
(dp317
g34
Vcode_mirror.live_code_mirror(x)
p318
sg40
I01
sbsg29
g276
sbasbsg99
VCodeMirror
p319
sg101
I5
sbag0
(g12
g2
Ntp320
Rp321
(dp322
g16
g0
(g17
g2
Ntp323
Rp324
(dp325
g21
(lp326
g0
(g23
g2
Ntp327
Rp328
(dp329
g27
V<p>Text Entry</p>
p330
sg29
g324
sbag0
(g30
g2
Ntp331
Rp332
(dp333
g34
g0
(g35
g2
Ntp334
Rp335
(dp336
g34
Vfrom larch.controls import text_entry\u000a\u000atext_entry.text_entry('Hello world')
p337
sg40
I01
sbsg29
g324
sbag0
(g30
g2
Ntp338
Rp339
(dp340
g34
g0
(g35
g2
Ntp341
Rp342
(dp343
g34
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Hello live')\u000a\u000atext_entry.live_text_entry(x)
p344
sg40
I01
sbsg29
g324
sbag0
(g30
g2
Ntp345
Rp346
(dp347
g34
g0
(g35
g2
Ntp348
Rp349
(dp350
g34
Vtext_entry.live_text_entry(x)
p351
sg40
I01
sbsg29
g324
sbasbsg99
VTextEntry
p352
sg101
I6
sbag0
(g12
g2
Ntp353
Rp354
(dp355
g16
g0
(g17
g2
Ntp356
Rp357
(dp358
g21
(lp359
g0
(g23
g2
Ntp360
Rp361
(dp362
g27
V<h1 style="text-align: center;">Noty</h1><p>The Javascript noty library is used throughout Ubiquitous Larch to provide notifications.</p><p>In the example below, note that the content within the notification is live; the sliders in the block (below the button) and within the noty&nbsp;are synchronised.</p>
p363
sg29
g357
sbag0
(g30
g2
Ntp364
Rp365
(dp366
g34
g0
(g35
g2
Ntp367
Rp368
(dp369
g34
Vfrom larch.controls import noty, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    notification_content = Html('<h3>Notification</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    n = noty.noty(notification_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    n.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the noty, x, and a slider\u000aHtml(button.button('Show notification', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))\u000a
p370
sg40
I01
sbsg29
g357
sbasbsg99
VNoty
p371
sg101
I7
sbag0
(g12
g2
Ntp372
Rp373
(dp374
g16
g0
(g17
g2
Ntp375
Rp376
(dp377
g21
(lp378
g0
(g23
g2
Ntp379
Rp380
(dp381
g27
V<h1>Dialog&nbsp;test</h1><p>jQuery UI dialogs can be displayed within Ubiquitous&nbsp;Larch.</p><p>In the example below, note that the content within the dialog is live; the sliders are synchronised.</p>
p382
sg29
g376
sbag0
(g30
g2
Ntp383
Rp384
(dp385
g34
g0
(g35
g2
Ntp386
Rp387
(dp388
g34
Vfrom larch.controls import dialog, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    notification_content = Html('<h3>Notification</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    n = dialog.dialog(notification_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    n.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the noty, x, and a slider\u000aHtml(button.button('Show notification', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))
p389
sg40
I01
sbsg29
g376
sbasbsg99
VDialog
p390
sg101
I8
sbag0
(clarch.apps.project.project_package
ProjectPackage
p391
g2
Ntp392
Rp393
(dp394
g99
Vlib
p395
sg10
(lp396
g0
(g12
g2
Ntp397
Rp398
(dp399
g16
g0
(g17
g2
Ntp400
Rp401
(dp402
g21
(lp403
g0
(g23
g2
Ntp404
Rp405
(dp406
g27
V<h1>Event viewer</h1>
p407
sg29
g401
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p408
g2
Ntp409
Rp410
(dp411
g34
g0
(clarch.apps.source_code
CSSCode
p412
g2
Ntp413
Rp414
(dp415
g34
V.event_viewer {\u000a    background: #e0e0e0;\u000a    border: 1px solid #c0c0c0;\u000a    border-radius: 5px;\u000a    padding: 5px;\u000a}
p416
sg40
I01
sbsS'var_name'
p417
Vev_css
p418
sg29
g401
sbag0
(g30
g2
Ntp419
Rp420
(dp421
g34
g0
(g35
g2
Ntp422
Rp423
(dp424
g34
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000aclass EventViewer (object):\u000a    def __init__(self):\u000a        self.__events = LiveValue([])\u000a        \u000a        \u000a    def __call__(self, *events):\u000a        self.__events.value = self.__events.value + list(events)\u000a        \u000a        \u000a    def __present__(self, fragment):\u000a        return Html('<div class="event_viewer">', '<br>'.join([Html.escape_str(x)   for x in self.__events.value]), '</div>').use_css(source=ev_css)\u000a    \u000a    \u000a    def below(self, p):\u000a        return Html('<div>', p, '</div><div>', self, '</div>')
p425
sg40
I01
sbsg29
g401
sbasbsg99
Veventview
p426
sg101
I9
sbasbasb.