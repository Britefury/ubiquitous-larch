ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vctltest
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1 style="text-align:center">Slider control</h1><p>The slider control creates a JQuery UI slider.</p><h2>Slider&nbsp;API</h2><p>Package: <code>larch.controls.slider</code></p><p><code>class slider (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>slider(self, release_fn=None, slide_fn=None, width=None, value=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>release_fn</code>: callback function of the form <code>fn(event)</code> that is invoked when the user releases the slider</li><li><code>slide_fn</code>: callback function of the form <code>fn(event)</code> that is invoked when the user slides the slider</li><li><code>width</code>: the width of the slider. Integer or long values are interpreted as pixel values, otherwise a string should be used, which should specify the width in a manner compatible with CSS, e.g. <kbd>'5px'</kbd>, <code>'5em'</code> or <code>'50%'</code></li><li><code>value</code>: the initial value</li><li><code>min</code>: the minimum value</li><li><code>max</code>: the maximum value</li><li><code>step</code>: the step size; the slider value will be a multiple of this</li><li><code>orientation</code>: the orientation of the slider</li><li><code>animate</code>: if True, animate the slider's transition when the user clicks to set the value</li><li><code>disabled</code>: the control will be disabled if True</li></ul><p style="margin-left:40px">Methods:</p><p style="margin-left:80px"><code>set_value(self, value)</code></p><p style="margin-left:120px">Set the value of the slider</p><p style="margin-left:120px">Parameters:</p><ul style="margin-left:120px"><li><code>value</code>: the new value</li></ul><p><br></p>
p28
sS'notebook'
p29
g19
sbag0
(g23
g2
Ntp30
Rp31
(dp32
g27
V<h2>Examples</h2>
p33
sg29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p34
g2
Ntp35
Rp36
(dp37
S'code'
p38
g0
(clarch.apps.source_code
PythonCode
p39
g2
Ntp40
Rp41
(dp42
g38
V# Import EventViewer\u000afrom ctltest.lib.eventview import EventViewer\u000a# Import slider and import button so that we can create a reset button\u000afrom larch.controls import slider, button\u000a# Import Html so that we can spatially arrange thing\u000afrom larch.pres.html import Html\u000a\u000aev1 = EventViewer()\u000a\u000as1 = slider.slider(release_fn=lambda event, value: ev1('Release: {0}'.format(value)),\u000a                   slide_fn=lambda event, value: ev1('Slide: {0}'.format(value)),\u000a                   width=400,\u000a                   value=1.0, min=0.0, max=10.0, step=0.01)\u000areset1 = button.button('Set value to 1', lambda event: s1.set_value(1.0))\u000a\u000aHtml(s1, '<br>', reset1, '<br>', ev1)\u000a
p43
sS'editable'
p44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp45
Rp46
(dp47
g27
V<p>Slider with larger step, vertical orientation and animation. Notice the jerky motion of the slider when dragging due to the larger step and the animated motion when you click on the slider to set the value.</p>
p48
sg29
g19
sbag0
(g34
g2
Ntp49
Rp50
(dp51
g38
g0
(g39
g2
Ntp52
Rp53
(dp54
g38
Vev2 = EventViewer()\u000a\u000as2 = slider.slider(release_fn=lambda event, value: ev2('Release: {0}'.format(value)),\u000a                   slide_fn=lambda event, value: ev2('Slide: {0}'.format(value)),\u000a                   value=1.0, min=0.0, max=10.0, step=1.0,\u000a                   orientation='vertical', animate=True)\u000areset2 = button.button('Set value to 1', lambda event: s2.set_value(1.0))\u000a\u000aHtml(s2, '<br>', reset2, '<br>', ev2)\u000a
p55
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp56
Rp57
(dp58
g27
V<h2>Range slider&nbsp;API</h2><p>Range sliders edit two values in the form of a 2-tuple</p><p><code>class range_slider (CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;<code></code><code>range_slider(self, release_fn=None, slide_fn=None, width=None, values=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>release_fn</code>: callback function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the user releases the slider</li><li><code>slide_fn</code>: callback function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the user slides the slider</li><li><code>width</code>: the width of the slider. Integer or long values are interpreted as pixel values, otherwise a string should be used, which should specify the width in a manner compatible with CSS, e.g.&nbsp;<kbd>'5px'</kbd>,&nbsp;<code>'5em'</code>&nbsp;or&nbsp;<code>'50%'</code></li><li><code>values</code>: the initial lower and upper&nbsp;values in a tuple</li><li><code>min</code>: the minimum value</li><li><code>max</code>: the maximum value</li><li><code>step</code>: the step size; the slider value will be a multiple of this</li><li><code>orientation</code>: the orientation of the slider</li><li><code>animate</code>: if True, animate the slider's transition when the user clicks to set the value</li><li><code>disabled</code>: the control will be disabled if True</li></ul><p style="margin-left:40px">Methods:</p><p style="margin-left:80px"><code>set_values(self, values)</code></p><p style="margin-left:120px">Set the value range of the slider</p><p style="margin-left:120px">Parameters:</p><ul style="margin-left:120px"><li><code>values</code>: the lower and upper values in a tuple</li></ul><p><br></p>
p59
sg29
g19
sbag0
(g23
g2
Ntp60
Rp61
(dp62
g27
V<h2>Example</h2>
p63
sg29
g19
sbag0
(g34
g2
Ntp64
Rp65
(dp66
g38
g0
(g39
g2
Ntp67
Rp68
(dp69
g38
Vev3 = EventViewer()\u000a\u000as3 = slider.range_slider(release_fn=lambda event, values: ev3('Release: {0}'.format(values)),\u000a                         slide_fn=lambda event, values: ev3('Slide: {0}'.format(values)),\u000a                         width=400,\u000a                         values=(1.0, 2.0), min=0.0, max=10.0, step=0.01, animate=True)\u000areset3 = button.button('Set range to 1,2', lambda event: s3.set_values((1.0, 2.0)))\u000a\u000aHtml(s3, '<br>', reset3, '<br>', ev3)\u000a
p70
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp71
Rp72
(dp73
g27
V<h2>Live slider API</h2><p>Live sliders edit a value contained in a live value. If multiple sliders are editing the same live value, they will be synchronised</p><p><code>class live_slider (CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;<code>live_slider(self, live, update_on_slide=False, &nbsp;width=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>live</code>: the live value whose value the slider is to display and edit</li><li><code>update_on_slide</code>: if False, the live value will be updated when the user releases the slider, if True the live value will be updated when the user moves the slider</li><li><code>width</code>: the width of the slider. Integer or long values are interpreted as pixel values, otherwise a string should be used, which should specify the width in a manner compatible with CSS, e.g.&nbsp;<kbd>'5px'</kbd>,&nbsp;<code>'5em'</code>&nbsp;or&nbsp;<code>'50%'</code></li><li><code>min</code>: the minimum value</li><li><code>max</code>: the maximum value</li><li><code>step</code>: the step size; the slider value will be a multiple of this</li><li><code>orientation</code>: the orientation of the slider</li><li><code>animate</code>: if True, animate the slider's transition when the user clicks to set the value</li><li><code>disabled</code>: the control will be disabled if True</li></ul><p><br></p>
p74
sg29
g19
sbag0
(g23
g2
Ntp75
Rp76
(dp77
g27
V<h2>Examples</h2><p>Two live sliders editing the same live value.<br></p>
p78
sg29
g19
sbag0
(g34
g2
Ntp79
Rp80
(dp81
g38
g0
(g39
g2
Ntp82
Rp83
(dp84
g38
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000a\u000ax = LiveValue(1.0)\u000a\u000a\u000aslider.live_slider(x, update_on_slide=True, width=400, min=0.0, max=10.0, step=0.01, animate=True)
p85
sg44
I01
sbsg29
g19
sbag0
(g34
g2
Ntp86
Rp87
(dp88
g38
g0
(g39
g2
Ntp89
Rp90
(dp91
g38
Vslider.live_slider(x, update_on_slide=True, width=400, min=0.0, max=10.0, step=0.01)
p92
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp93
Rp94
(dp95
g27
V<p>A third, but with update on slide turned off:</p>
p96
sg29
g19
sbag0
(g34
g2
Ntp97
Rp98
(dp99
g38
g0
(g39
g2
Ntp100
Rp101
(dp102
g38
Vslider.live_slider(x, update_on_slide=False, width=400, min=0.0, max=10.0, step=0.01)
p103
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp104
Rp105
(dp106
g27
V<h2>Live range slider API</h2><p>Live range sliders edit a range value (pair of values) contained in a live value. If multiple sliders are editing the same live value, they will be synchronised</p><p><code>class live_range_slider (CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;live_range_slider<code>(self, live, update_on_slide=False, &nbsp;width=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>live</code>: the live value whose value the slider is to display and edit</li><li><code>update_on_slide</code>: if False, the live value will be updated when the user releases the slider, if True the live value will be updated when the user moves the slider</li><li><code>width</code>: the width of the slider. Integer or long values are interpreted as pixel values, otherwise a string should be used, which should specify the width in a manner compatible with CSS, e.g.&nbsp;<kbd>'5px'</kbd>,&nbsp;<code>'5em'</code>&nbsp;or&nbsp;<code>'50%'</code></li><li><code>min</code>: the minimum value</li><li><code>max</code>: the maximum value</li><li><code>step</code>: the step size; the slider value will be a multiple of this</li><li><code>orientation</code>: the orientation of the slider</li><li><code>animate</code>: if True, animate the slider's transition when the user clicks to set the value</li><li><code>disabled</code>: the control will be disabled if True</li></ul><p><br></p>
p107
sg29
g19
sbag0
(g23
g2
Ntp108
Rp109
(dp110
g27
V<p>Two live range sliders editing the same live value:</p>
p111
sg29
g19
sbag0
(g34
g2
Ntp112
Rp113
(dp114
g38
g0
(g39
g2
Ntp115
Rp116
(dp117
g38
Vr = LiveValue((1.0, 4.0))\u000a\u000aslider.live_range_slider(r, update_on_slide=True, width=400, min=0.0, max=10.0, step=0.01, animate=True)
p118
sg44
I01
sbsg29
g19
sbag0
(g34
g2
Ntp119
Rp120
(dp121
g38
g0
(g39
g2
Ntp122
Rp123
(dp124
g38
Vslider.live_range_slider(r, update_on_slide=True, width=400, min=0.0, max=10.0, step=0.01)
p125
sg44
I01
sbsg29
g19
sbag0
(g23
g2
Ntp126
Rp127
(dp128
g27
V<p>A third, but with update on slide turned off:<br></p>
p129
sg29
g19
sbag0
(g34
g2
Ntp130
Rp131
(dp132
g38
g0
(g39
g2
Ntp133
Rp134
(dp135
g38
Vslider.live_range_slider(r, update_on_slide=False, width=400, min=0.0, max=10.0, step=0.01)
p136
sg44
I01
sbsg29
g19
sbasbsS'name'
p137
VSlider
p138
sS'id'
p139
I0
sbag0
(g12
g2
Ntp140
Rp141
(dp142
g16
g0
(g17
g2
Ntp143
Rp144
(dp145
g21
(lp146
g0
(g23
g2
Ntp147
Rp148
(dp149
g27
V<h1 style="text-align:center">Button control</h1><p>The button control creates a JQuery push button.</p><h2>API</h2><p>Package: <code>larch.controls.button</code></p><p><code>class button (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>button(self,&nbsp;text=None, action_fn=None, primary_icon=None, secondary_icon=None, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>text</code>: the text to display in the button, can use HTML</li><li><code>action_fn</code>: a function of the form <code>fn(event)</code> that is invoked when the button is clicked</li><li><code>primary_icon</code>: a string identifying the <a data-cke-saved-href="http://api.jqueryui.com/theming/icons/" href="http://api.jqueryui.com/theming/icons/">JQuery UI icon</a> to display on the left of the button</li><li><code>secondary_icon</code>: a string identifying the <a data-cke-saved-href="http://api.jqueryui.com/theming/icons/" href="http://api.jqueryui.com/theming/icons/">JQuery UI icon</a> to display on the right of the button</li><li><code>disabled</code>: the button will be disabled if True</li></ul>
p150
sg29
g144
sbag0
(g23
g2
Ntp151
Rp152
(dp153
g27
V<h2>Example</h2>
p154
sg29
g144
sbag0
(g34
g2
Ntp155
Rp156
(dp157
g38
g0
(g39
g2
Ntp158
Rp159
(dp160
g38
Vfrom ctltest.lib.eventview import EventViewer\u000afrom larch.controls import button\u000a\u000a# An event viewer logs events and displays them\u000aev = EventViewer()\u000abt = button.button(text='Hello world', action_fn=lambda event: ev('Clicked'), primary_icon='ui-icon-plus')\u000a# Place the event viewer below the control\u000aev.below(bt)
p161
sg44
I01
sbsg29
g144
sbasbsg137
VButton
p162
sg139
I1
sbag0
(g12
g2
Ntp163
Rp164
(dp165
g16
g0
(g17
g2
Ntp166
Rp167
(dp168
g21
(lp169
g0
(g23
g2
Ntp170
Rp171
(dp172
g27
V<h1 style="text-align:center">Drop-down expander&nbsp;control</h1><p>The drop-down expander control displays a header and contents, with the header in a button and the contents below. The contents are only visible when it is in an expanded state. The user may toggle the state by clicking the button.</p><h2>API</h2><p>\u200bPackage:&nbsp;<code>larch.controls.expander</code></p><p><code>class dropdown_expander&nbsp;(CompositePres)</code></p><p style="margin-left: 40px;">Constructor: <code>dropdown_expander(self, header, content, state=None, on_expand=None)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li>header: the header that will be displayed in the button</li><li><code>content</code>: the content that will be displayed below the button</li><li><code>state</code>: the expander state; use a boolean to set the initial state (False=collapsed, True=expanded) or use a live value containing the state (the live value will be updated when the user expands or collapses the control)</li><li><code>on_expand</code>: a callback function of the form <code>fn(state)</code> that is invoked when the user expands or collapses the expander</li></ul>
p173
sg29
g167
sbag0
(g23
g2
Ntp174
Rp175
(dp176
g27
V<h2>Examples</h2><p>Basic expander:</p>
p177
sg29
g167
sbag0
(g34
g2
Ntp178
Rp179
(dp180
g38
g0
(g39
g2
Ntp181
Rp182
(dp183
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import expander\u000a\u000a# Create an event viewer that will show is the events as they arrive\u000aev1 = EventViewer()\u000a\u000ax = expander.dropdown_expander('Click to expand', 'The expander contents', on_expand=lambda state: ev1('Expanded' if state else 'Collapsed'))\u000a\u000a# Arrange the event viewer below the expander\u000aev1.below(x)
p184
sg44
I01
sbsg29
g167
sbag0
(g23
g2
Ntp185
Rp186
(dp187
g27
V<p>With an an initial state of True:</p>
p188
sg29
g167
sbag0
(g34
g2
Ntp189
Rp190
(dp191
g38
g0
(g39
g2
Ntp192
Rp193
(dp194
g38
Vexpander.dropdown_expander('Click to expand', 'The expander contents; this should be visible to start with', True)
p195
sg44
I01
sbsg29
g167
sbag0
(g23
g2
Ntp196
Rp197
(dp198
g27
V<p>Using a live value as the state:</p>
p199
sg29
g167
sbag0
(g34
g2
Ntp200
Rp201
(dp202
g38
g0
(g39
g2
Ntp203
Rp204
(dp205
g38
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000as = LiveValue(False)\u000a\u000ax = expander.dropdown_expander('Click to expand', 'The expander contents; this should be visible to start with', s)\u000a\u000a# Display the live value above the expander; operating the expander will toggle the state between False and True\u000aHtml(s, '<br>', x)
p206
sg44
I01
sbsg29
g167
sbasbsg137
VDropDownExpander
p207
sg139
I2
sbag0
(g12
g2
Ntp208
Rp209
(dp210
g16
g0
(g17
g2
Ntp211
Rp212
(dp213
g21
(lp214
g0
(g23
g2
Ntp215
Rp216
(dp217
g27
V<h1 style="text-align:center">Spinner control</h1><p>The spinner control creates a JQuery UI spinner.</p><h2>Spinner API</h2><p>Package: <code>larch.controls.spinner</code></p><p><code>class spinner (CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;<code>spinner(self, on_change=None, value=0, input_name='spinner')</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>on_change</code>: callback function of the form&nbsp;<code>fn(event, value)</code>&nbsp;that is invoked when the user changes the spinner's value</li><li><code>value</code>: the initial value</li><li><code>input_name</code>: the value of the name attribute of the <code>input</code> tag used to create the spinner</li></ul><p style="margin-left:40px">Methods:</p><p style="margin-left:80px"><code>set_value(self, value)</code></p><p style="margin-left:120px">Set the value of the spinner</p><p style="margin-left:120px">Parameters:</p><ul style="margin-left:120px"><li><code>value</code>: the new value</li></ul><p><br></p>
p218
sg29
g212
sbag0
(g23
g2
Ntp219
Rp220
(dp221
g27
V<h2>Example</h2>
p222
sg29
g212
sbag0
(g34
g2
Ntp223
Rp224
(dp225
g38
g0
(g39
g2
Ntp226
Rp227
(dp228
g38
V# Import EventViewer\u000afrom ctltest.lib.eventview import EventViewer\u000a# Imort spinner, import button for reset\u000afrom larch.controls import spinner, button\u000a# Import Html so that we can spatially arrange elements\u000afrom larch.pres.html import Html\u000a\u000a# Event viewer to display events\u000aev = EventViewer()\u000a\u000areset = button.button('Set value to 1', lambda event: s.set_value(1.0))\u000a\u000as = spinner.spinner(on_change=lambda event, value: ev('Change {0}'.format(value)), value=1.0)\u000a\u000a# Arrange the spinner, the reset button and the event viewer in a column\u000aHtml(s, '<br>', reset, '<br>', ev)
p229
sg44
I01
sbsg29
g212
sbag0
(g23
g2
Ntp230
Rp231
(dp232
g27
V<h2>Live spinner API</h2><p>Live spinners edit a value contained in a live value. If multiple spinners are editing the same live value, they will be synchronised</p><p><code>class live_spinner&nbsp;(CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;<code>live_slider(self, live, update_on_slide=False, &nbsp;width=None, min=None, max=None, step=None, orientation=None, animate=False, disabled=False)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>live</code>: the live value whose value the slider is to display and edit</li><li><code>input_name</code>: the value of the name attribute of the&nbsp;<code>input</code>&nbsp;tag used to create the spinner</li></ul><p><br></p>
p233
sg29
g212
sbag0
(g23
g2
Ntp234
Rp235
(dp236
g27
V<h2>Example</h2>
p237
sg29
g212
sbag0
(g34
g2
Ntp238
Rp239
(dp240
g38
g0
(g39
g2
Ntp241
Rp242
(dp243
g38
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue(1.0)\u000a\u000aspinner.live_spinner(x)
p244
sg44
I01
sbsg29
g212
sbag0
(g23
g2
Ntp245
Rp246
(dp247
g27
V<p>The second live spinner:</p>
p248
sg29
g212
sbag0
(g34
g2
Ntp249
Rp250
(dp251
g38
g0
(g39
g2
Ntp252
Rp253
(dp254
g38
Vspinner.live_spinner(x)
p255
sg44
I01
sbsg29
g212
sbasbsg137
VSpinner
p256
sg139
I3
sbag0
(g12
g2
Ntp257
Rp258
(dp259
g16
g0
(g17
g2
Ntp260
Rp261
(dp262
g21
(lp263
g0
(g23
g2
Ntp264
Rp265
(dp266
g27
V<h1 style="text-align:center">ckEditor control</h1><p>The ckEditor&nbsp;control creates a ckEditor based rich text editing pane.</p><h2>API</h2><p>Package:&nbsp;<code>larch.controls.ckeditor</code></p><p><code>class ckeditor (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>ckeditor(self, text, immediate_events=False, use_edit_button=False, config=None, on_edit=None, on_focus=None, on_blur=None)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>text</code>: the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>use_edit_button</code>: if False the component&nbsp;is always editable, if True the use must enable edit mode by Alt-clicking or hovering over the component&nbsp;and clicking the edit button that appears</li><li><code>config</code>: ckEditor <a data-cke-saved-href="http://docs.ckeditor.com/#!/api/CKEDITOR.config" href="http://docs.ckeditor.com/#!/api/CKEDITOR.config">configuration</a></li><li><code>on_edit</code>: a function of the form <code>fn(event)</code> that is invoked when the content is edited</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li></ul>
p267
sg29
g261
sbag0
(g23
g2
Ntp268
Rp269
(dp270
g27
V<h2>Examples</h2>
p271
sg29
g261
sbag0
(g34
g2
Ntp272
Rp273
(dp274
g38
g0
(g39
g2
Ntp275
Rp276
(dp277
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import ckeditor
p278
sg44
I01
sbsg29
g261
sbag0
(g23
g2
Ntp279
Rp280
(dp281
g27
V<p>A basic ckeditor:</p>
p282
sg29
g261
sbag0
(g34
g2
Ntp283
Rp284
(dp285
g38
g0
(g39
g2
Ntp286
Rp287
(dp288
g38
V# An event viewer logs events and displays them\u000aev1 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>',\u000a                       on_edit=lambda event, content: ev1('Edit'), on_focus=lambda event: ev1('Focus'), on_blur=lambda event: ev1('Blur'))\u000a# Place the event viewer below the control\u000aev1.below(ed)
p289
sg44
I01
sbsg29
g261
sbag0
(g23
g2
Ntp290
Rp291
(dp292
g27
V<p>With immediate events enabled:</p>
p293
sg29
g261
sbag0
(g34
g2
Ntp294
Rp295
(dp296
g38
g0
(g39
g2
Ntp297
Rp298
(dp299
g38
Vev2 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>', immediate_events=True,\u000a                       on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed)
p300
sg44
I01
sbsg29
g261
sbag0
(g23
g2
Ntp301
Rp302
(dp303
g27
V<p>With edit button enabled:</p>
p304
sg29
g261
sbag0
(g34
g2
Ntp305
Rp306
(dp307
g38
g0
(g39
g2
Ntp308
Rp309
(dp310
g38
Vev3 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>', use_edit_button=True,\u000a                        on_edit=lambda event, content: ev3('Edit'), on_focus=lambda event: ev3('Focus'), on_blur=lambda event: ev3('Blur'))\u000aev3.below(ed)
p311
sg44
I01
sbsg29
g261
sbag0
(g23
g2
Ntp312
Rp313
(dp314
g27
V<h2>Editing a live value</h2><p>The live variants of the ckeditor control edit live values. If the value contained by a live value is modified externally, the control will update correspondingly.</p><h2>API</h2><p><code>live_ckeditor(live, immediate_events=False, use_edit_button=False, config=None, on_focus=None, on_blur=None)</code></p><p>Parameters:</p><ul><li><code>live</code>: a live value containing&nbsp;the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>use_edit_button</code>: if False the component&nbsp;is always editable, if True the use must enable edit mode by Alt-clicking or hovering over the component&nbsp;and clicking the edit button that appears</li><li><code>config</code>: ckEditor configuration</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li></ul>
p315
sg29
g261
sbag0
(g23
g2
Ntp316
Rp317
(dp318
g27
V<h2>Examples</h2>
p319
sg29
g261
sbag0
(g34
g2
Ntp320
Rp321
(dp322
g38
g0
(g39
g2
Ntp323
Rp324
(dp325
g38
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('<h1>Test</h1>')
p326
sg44
I01
sbsg29
g261
sbag0
(g23
g2
Ntp327
Rp328
(dp329
g27
V<p>Example with two live ckeditors editing the same live value; they will be synchronised on focus and on blur.</p>
p330
sg29
g261
sbag0
(g34
g2
Ntp331
Rp332
(dp333
g38
g0
(g39
g2
Ntp334
Rp335
(dp336
g38
Vckeditor.live_ckeditor(x)
p337
sg44
I01
sbsg29
g261
sbag0
(g34
g2
Ntp338
Rp339
(dp340
g38
g0
(g39
g2
Ntp341
Rp342
(dp343
g38
Vckeditor.live_ckeditor(x)
p344
sg44
I01
sbsg29
g261
sbag0
(g23
g2
Ntp345
Rp346
(dp347
g27
V<p>The same live value being edited, this time with edit buttons:</p>
p348
sg29
g261
sbag0
(g34
g2
Ntp349
Rp350
(dp351
g38
g0
(g39
g2
Ntp352
Rp353
(dp354
g38
Vckeditor.live_ckeditor(x, use_edit_button=True)
p355
sg44
I01
sbsg29
g261
sbag0
(g34
g2
Ntp356
Rp357
(dp358
g38
g0
(g39
g2
Ntp359
Rp360
(dp361
g38
Vckeditor.live_ckeditor(x, use_edit_button=True)
p362
sg44
I01
sbsg29
g261
sbasbsg137
VckEditor
p363
sg139
I4
sbag0
(g12
g2
Ntp364
Rp365
(dp366
g16
g0
(g17
g2
Ntp367
Rp368
(dp369
g21
(lp370
g0
(g23
g2
Ntp371
Rp372
(dp373
g27
V<h1 style="text-align:center">CodeMirror control</h1><p>The CodeMirror control creates a CodeMirror&nbsp;based source code&nbsp;editing pane.</p><h2>API</h2><p>Package:&nbsp;<code>larch.controls.code_mirror</code></p><p><code>class code_mirror (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>code_mirror(self,&nbsp;text, immediate_events=False, config=None, on_edit=None, on_focus=None, on_blur=None, modes=None)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>text</code>: the text display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>config</code>: CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/doc/manual.html#config" href="http://codemirror.net/doc/manual.html#config">configuration</a></li><li><code>on_edit</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the content is edited</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li><li><code>modes</code>:&nbsp;a list of names of CodeMirror&nbsp;language plugins to load (e.g. '<code>python</code>', '<code>javascript</code>', '<code>glsl</code>', etc; see CodeMirror <a data-cke-saved-href="http://codemirror.net/mode/" href="http://codemirror.net/mode/">modes</a>)</li></ul>
p374
sg29
g368
sbag0
(g23
g2
Ntp375
Rp376
(dp377
g27
V<h2>Examples</h2>
p378
sg29
g368
sbag0
(g34
g2
Ntp379
Rp380
(dp381
g38
g0
(g39
g2
Ntp382
Rp383
(dp384
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import code_mirror
p385
sg44
I01
sbsg29
g368
sbag0
(g23
g2
Ntp386
Rp387
(dp388
g27
V<p>A basic CodeMirror:</p>
p389
sg29
g368
sbag0
(g34
g2
Ntp390
Rp391
(dp392
g38
g0
(g39
g2
Ntp393
Rp394
(dp395
g38
V# An event viewer logs events and displays them\u000aev1 = EventViewer()\u000aed = code_mirror.code_mirror('def f(x):\u005cn\u005ctreturn x*x\u005cn',\u000a                             on_edit=lambda event, content: ev1('Edit'), on_focus=lambda event: ev1('Focus'), on_blur=lambda event: ev1('Blur'))\u000a# Place the event viewer below the control\u000aev1.below(ed)
p396
sg44
I01
sbsg29
g368
sbag0
(g23
g2
Ntp397
Rp398
(dp399
g27
V<p>A CodeMirror with immediate events enabled:</p>
p400
sg29
g368
sbag0
(g34
g2
Ntp401
Rp402
(dp403
g38
g0
(g39
g2
Ntp404
Rp405
(dp406
g38
Vev2 = EventViewer()\u000aed = code_mirror.code_mirror('def f(x):\u005cn\u005ctreturn x*x\u005cn', immediate_events=True,\u000a                             on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed)
p407
sg44
I01
sbsg29
g368
sbag0
(g23
g2
Ntp408
Rp409
(dp410
g27
V<h2>Editing a live value</h2><p>The live variants of the CodeMirror&nbsp;control edit live values. If the value contained by a live value is modified externally, the control will update correspondingly.</p><h2>API</h2><p><code>live_code_mirror(live, immediate_events=False, config=None, on_focus=None, on_blur=None, modes=None, text_filter_fn=None)</code></p><p>Parameters:</p><ul><li><code>live</code>: a live value containing&nbsp;the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>config</code>: CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/doc/manual.html#config" href="http://codemirror.net/doc/manual.html#config">configuration</a></li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li><li><code>modes</code>:&nbsp;a list of names of CodeMirror&nbsp;language plugins to load (e.g. '<code>python</code>', '<code>javascript</code>', '<code>glsl</code>', etc; see CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/mode/" href="http://codemirror.net/mode/">modes</a>)</li><li><code>text_filter_fn</code>: a function of the form fn(text);&nbsp;when storing the text from the CodeMirror into the live value, the text is first passed through this function&nbsp;and its return value is used. This is necessary when editing Python code, as pasting from external sources can cause the source to indent with tabs on some lines and spaces on others. This inconsistency is now permitted by Python. <code>text_filter_fn</code> would be used in this case to convert leading tabs into spaces.</li></ul>
p411
sg29
g368
sbag0
(g23
g2
Ntp412
Rp413
(dp414
g27
V<h2>Examples</h2><p>Two CodeMirrors&nbsp;editing a live value; they will synchronise there contents after a delay of about 1s.</p>
p415
sg29
g368
sbag0
(g34
g2
Ntp416
Rp417
(dp418
g38
g0
(g39
g2
Ntp419
Rp420
(dp421
g38
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Test 1\u005cnTest 2\u005cn')\u000a\u000acode_mirror.live_code_mirror(x)
p422
sg44
I01
sbsg29
g368
sbag0
(g34
g2
Ntp423
Rp424
(dp425
g38
g0
(g39
g2
Ntp426
Rp427
(dp428
g38
Vcode_mirror.live_code_mirror(x)
p429
sg44
I01
sbsg29
g368
sbasbsg137
VCodeMirror
p430
sg139
I5
sbag0
(g12
g2
Ntp431
Rp432
(dp433
g16
g0
(g17
g2
Ntp434
Rp435
(dp436
g21
(lp437
g0
(g23
g2
Ntp438
Rp439
(dp440
g27
V<h1 style="text-align:center">Text entry&nbsp;control</h1><p>The spinner control creates a JQuery UI spinner.</p><h2>Text entry API</h2><p>Package:&nbsp;<code>larch.controls.text_entry</code></p><p><code>class text_entry (CompositePres)</code></p><p style="margin-left:40px">Constructor:&nbsp;<code>text_entry(self, text, immediate_events=False, on_edit=None, width=None)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>text</code>: the initial text</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>on_edit</code>: callback function of the form&nbsp;<code>fn(event, value)</code>&nbsp;that is invoked when the user edits the text</li><li><code>width</code>: width of the control; ints or longs will be interpreted as width in pixels, otherwise use string in CSS form, e.g. '100px', '10em' or '50%'</li></ul><p style="margin-left:40px">Methods:</p><p style="margin-left:80px"><code>set_text(self, text)</code></p><p style="margin-left:120px">Set the text displayed in the text entry</p><p style="margin-left:120px">Parameters:</p><ul style="margin-left:120px"><li><code>text</code>: the new text</li></ul><p><br></p>
p441
sg29
g435
sbag0
(g23
g2
Ntp442
Rp443
(dp444
g27
V<h2>Example</h2>
p445
sg29
g435
sbag0
(g34
g2
Ntp446
Rp447
(dp448
g38
g0
(g39
g2
Ntp449
Rp450
(dp451
g38
V# Import EventViewer\u000afrom ctltest.lib.eventview import EventViewer\u000a# Import text_entry, import button for reset\u000afrom larch.controls import text_entry, button\u000a# Import Html so that we can spatially arrange elements\u000afrom larch.pres.html import Html\u000a\u000a# Event viewer to display events\u000aev1 = EventViewer()\u000a\u000areset1 = button.button('Reset text', lambda event: t1.set_text('Hello world'))\u000a\u000at1 = text_entry.text_entry('Hello world', on_edit=lambda event, text: ev1('Edit: {0}'.format(text)))\u000a\u000aHtml(t1, '<br>', reset1, '<br>', ev1)
p452
sg44
I01
sbsg29
g435
sbag0
(g23
g2
Ntp453
Rp454
(dp455
g27
V<p>Text entry control with width specified and immediate events enabled:</p>
p456
sg29
g435
sbag0
(g34
g2
Ntp457
Rp458
(dp459
g38
g0
(g39
g2
Ntp460
Rp461
(dp462
g38
Vev2 = EventViewer()\u000a\u000areset2 = button.button('Reset text', lambda event: t2.set_text('Hello world'))\u000a\u000at2 = text_entry.text_entry('Hello world', immediate_events=True, on_edit=lambda event, text: ev2('Edit: {0}'.format(text)), width=600)\u000a\u000aHtml(t2, '<br>', reset2, '<br>', ev2)
p463
sg44
I01
sbsg29
g435
sbag0
(g23
g2
Ntp464
Rp465
(dp466
g27
V<h2>Live text entry API</h2><p>Live text&nbsp;entries edit a value contained in a live value. If multiple controls are editing the same live value, they will be synchronised</p><p><code>class live_text_entry (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>live_text_entry(self, live, immediate_events=False, width=None)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>live</code>: the live value whose value the text entry is to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>width</code>: width of the control; ints or longs will be interpreted as width in pixels, otherwise use string in CSS form, e.g. '100px', '10em' or '50%'</li></ul><p><br></p>
p467
sg29
g435
sbag0
(g23
g2
Ntp468
Rp469
(dp470
g27
V<h2>Examples</h2><p>A live text entry editing a live value (immediate events is turned off, so edits to this text entry will be reflected in the one below after a delay):</p>
p471
sg29
g435
sbag0
(g34
g2
Ntp472
Rp473
(dp474
g38
g0
(g39
g2
Ntp475
Rp476
(dp477
g38
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Hello live')\u000a\u000atext_entry.live_text_entry(x)
p478
sg44
I01
sbsg29
g435
sbag0
(g23
g2
Ntp479
Rp480
(dp481
g27
V<p>Another live text entry editing the same value, this time with immediate events enabled (modifications to this text entry will be immediately reflected in the one above):</p>
p482
sg29
g435
sbag0
(g34
g2
Ntp483
Rp484
(dp485
g38
g0
(g39
g2
Ntp486
Rp487
(dp488
g38
Vtext_entry.live_text_entry(x, immediate_events=True)
p489
sg44
I01
sbsg29
g435
sbasbsg137
VTextEntry
p490
sg139
I6
sbag0
(g12
g2
Ntp491
Rp492
(dp493
g16
g0
(g17
g2
Ntp494
Rp495
(dp496
g21
(lp497
g0
(g23
g2
Ntp498
Rp499
(dp500
g27
V<h1 style="text-align:center">Noty control</h1><p>The noty control displays it's contents in a Noty.js notification box. There are few limitations on the content that can be placed in a noty; live, interactive content and objects may be used as normal. You will however need to bear in mind that Noty catches some events (e.g. clicks) for itself; this can interfere with your the operation of its contents.&nbsp;Note that it is not enough to simply construct the dialog control; you must call the&nbsp;<code>show_on</code>&nbsp;method to display it.</p><h2>API</h2><p>\u200bPackage:&nbsp;<code>larch.controls.noty</code></p><p><code>class noty (object)</code></p><p style="margin-left: 40px;">Constructor: <code>noty(self, contents, **options)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li><code>contents</code>: the noty contents</li><li><code>options</code>: noty&nbsp;<a data-cke-saved-href="http://needim.github.io/noty/#options" href="http://needim.github.io/noty/#options">options</a></li></ul><p style="margin-left: 40px;">Methods:</p><p style="margin-left: 80px;"><code>def show_on(self, target)</code></p><p style="margin-left: 120px;">Shows the noty notification box. You must call this method to show the noty.</p><p style="margin-left: 120px;">Parameters:</p><ul style="margin-left: 120px;"><li><code>target</code>: identifies the page on which to show the noty.&nbsp;Can be: an&nbsp;<code>Event</code>,&nbsp;<code>DynamicPage</code>,&nbsp;<code>DynamicSegment</code>,&nbsp;<code>_FragmentView</code>&nbsp;or&nbsp;<code>IncrementalView</code>.</li></ul>
p501
sg29
g495
sbag0
(g23
g2
Ntp502
Rp503
(dp504
g27
V<h2>Example</h2><p>The example below shows a button that will display the noty. Notice how the slider below the button and the slider within the noty are synchronised.</p>
p505
sg29
g495
sbag0
(g34
g2
Ntp506
Rp507
(dp508
g38
g0
(g39
g2
Ntp509
Rp510
(dp511
g38
Vfrom larch.controls import noty, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    notification_content = Html('<h3>Notification</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    n = noty.noty(notification_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    n.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the noty, x, and a slider\u000aHtml(button.button('Show notification', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))\u000a
p512
sg44
I01
sbsg29
g495
sbasbsg137
VNoty
p513
sg139
I7
sbag0
(g12
g2
Ntp514
Rp515
(dp516
g16
g0
(g17
g2
Ntp517
Rp518
(dp519
g21
(lp520
g0
(g23
g2
Ntp521
Rp522
(dp523
g27
V<h1 style="text-align:center">Dialog&nbsp;control</h1><p>The dialog control displays it's contents in a JQuery dialog box. There are few limitations on the content that can be placed in a dialog; live, interactive content and objects may be used as normal. Note that it is not enough to simply construct the dialog control; you must call the&nbsp;<code>show_on</code> method to display it.</p><h2>API</h2><p>\u200bPackage:&nbsp;<code>larch.controls.dialog</code></p><p><code>class dialog (object)</code></p><p style="margin-left:40px">Constructor: <code>dialog(self,&nbsp;contents, **options)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>contents</code>: the dialog box contents</li><li><code>options</code>: JQuery UI dialog <a data-cke-saved-href="http://api.jqueryui.com/dialog/" href="http://api.jqueryui.com/dialog/">options</a></li></ul><p style="margin-left:40px">Methods:</p><p style="margin-left:80px"><code>def show_on(self, target)</code></p><p style="margin-left:120px">Shows the dialog box. You must call this method to display the dialog box.</p><p style="margin-left:120px">Parameters:</p><ul style="margin-left:120px"><li><code>target</code>: identifies the page on which to show the dialog box.&nbsp;Can be: an <code>Event</code>,&nbsp;<code>DynamicPage</code>, <code>DynamicSegment</code>, <code>_FragmentView</code> or&nbsp;<code>IncrementalView</code>.</li></ul>
p524
sg29
g518
sbag0
(g23
g2
Ntp525
Rp526
(dp527
g27
V<h2>Example</h2><p>The example below shows a button that will display the dialog. Notice how the slider below the button and the slider within the dialog are synchronised.</p>
p528
sg29
g518
sbag0
(g34
g2
Ntp529
Rp530
(dp531
g38
g0
(g39
g2
Ntp532
Rp533
(dp534
g38
Vfrom larch.controls import dialog, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    dialog_content = Html('<h3>Dialog</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    d = dialog.dialog(dialog_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    d.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the dialog, x, and a slider\u000aHtml(button.button('Show dialog', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))
p535
sg44
I01
sbsg29
g518
sbasbsg137
VDialog
p536
sg139
I8
sbag0
(clarch.apps.project.project_package
ProjectPackage
p537
g2
Ntp538
Rp539
(dp540
g137
Vlib
p541
sg10
(lp542
g0
(g12
g2
Ntp543
Rp544
(dp545
g16
g0
(g17
g2
Ntp546
Rp547
(dp548
g21
(lp549
g0
(g23
g2
Ntp550
Rp551
(dp552
g27
V<h1>Event viewer</h1>
p553
sg29
g547
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p554
g2
Ntp555
Rp556
(dp557
g38
g0
(clarch.apps.source_code
CSSCode
p558
g2
Ntp559
Rp560
(dp561
g38
V.event_viewer {\u000a    background: #f0f0f0;\u000a    border: 1px solid #c0c0c0;\u000a    border-radius: 5px;\u000a    padding: 5px;\u000a}\u000a\u000a.ev_title {\u000a    font-size: 0.85em;\u000a    color: #406080;\u000a}\u000a
p562
sg44
I01
sbsS'var_name'
p563
Vev_css
p564
sg29
g547
sbag0
(g34
g2
Ntp565
Rp566
(dp567
g38
g0
(g39
g2
Ntp568
Rp569
(dp570
g38
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000afrom larch.controls import button\u000a\u000aclass EventViewer (object):\u000a    def __init__(self):\u000a        self.__events = LiveValue([])\u000a        \u000a        \u000a    def __call__(self, *events):\u000a        self.__events.value = self.__events.value + list(events)\u000a        \u000a    \u000a    def __clear(self, event):\u000a        self.__events.value = []\u000a        \u000a        \u000a    def __present__(self, fragment):\u000a        clear = button.button('Clear', self.__clear)\u000a        return Html('<div class="event_viewer">',\u000a                    '<span class="ev_title">Events: ', clear, '</span>',\u000a                    '<br>',\u000a                    '<br>'.join([Html.escape_str(x)   for x in self.__events.value]),\u000a                    '</div>').use_css(source=ev_css)\u000a    \u000a    \u000a    def below(self, p):\u000a        return Html('<div>', p, '</div><div>', self, '</div>')
p571
sg44
I01
sbsg29
g547
sbasbsg137
Veventview
p572
sg139
I9
sbasbag0
(g12
g2
Ntp573
Rp574
(dp575
g16
g0
(g17
g2
Ntp576
Rp577
(dp578
g21
(lp579
g0
(g23
g2
Ntp580
Rp581
(dp582
g27
V<h1 style="text-align:center">Focusable</h1><p>Focusable wraps its contents and emits events when they gain or lose focus. The Larch client-side libraries keep track of which component currently has focus. The component that has focus will have a box shadow beneath it.</p><h2>API</h2><p>Package:&nbsp;<code>larch.controls.focusable</code></p><p><code>class focusable (CompositePres)</code></p><p style="margin-left: 40px;">Constructor: <code>focusable(self,&nbsp;contents, on_gain_focus=None, on_lose_focus=None)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li><code>contents</code>: the focusable contents</li><li><code>on_gain_focus</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the contents gain focus</li><li><code>on_lose_focus</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the contents lose focus</li></ul>
p583
sg29
g577
sbag0
(g23
g2
Ntp584
Rp585
(dp586
g27
V<h2>Example</h2>
p587
sg29
g577
sbag0
(g554
g2
Ntp588
Rp589
(dp590
g38
g0
(g558
g2
Ntp591
Rp592
(dp593
g38
V.focus_test_item {\u000a    padding: 5px;\u000a    margin: 5px;\u000a    border: 1px solid #d0d0d0;\u000a}
p594
sg44
I01
sbsg563
Vfocus_test_item_css
p595
sg29
g577
sbag0
(g34
g2
Ntp596
Rp597
(dp598
g38
g0
(g39
g2
Ntp599
Rp600
(dp601
g38
V# Import the event viewer so that we can show the events\u000afrom ctltest.lib.eventview import EventViewer\u000a\u000a# import focusable and Html\u000afrom larch.controls import focusable\u000afrom larch.pres.html import Html\u000a\u000a\u000a# Create an event viewer\u000aev = EventViewer()\u000a\u000a\u000a# Function to make cell contents; text in a div that uses the 'focus_test_item' class.\u000adef make_contents(text):\u000a    return Html('<div class="focus_test_item">{0}</div>'.format(text)).use_css(source=focus_test_item_css)\u000a\u000a# Table cell\u000adef cell(x):\u000a    return Html('<td>', x, '</td>')\u000a\u000a# Table that arranges cells horizontally\u000adef table(*cells):\u000a    return Html('<table><tr>').extend(cells).append('</tr></table>')\u000a\u000a\u000a# Focusable item; wrap the results of calling make_contens(), and attach event handlers that add messages to the event viewer\u000adef make_item(item_text):\u000a    return focusable.focusable(make_contents(item_text),\u000a                               on_gain_focus=lambda event: ev('{0} gained focus'.format(item_text)),\u000a                               on_lose_focus=lambda event: ev('{0} lost focus'.format(item_text)))\u000a\u000a# Make the focusable items\u000af1 = make_item('Item 1')\u000af2 = make_item('Item 2')\u000af3 = make_item('Item 3')\u000af4 = make_item('Item 4')\u000a\u000a# Arrange them with a table\u000ax = table(cell(f1), cell(f2), cell(f3), cell(f4))\u000a# Arrange the event viewer below the items\u000aev.below(x)
p602
sg44
I01
sbsg29
g577
sbasbsg137
VFocusable
p603
sg139
I10
sbag0
(g12
g2
Ntp604
Rp605
(dp606
g16
g0
(g17
g2
Ntp607
Rp608
(dp609
g21
(lp610
g0
(g23
g2
Ntp611
Rp612
(dp613
g27
V<h1 style="text-align:center">Forms</h1><p>The form control is used in place of an HTML form element; the form control wraps around the form contents. The form control handles the client side form submission and routes the form data on the server side to an event handler.</p><p>A function is also provided that creates a submit button and uses JQuery UI to alter/improve its appearance. You can use a standard HTML submit button if you wish.</p><h2>API</h2><p>Package:&nbsp;<code>larch.controls.form</code></p><p><code>class form (CompositePres)</code></p><p style="margin-left: 40px;">Constructor: <code>focusable(self,&nbsp;contents, on_submit=None)</code></p><p style="margin-left: 80px;">Parameters:</p><ul style="margin-left: 80px;"><li><code>contents</code>: the form contents</li><li><code>on_submit</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the use submits the form. The form data is accessible as a dictionary via <code>event.data\u200b<code>\u200b</code></code></li></ul><p><code>def submit_button(text)</code></p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>text</code>: the button text</li></ul>
p614
sg29
g608
sbag0
(g23
g2
Ntp615
Rp616
(dp617
g27
V<h2>Example</h2>
p618
sg29
g608
sbag0
(g34
g2
Ntp619
Rp620
(dp621
g38
g0
(g39
g2
Ntp622
Rp623
(dp624
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.pres.html import Html\u000afrom larch.controls import form\u000a\u000a# Event viewer so we can see the sutmit events\u000aev = EventViewer()\u000a\u000a# Build the form contents; a text entry box, a select and a submit button\u000aform_contents = Html('File base name: <input type="text" name="name"><br>',\u000a                     'Extension: <select name="ext">',\u000a                     '<option value="py">Python</option>',\u000a                     '<option value="java">Java</option>',\u000a                     '<option value="cs">C#</option>',\u000a                     '<option value="rb">Ruby</option>',\u000a                     '</select><br>',\u000a                     form.submit_button('Submit'))\u000a\u000a    \u000a# Build the form. Add a line to the event veiwer on submit\u000af = form.form(form_contents, on_submit=lambda event: ev('Submit: {0}'.format(event.data)))\u000a\u000a# Arrange the event veiwer below the form\u000aev.below(f)
p625
sg44
I01
sbsg29
g608
sbasbsg137
VForm
p626
sg139
I11
sbag0
(g12
g2
Ntp627
Rp628
(dp629
g16
g0
(g17
g2
Ntp630
Rp631
(dp632
g21
(lp633
g0
(g23
g2
Ntp634
Rp635
(dp636
g27
V<h1 style="text-align:center">Menu controls</h1><p>The <code>menu</code> module supports the construction of nested popup menus that are built using JQuery UI.</p><h2>API</h2><p>Package: <code>larch.controls.menu</code></p><p><code>def separator()</code></p><p style="margin-left:40px">The separator function creates a horizontal separator that can be placed in a menu.</p><p><code>class item (CompositePres)</code></p><p style="margin-left:40px">Constructor: <code>item(self, item_content, on_select=None)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>item_content</code>: the content to be displayed within the menu item</li><li><code>on_select</code>: a callback of the form <code>fn(event)</code> that is invoked when the user selects the menu item</li></ul><p><code>def sub_menu(item_content, items)</code></p><p style="margin-left:40px">Create a sub-menu that is accessible through an item.</p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>item_content</code>: the content to be displayed within the menu item that displays the sub-menu</li><li><code>items</code>: the items within the sub-menu</li></ul><p><code>def menu(items, drop_down=False)</code></p><p style="margin-left:40px">Creates a JQuery UI with the given items.</p><p style="margin-left:40px">Parameters:</p><ul style="margin-left:40px"><li><code>items</code>: the items to be placed in the menu</li><li><code>drop_down</code>: if True, the menu appears below the item that spawned it</li></ul><p><br></p>
p637
sg29
g631
sbag0
(g23
g2
Ntp638
Rp639
(dp640
g27
V<h2>Example</h2><p>First, we shall create the contents:</p>
p641
sg29
g631
sbag0
(g34
g2
Ntp642
Rp643
(dp644
g38
g0
(g39
g2
Ntp645
Rp646
(dp647
g38
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import menu\u000afrom larch.pres.html import Html\u000a\u000aev = EventViewer()\u000a\u000acpu = menu.sub_menu('CPU',\u000a                    [menu.item('x86', lambda event: ev('cpu_x86')),\u000a                     menu.item('ARM', lambda event: ev('cpu_arm'))])\u000ascreen = menu.sub_menu('Display',\u000a                       [menu.item('Touch', lambda event: ev('disp_touch')),\u000a                        menu.item('Monitor', lambda event: ev('disp_monitor'))])\u000aos = menu.sub_menu('OS',\u000a                   [menu.item('Windows', lambda event: ev('os_win')),\u000a                    menu.item('Linux', lambda event: ev('os_linux')),\u000a                    menu.item('Mac', lambda event: ev('os_mac'))])\u000alanguage = menu.sub_menu('Language',\u000a                         [menu.item('Python', lambda event: ev('lang_py')),\u000a                          menu.item('Java', lambda event: ev('lang_java')),\u000a                          menu.item('C#', lambda event: ev('lang_cs'))])\u000acontents = [cpu, screen, menu.separator(), os, language]\u000a
p648
sg44
I01
sbsg29
g631
sbag0
(g23
g2
Ntp649
Rp650
(dp651
g27
V<p>Using the&nbsp;<code>menu</code>&nbsp;function to display the menu directly, within a <code>div</code> with a width of 200px:</p>
p652
sg29
g631
sbag0
(g34
g2
Ntp653
Rp654
(dp655
g38
g0
(g39
g2
Ntp656
Rp657
(dp658
g38
VHtml('<div style="width: 200px;">', menu.menu(contents), '</div>')
p659
sg44
I01
sbsg29
g631
sbag0
(g23
g2
Ntp660
Rp661
(dp662
g27
V<p>Using the <code>sub_menu</code>&nbsp;function to display a button from which we can access the menu:</p>
p663
sg29
g631
sbag0
(g34
g2
Ntp664
Rp665
(dp666
g38
g0
(g39
g2
Ntp667
Rp668
(dp669
g38
VHtml('<div style="width: 200px;">', menu.menu([menu.sub_menu('system', contents)]), '</div>')
p670
sg44
I01
sbsg29
g631
sbag0
(g23
g2
Ntp671
Rp672
(dp673
g27
V<p>Finally, our event log:</p>
p674
sg29
g631
sbag0
(g34
g2
Ntp675
Rp676
(dp677
g38
g0
(g39
g2
Ntp678
Rp679
(dp680
g38
Vev
p681
sg44
I01
sbsg29
g631
sbasbsg137
VMenu
p682
sg139
I12
sbag0
(g12
g2
Ntp683
Rp684
(dp685
g16
g0
(g17
g2
Ntp686
Rp687
(dp688
g21
(lp689
g0
(g23
g2
Ntp690
Rp691
(dp692
g27
V<h1 style="text-align:center">Tabs control</h1><p>The tabs control takes a list of pairs of tab labels and tab contents and presents them in a jQuery UI tabbed box.</p><h2>API</h2><p>\u200bPackage:&nbsp;<code>larch.controls.tabs</code></p><p><code>class tabs(object)</code></p><p style="margin-left:40px">Constructor:&nbsp;<code>dialog(self,&nbsp;tab_label_and_content_pairs)</code></p><p style="margin-left:80px">Parameters:</p><ul style="margin-left:80px"><li><code>tab_label_and_content_pairs</code>: a sequence of pairs, where each pair is of the form <code>(tab_label, tab_content)</code></li></ul>
p693
sg29
g687
sbag0
(g34
g2
Ntp694
Rp695
(dp696
g38
g0
(g39
g2
Ntp697
Rp698
(dp699
g38
V# Import Html\u000afrom larch.pres.html import Html\u000a# Import tabs\u000afrom larch.controls.tabs import tabs\u000a\u000atabs([('First tab', Html('<p>This is the contents of the first tab</p>')),\u000a      ('Second tab', Html('<p>This is the contents of the second tab</p>')),\u000a      ('Third tab', Html('<p>This is the contents of the third tab</p>'))])\u000a
p700
sg44
I01
sbsg29
g687
sbasbsg137
VTabs
p701
sg139
I13
sbasb.