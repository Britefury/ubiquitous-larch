ccopy_reg
_reconstructor
p0
(clarch.apps.project.project_root
ProjectRoot
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'startup_page_id'
p6
NsS'python_package_name'
p7
Vctltest
p8
sS'front_page_id'
p9
NsS'contents'
p10
(lp11
g0
(clarch.apps.project.project_page
ProjectPage
p12
g2
Ntp13
Rp14
(dp15
S'data'
p16
g0
(clarch.apps.notebook.notebook
Notebook
p17
g2
Ntp18
Rp19
(dp20
S'blocks'
p21
(lp22
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p23
g2
Ntp24
Rp25
(dp26
S'text'
p27
V<h1>Slider test</h1><p>Imports and some live values</p>
p28
sS'notebook'
p29
g19
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p30
g2
Ntp31
Rp32
(dp33
S'code'
p34
g0
(clarch.apps.source_code
PythonCode
p35
g2
Ntp36
Rp37
(dp38
g34
Vfrom larch.controls import slider\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue(1.0)\u000ar = LiveValue((1.0, 4.0))
p39
sS'editable'
p40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp41
Rp42
(dp43
g27
V<p>Slider:</p>
p44
sg29
g19
sbag0
(g30
g2
Ntp45
Rp46
(dp47
g34
g0
(g35
g2
Ntp48
Rp49
(dp50
g34
Vslider.slider(value=1.0, min=0.0, max=10.0, step=0.01)
p51
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp52
Rp53
(dp54
g27
V<p>Range slider:</p>
p55
sg29
g19
sbag0
(g30
g2
Ntp56
Rp57
(dp58
g34
g0
(g35
g2
Ntp59
Rp60
(dp61
g34
Vslider.range_slider(values=[1.0, 9.0], min=0.0, max=10.0, step=0.01)
p62
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp63
Rp64
(dp65
g27
V<p>Two live sliders editing the same live value:</p>
p66
sg29
g19
sbag0
(g30
g2
Ntp67
Rp68
(dp69
g34
g0
(g35
g2
Ntp70
Rp71
(dp72
g34
Vslider.live_slider(x, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p73
sg40
I01
sbsg29
g19
sbag0
(g30
g2
Ntp74
Rp75
(dp76
g34
g0
(g35
g2
Ntp77
Rp78
(dp79
g34
Vslider.live_slider(x, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p80
sg40
I01
sbsg29
g19
sbag0
(g23
g2
Ntp81
Rp82
(dp83
g27
V<p>Two live range sliders editing the same live value:<br></p>
p84
sg29
g19
sbag0
(g30
g2
Ntp85
Rp86
(dp87
g34
g0
(g35
g2
Ntp88
Rp89
(dp90
g34
Vslider.live_range_slider(r, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p91
sg40
I01
sbsg29
g19
sbag0
(g30
g2
Ntp92
Rp93
(dp94
g34
g0
(g35
g2
Ntp95
Rp96
(dp97
g34
Vslider.live_range_slider(r, update_on_slide=True, min=0.0, max=10.0, step=0.01)
p98
sg40
I01
sbsg29
g19
sbasbsS'name'
p99
VSlider
p100
sS'id'
p101
I0
sbag0
(g12
g2
Ntp102
Rp103
(dp104
g16
g0
(g17
g2
Ntp105
Rp106
(dp107
g21
(lp108
g0
(g23
g2
Ntp109
Rp110
(dp111
g27
V<h1 style="text-align:center">Button control</h1><p>The button control creates a JQuery push button.</p><h2>API</h2><p><code>class button (CompositePres)</code></p><h3>Constructor</h3><p><code>button(self,&nbsp;text=None, action_fn=None, primary_icon=None, secondary_icon=None, disabled=False)</code></p><p>Parameters:</p><ul><li><code>text</code>: the text to display in the button, can use HTML</li><li><code>action_fn</code>: a function of the form <code>fn(event)</code> that is invoked when the button is clicked</li><li><code>primary_icon</code>: a string identifying the <a data-cke-saved-href="http://api.jqueryui.com/theming/icons/" href="http://api.jqueryui.com/theming/icons/">JQuery UI icon</a> to display on the left of the button</li><li><code>secondary_icon</code>: a string identifying the <a data-cke-saved-href="http://api.jqueryui.com/theming/icons/" href="http://api.jqueryui.com/theming/icons/">JQuery UI icon</a> to display on the right of the button</li><li><code>disabled</code>: the button will be disabled if True</li></ul>
p112
sg29
g106
sbag0
(g23
g2
Ntp113
Rp114
(dp115
g27
V<h2>Example</h2>
p116
sg29
g106
sbag0
(g30
g2
Ntp117
Rp118
(dp119
g34
g0
(g35
g2
Ntp120
Rp121
(dp122
g34
Vfrom ctltest.lib.eventview import EventViewer\u000afrom larch.controls import button\u000a\u000a# An event viewer logs events and displays them\u000aev = EventViewer()\u000abt = button.button(text='Hello world', action_fn=lambda event: ev('Clicked'), primary_icon='ui-icon-plus')\u000a# Place the event viewer below the control\u000aev.below(bt)
p123
sg40
I01
sbsg29
g106
sbasbsg99
VButton
p124
sg101
I1
sbag0
(g12
g2
Ntp125
Rp126
(dp127
g16
g0
(g17
g2
Ntp128
Rp129
(dp130
g21
(lp131
g0
(g23
g2
Ntp132
Rp133
(dp134
g27
V<h1 style="text-align:center">Drop-down expander&nbsp;control</h1><p>The drop-down expander control displays a header and contents, with the header in a button and the contents below. The contents are only visible when it is in an expanded state. The user may toggle the state by clicking the button.</p><h2>API</h2><p><code>class dropdown_expander&nbsp;(CompositePres)</code></p><h3>Constructor</h3><p><code>dropdown_expander(self, header, content, state=None, on_expand=None)</code></p><p>Parameters:</p><ul><li><font face="monospace">header</font>: the header that will be displayed in the button</li><li><code>content</code>: the content that will be displayed below the button</li><li><code>state</code>: the expander state; use a boolean to set the initial state (False=collapsed, True=expanded) or use a live value containing the state (the live value will be updated when the user expands or collapses the control)</li><li><code>on_expand</code>: a callback function of the form <code>fn(state)</code> that is invoked when the user expands or collapses the expander</li></ul>
p135
sg29
g129
sbag0
(g23
g2
Ntp136
Rp137
(dp138
g27
V<h2>Examples</h2><p>Basic expander:</p>
p139
sg29
g129
sbag0
(g30
g2
Ntp140
Rp141
(dp142
g34
g0
(g35
g2
Ntp143
Rp144
(dp145
g34
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import expander\u000a\u000a# Create an event viewer that will show is the events as they arrive\u000aev1 = EventViewer()\u000a\u000ax = expander.dropdown_expander('Click to expand', 'The expander contents', on_expand=lambda state: ev1('Expanded' if state else 'Collapsed'))\u000a\u000a# Arrange the event viewer below the expander\u000aev1.below(x)
p146
sg40
I01
sbsg29
g129
sbag0
(g23
g2
Ntp147
Rp148
(dp149
g27
V<p>With an an initial state of True:</p>
p150
sg29
g129
sbag0
(g30
g2
Ntp151
Rp152
(dp153
g34
g0
(g35
g2
Ntp154
Rp155
(dp156
g34
Vexpander.dropdown_expander('Click to expand', 'The expander contents; this should be visible to start with', True)
p157
sg40
I01
sbsg29
g129
sbag0
(g23
g2
Ntp158
Rp159
(dp160
g27
V<p>Using a live value as the state:</p>
p161
sg29
g129
sbag0
(g30
g2
Ntp162
Rp163
(dp164
g34
g0
(g35
g2
Ntp165
Rp166
(dp167
g34
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000as = LiveValue(False)\u000a\u000ax = expander.dropdown_expander('Click to expand', 'The expander contents; this should be visible to start with', s)\u000a\u000a# Display the live value above the expander; operating the expander will toggle the state between False and True\u000aHtml(s, '<br>', x)
p168
sg40
I01
sbsg29
g129
sbasbsg99
VDropDownExpander
p169
sg101
I2
sbag0
(g12
g2
Ntp170
Rp171
(dp172
g16
g0
(g17
g2
Ntp173
Rp174
(dp175
g21
(lp176
g0
(g23
g2
Ntp177
Rp178
(dp179
g27
V<p>Spinner test</p><p>Some imports and live values</p>
p180
sg29
g174
sbag0
(g30
g2
Ntp181
Rp182
(dp183
g34
g0
(g35
g2
Ntp184
Rp185
(dp186
g34
Vfrom larch.controls import spinner\u000afrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000ax = LiveValue(1.0)
p187
sg40
I01
sbsg29
g174
sbag0
(g23
g2
Ntp188
Rp189
(dp190
g27
V<p>Spinner:<br></p>
p191
sg29
g174
sbag0
(g30
g2
Ntp192
Rp193
(dp194
g34
g0
(g35
g2
Ntp195
Rp196
(dp197
g34
Vspinner.spinner(value=1.0)
p198
sg40
I01
sbsg29
g174
sbag0
(g23
g2
Ntp199
Rp200
(dp201
g27
V<p>Two live sliders editing the same live value:<br></p>
p202
sg29
g174
sbag0
(g30
g2
Ntp203
Rp204
(dp205
g34
g0
(g35
g2
Ntp206
Rp207
(dp208
g34
Vspinner.live_spinner(x)
p209
sg40
I01
sbsg29
g174
sbag0
(g30
g2
Ntp210
Rp211
(dp212
g34
g0
(g35
g2
Ntp213
Rp214
(dp215
g34
Vspinner.live_spinner(x)
p216
sg40
I01
sbsg29
g174
sbasbsg99
VSpinner
p217
sg101
I3
sbag0
(g12
g2
Ntp218
Rp219
(dp220
g16
g0
(g17
g2
Ntp221
Rp222
(dp223
g21
(lp224
g0
(g23
g2
Ntp225
Rp226
(dp227
g27
V<h1 style="text-align:center">ckEditor control</h1><p>The ckEditor&nbsp;control creates a ckEditor based rich text editing pane.</p><h2>API</h2><p><code>class ckeditor (CompositePres)</code></p><h3>Constructor</h3><p><code>ckeditor(self, text, immediate_events=False, use_edit_button=False, config=None, on_edit=None, on_focus=None, on_blur=None)</code></p><p>Parameters:</p><ul><li><code>text</code>: the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>use_edit_button</code>: if False the component&nbsp;is always editable, if True the use must enable edit mode by Alt-clicking or hovering over the component&nbsp;and clicking the edit button that appears</li><li><code>config</code>: ckEditor <a data-cke-saved-href="http://docs.ckeditor.com/#!/api/CKEDITOR.config" href="http://docs.ckeditor.com/#!/api/CKEDITOR.config">configuration</a></li><li><code>on_edit</code>: a function of the form <code>fn(event)</code> that is invoked when the content is edited</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li></ul>
p228
sg29
g222
sbag0
(g23
g2
Ntp229
Rp230
(dp231
g27
V<h2>Examples</h2>
p232
sg29
g222
sbag0
(g30
g2
Ntp233
Rp234
(dp235
g34
g0
(g35
g2
Ntp236
Rp237
(dp238
g34
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import ckeditor
p239
sg40
I01
sbsg29
g222
sbag0
(g23
g2
Ntp240
Rp241
(dp242
g27
V<p>A basic ckeditor:</p>
p243
sg29
g222
sbag0
(g30
g2
Ntp244
Rp245
(dp246
g34
g0
(g35
g2
Ntp247
Rp248
(dp249
g34
V# An event viewer logs events and displays them\u000aev1 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>',\u000a                       on_edit=lambda event, content: ev1('Edit'), on_focus=lambda event: ev1('Focus'), on_blur=lambda event: ev1('Blur'))\u000a# Place the event viewer below the control\u000aev1.below(ed)
p250
sg40
I01
sbsg29
g222
sbag0
(g23
g2
Ntp251
Rp252
(dp253
g27
V<p>With immediate events enabled:</p>
p254
sg29
g222
sbag0
(g30
g2
Ntp255
Rp256
(dp257
g34
g0
(g35
g2
Ntp258
Rp259
(dp260
g34
Vev2 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>', immediate_events=True,\u000a                       on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed)
p261
sg40
I01
sbsg29
g222
sbag0
(g23
g2
Ntp262
Rp263
(dp264
g27
V<p>With edit button enabled:</p>
p265
sg29
g222
sbag0
(g30
g2
Ntp266
Rp267
(dp268
g34
g0
(g35
g2
Ntp269
Rp270
(dp271
g34
Vev3 = EventViewer()\u000aed = ckeditor.ckeditor('<p>ckEditor test</p>', use_edit_button=True,\u000a                        on_edit=lambda event, content: ev3('Edit'), on_focus=lambda event: ev3('Focus'), on_blur=lambda event: ev3('Blur'))\u000aev3.below(ed)
p272
sg40
I01
sbsg29
g222
sbag0
(g23
g2
Ntp273
Rp274
(dp275
g27
V<h2>Editing a live value</h2><p>The live variants of the ckeditor control edit live values. If the value contained by a live value is modified externally, the control will update correspondingly.</p><h2>API</h2><p><code>live_ckeditor(live, immediate_events=False, use_edit_button=False, config=None, on_focus=None, on_blur=None)</code></p><p>Parameters:</p><ul><li><code>live</code>: a live value containing&nbsp;the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>use_edit_button</code>: if False the component&nbsp;is always editable, if True the use must enable edit mode by Alt-clicking or hovering over the component&nbsp;and clicking the edit button that appears</li><li><code>config</code>: ckEditor configuration</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li></ul>
p276
sg29
g222
sbag0
(g23
g2
Ntp277
Rp278
(dp279
g27
V<h2>Examples</h2>
p280
sg29
g222
sbag0
(g30
g2
Ntp281
Rp282
(dp283
g34
g0
(g35
g2
Ntp284
Rp285
(dp286
g34
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('<h1>Test</h1>')
p287
sg40
I01
sbsg29
g222
sbag0
(g23
g2
Ntp288
Rp289
(dp290
g27
V<p>Example with two live ckeditors editing the same live value; they will be synchronised on focus and on blur.</p>
p291
sg29
g222
sbag0
(g30
g2
Ntp292
Rp293
(dp294
g34
g0
(g35
g2
Ntp295
Rp296
(dp297
g34
Vckeditor.live_ckeditor(x)
p298
sg40
I01
sbsg29
g222
sbag0
(g30
g2
Ntp299
Rp300
(dp301
g34
g0
(g35
g2
Ntp302
Rp303
(dp304
g34
Vckeditor.live_ckeditor(x)
p305
sg40
I01
sbsg29
g222
sbag0
(g23
g2
Ntp306
Rp307
(dp308
g27
V<p>The same live value being edited, this time with edit buttons:</p>
p309
sg29
g222
sbag0
(g30
g2
Ntp310
Rp311
(dp312
g34
g0
(g35
g2
Ntp313
Rp314
(dp315
g34
Vckeditor.live_ckeditor(x, use_edit_button=True)
p316
sg40
I01
sbsg29
g222
sbag0
(g30
g2
Ntp317
Rp318
(dp319
g34
g0
(g35
g2
Ntp320
Rp321
(dp322
g34
Vckeditor.live_ckeditor(x, use_edit_button=True)
p323
sg40
I01
sbsg29
g222
sbasbsg99
VckEditor
p324
sg101
I4
sbag0
(g12
g2
Ntp325
Rp326
(dp327
g16
g0
(g17
g2
Ntp328
Rp329
(dp330
g21
(lp331
g0
(g23
g2
Ntp332
Rp333
(dp334
g27
V<h1 style="text-align:center">CodeMirror control</h1><p>The CodeMirror control creates a CodeMirror&nbsp;based source code&nbsp;editing pane.</p><h2>API</h2><p><code>class code_mirror (CompositePres)</code></p><h3>Constructor</h3><p><code>code_mirror(self,&nbsp;text, immediate_events=False, config=None, on_edit=None, on_focus=None, on_blur=None, modes=None)</code></p><p>Parameters:</p><ul><li><code>text</code>: the text display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>config</code>: CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/doc/manual.html#config" href="http://codemirror.net/doc/manual.html#config">configuration</a></li><li><code>on_edit</code>: a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the content is edited</li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li><li><code>modes</code>:&nbsp;a list of names of CodeMirror&nbsp;language plugins to load (e.g. '<code>python</code>', '<code>javascript</code>', '<code>glsl</code>', etc; see CodeMirror <a data-cke-saved-href="http://codemirror.net/mode/" href="http://codemirror.net/mode/">modes</a>)</li></ul>
p335
sg29
g329
sbag0
(g23
g2
Ntp336
Rp337
(dp338
g27
V<h2>Examples</h2>
p339
sg29
g329
sbag0
(g30
g2
Ntp340
Rp341
(dp342
g34
g0
(g35
g2
Ntp343
Rp344
(dp345
g34
Vfrom ctltest.lib.eventview import EventViewer\u000a\u000afrom larch.controls import code_mirror
p346
sg40
I01
sbsg29
g329
sbag0
(g23
g2
Ntp347
Rp348
(dp349
g27
V<p>A basic CodeMirror:</p>
p350
sg29
g329
sbag0
(g30
g2
Ntp351
Rp352
(dp353
g34
g0
(g35
g2
Ntp354
Rp355
(dp356
g34
V# An event viewer logs events and displays them\u000aev1 = EventViewer()\u000aed = code_mirror.code_mirror('def f(x):\u005cn\u005ctreturn x*x\u005cn',\u000a                             on_edit=lambda event, content: ev1('Edit'), on_focus=lambda event: ev1('Focus'), on_blur=lambda event: ev1('Blur'))\u000a# Place the event viewer below the control\u000aev1.below(ed)
p357
sg40
I01
sbsg29
g329
sbag0
(g23
g2
Ntp358
Rp359
(dp360
g27
V<p>A CodeMirror with immediate events enabled:</p>
p361
sg29
g329
sbag0
(g30
g2
Ntp362
Rp363
(dp364
g34
g0
(g35
g2
Ntp365
Rp366
(dp367
g34
Vev2 = EventViewer()\u000aed = code_mirror.code_mirror('def f(x):\u005cn\u005ctreturn x*x\u005cn', immediate_events=True,\u000a                             on_edit=lambda event, content: ev2('Edit'), on_focus=lambda event: ev2('Focus'), on_blur=lambda event: ev2('Blur'))\u000aev2.below(ed)
p368
sg40
I01
sbsg29
g329
sbag0
(g23
g2
Ntp369
Rp370
(dp371
g27
V<h2>Editing a live value</h2><p>The live variants of the CodeMirror&nbsp;control edit live values. If the value contained by a live value is modified externally, the control will update correspondingly.</p><h2>API</h2><p><code>live_code_mirror(live, immediate_events=False, config=None, on_focus=None, on_blur=None, modes=None, text_filter_fn=None)</code></p><p>Parameters:</p><ul><li><code>live</code>: a live value containing&nbsp;the HTML to display and edit</li><li><code>immediate_events</code>: if True, an edit event is emitted on each edit operation, if False, edit event is sent after a period of 1 second during which no edits took place</li><li><code>config</code>: CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/doc/manual.html#config" href="http://codemirror.net/doc/manual.html#config">configuration</a></li><li><code>on_focus</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component gains focus</li><li><code>on_blur</code>:&nbsp;a function of the form&nbsp;<code>fn(event)</code>&nbsp;that is invoked when the component loses focus</li><li><code>modes</code>:&nbsp;a list of names of CodeMirror&nbsp;language plugins to load (e.g. '<code>python</code>', '<code>javascript</code>', '<code>glsl</code>', etc; see CodeMirror&nbsp;<a data-cke-saved-href="http://codemirror.net/mode/" href="http://codemirror.net/mode/">modes</a>)</li><li><code>text_filter_fn</code>: a function of the form fn(text);&nbsp;when storing the text from the CodeMirror into the live value, the text is first passed through this function&nbsp;and its return value is used. This is necessary when editing Python code, as pasting from external sources can cause the source to indent with tabs on some lines and spaces on others. This inconsistency is now permitted by Python. <code>text_filter_fn</code> would be used in this case to convert leading tabs into spaces.</li></ul>
p372
sg29
g329
sbag0
(g23
g2
Ntp373
Rp374
(dp375
g27
V<h2>Examples</h2><p>Two CodeMirrors&nbsp;editing a live value; they will synchronise there contents after a delay of about 1s.</p>
p376
sg29
g329
sbag0
(g30
g2
Ntp377
Rp378
(dp379
g34
g0
(g35
g2
Ntp380
Rp381
(dp382
g34
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Test 1\u005cnTest 2\u005cn')\u000a\u000acode_mirror.live_code_mirror(x)
p383
sg40
I01
sbsg29
g329
sbag0
(g30
g2
Ntp384
Rp385
(dp386
g34
g0
(g35
g2
Ntp387
Rp388
(dp389
g34
Vcode_mirror.live_code_mirror(x)
p390
sg40
I01
sbsg29
g329
sbasbsg99
VCodeMirror
p391
sg101
I5
sbag0
(g12
g2
Ntp392
Rp393
(dp394
g16
g0
(g17
g2
Ntp395
Rp396
(dp397
g21
(lp398
g0
(g23
g2
Ntp399
Rp400
(dp401
g27
V<p>Text Entry</p>
p402
sg29
g396
sbag0
(g30
g2
Ntp403
Rp404
(dp405
g34
g0
(g35
g2
Ntp406
Rp407
(dp408
g34
Vfrom larch.controls import text_entry\u000a\u000atext_entry.text_entry('Hello world')
p409
sg40
I01
sbsg29
g396
sbag0
(g30
g2
Ntp410
Rp411
(dp412
g34
g0
(g35
g2
Ntp413
Rp414
(dp415
g34
Vfrom larch.live import LiveValue\u000a\u000ax = LiveValue('Hello live')\u000a\u000atext_entry.live_text_entry(x)
p416
sg40
I01
sbsg29
g396
sbag0
(g30
g2
Ntp417
Rp418
(dp419
g34
g0
(g35
g2
Ntp420
Rp421
(dp422
g34
Vtext_entry.live_text_entry(x)
p423
sg40
I01
sbsg29
g396
sbasbsg99
VTextEntry
p424
sg101
I6
sbag0
(g12
g2
Ntp425
Rp426
(dp427
g16
g0
(g17
g2
Ntp428
Rp429
(dp430
g21
(lp431
g0
(g23
g2
Ntp432
Rp433
(dp434
g27
V<h1 style="text-align:center">Noty control</h1><p>The noty control displays it's contents in a Noty.js notification box. There are few limitations on the content that can be placed in a noty; live, interactive content and objects may be used as normal. You will however need to bear in mind that Noty catches some events (e.g. clicks) for itself; this can interfere with your the operation of its contents.</p><h2>API</h2><p><code>class noty (object)</code></p><h3>Constructor</h3><p><code>noty(self, contents, **options)</code></p><p>Parameters:</p><ul><li><code>contents</code>: the noty contents</li><li><code>options</code>: noty&nbsp;<a data-cke-saved-href="http://needim.github.io/noty/#options" href="http://needim.github.io/noty/#options">options</a></li></ul><h3>Methods</h3><p><code>def show_on(self, target)</code></p><p>Paremeters:</p><ul><li><code>target</code>: identifies the page on which to show the noty.&nbsp;Can be: an&nbsp;<code>Event</code>,&nbsp;<code>DynamicPage</code>,&nbsp;<code>DynamicSegment</code>,&nbsp;<code>_FragmentView</code>&nbsp;or&nbsp;<code>IncrementalView</code>.</li></ul>
p435
sg29
g429
sbag0
(g23
g2
Ntp436
Rp437
(dp438
g27
V<h2>Example</h2><p>The example below shows a button that will display the noty. Notice how the slider below the button and the slider within the noty are synchronised.</p>
p439
sg29
g429
sbag0
(g30
g2
Ntp440
Rp441
(dp442
g34
g0
(g35
g2
Ntp443
Rp444
(dp445
g34
Vfrom larch.controls import noty, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    notification_content = Html('<h3>Notification</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    n = noty.noty(notification_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    n.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the noty, x, and a slider\u000aHtml(button.button('Show notification', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))\u000a
p446
sg40
I01
sbsg29
g429
sbasbsg99
VNoty
p447
sg101
I7
sbag0
(g12
g2
Ntp448
Rp449
(dp450
g16
g0
(g17
g2
Ntp451
Rp452
(dp453
g21
(lp454
g0
(g23
g2
Ntp455
Rp456
(dp457
g27
V<h1 style="text-align:center">Dialog&nbsp;control</h1><p>The dialog control displays it's contents in a JQuery dialog box. There are few limitations on the content that can be placed in a dialog; live, interactive content and objects may be used as normal.</p><h2>API</h2><p><code>class dialog (object)</code></p><h3>Constructor</h3><p><code>dialog(self,&nbsp;contents, **options)</code></p><p>Parameters:</p><ul><li><code>contents</code>: the dialog box contents</li><li><code>options</code>: JQuery UI dialog <a data-cke-saved-href="http://api.jqueryui.com/dialog/" href="http://api.jqueryui.com/dialog/">options</a></li></ul><h3>Methods</h3><p><code>def show_on(self, target)</code></p><p>Paremeters:</p><ul><li><code>target</code>: identifies the page on which to show the dialog box.&nbsp;Can be: an <code>Event</code>,&nbsp;<code>DynamicPage</code>, <code>DynamicSegment</code>, <code>_FragmentView</code> or&nbsp;<code>IncrementalView</code>.</li></ul>
p458
sg29
g452
sbag0
(g23
g2
Ntp459
Rp460
(dp461
g27
V<h2>Example</h2><p>The example below shows a button that will display the dialog. Notice how the slider below the button and the slider within the dialog are synchronised.</p>
p462
sg29
g452
sbag0
(g30
g2
Ntp463
Rp464
(dp465
g34
g0
(g35
g2
Ntp466
Rp467
(dp468
g34
Vfrom larch.controls import dialog, button, slider\u000afrom larch.pres.html import Html\u000afrom larch.live import LiveValue\u000a\u000a\u000ax = LiveValue(0)\u000a\u000adef on_click(event):\u000a    # Notification content consists of a heading, the value of x (live) and a slider editing x\u000a    dialog_content = Html('<h3>Dialog</h3><p>The current value is: ', x, '</p>', slider.live_slider(x, update_on_slide=True))\u000a    # Construct the noty\u000a    d = dialog.dialog(dialog_content)\u000a    # Use the show_on method to display it. You can also pass a fragment or a page.\u000a    d.show_on(event)\u000a    \u000a\u000a# Provide the user with a button that shows the dialog, x, and a slider\u000aHtml(button.button('Show dialog', on_click), '<br>The current value is: ', x, '<br>', slider.live_slider(x, update_on_slide=True))
p469
sg40
I01
sbsg29
g452
sbasbsg99
VDialog
p470
sg101
I8
sbag0
(clarch.apps.project.project_package
ProjectPackage
p471
g2
Ntp472
Rp473
(dp474
g99
Vlib
p475
sg10
(lp476
g0
(g12
g2
Ntp477
Rp478
(dp479
g16
g0
(g17
g2
Ntp480
Rp481
(dp482
g21
(lp483
g0
(g23
g2
Ntp484
Rp485
(dp486
g27
V<h1>Event viewer</h1>
p487
sg29
g481
sbag0
(clarch.apps.notebook.notebook
NotebookBlockSource
p488
g2
Ntp489
Rp490
(dp491
g34
g0
(clarch.apps.source_code
CSSCode
p492
g2
Ntp493
Rp494
(dp495
g34
V.event_viewer {\u000a    background: #e0e0e0;\u000a    border: 1px solid #c0c0c0;\u000a    border-radius: 5px;\u000a    padding: 5px;\u000a}
p496
sg40
I01
sbsS'var_name'
p497
Vev_css
p498
sg29
g481
sbag0
(g30
g2
Ntp499
Rp500
(dp501
g34
g0
(g35
g2
Ntp502
Rp503
(dp504
g34
Vfrom larch.live import LiveValue\u000afrom larch.pres.html import Html\u000a\u000aclass EventViewer (object):\u000a    def __init__(self):\u000a        self.__events = LiveValue([])\u000a        \u000a        \u000a    def __call__(self, *events):\u000a        self.__events.value = self.__events.value + list(events)\u000a        \u000a        \u000a    def __present__(self, fragment):\u000a        return Html('<div class="event_viewer">', '<br>'.join([Html.escape_str(x)   for x in self.__events.value]), '</div>').use_css(source=ev_css)\u000a    \u000a    \u000a    def below(self, p):\u000a        return Html('<div>', p, '</div><div>', self, '</div>')
p505
sg40
I01
sbsg29
g481
sbasbsg99
Veventview
p506
sg101
I9
sbasbasb.