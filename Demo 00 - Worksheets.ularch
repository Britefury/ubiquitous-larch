ccopy_reg
_reconstructor
p0
(clarch.apps.notebook.notebook
Notebook
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'blocks'
p6
(lp7
g0
(clarch.apps.notebook.notebook
NotebookBlockText
p8
g2
Ntp9
Rp10
(dp11
S'text'
p12
V<h1>Ubiquitous Larch Documents - notebooks</h1><h1>tl;dr</h1><p>Ubiquitous Larch notebooks&nbsp;are documents that mix rich text with executable code, along with its output. They are similar to IPython and Mathematica notebooks.&nbsp;You can re-execute the code in notebook by pressing Control-Enter. This allows you to rapidly experiment with code by editing and then executing it.</p><h1>Notebooks</h1><p>A notebook consist of editable blocks that contain either rich text (such as this block) or code (such as the block below). The results of executing code are displayed immediately below the block. To see execution results, you need to execute code by pressing Control-Enter.&nbsp;The notebook interface is similar to that provided by notebook environments such as Mathematica&nbsp;or the IPython web-based notebook system.</p><p>To edit the contents of a block, click within it to place the caret and start typing.</p><p>To add new blocks, click the 'Edit' menu at the top of the page to present options for inserting new blocks.</p><h1>Python Code</h1><p>Now, lets try some code.</p><p>Code within code blocks is executed, with the results displayed below.</p><p>Lets try some print statements to start with:</p>
p13
sS'notebook'
p14
g4
sbag0
(clarch.apps.notebook.notebook
NotebookBlockCode
p15
g2
Ntp16
Rp17
(dp18
S'code'
p19
g0
(clarch.apps.source_code
PythonCode
p20
g2
Ntp21
Rp22
(dp23
g19
Vprint 'Hello world'
p24
sS'editable'
p25
I01
sbsg14
g4
sbag0
(g8
g2
Ntp26
Rp27
(dp28
g12
V<p>Outout sent to StdOut or&nbsp;StdErr is displayed.</p><p>If the last line is an expression that can be evaluated, the resulting value is displayed; lets compute the area of a circle of radius 10:</p>
p29
sg14
g4
sbag0
(g15
g2
Ntp30
Rp31
(dp32
g19
g0
(g20
g2
Ntp33
Rp34
(dp35
g19
Vimport math\u000a\u000amath.pi*10*10
p36
sg25
I01
sbsg14
g4
sbag0
(g8
g2
Ntp37
Rp38
(dp39
g12
V<p>Objects can also be displayed. Lets define a simple class and display and instance of it:</p>
p40
sg14
g4
sbag0
(g15
g2
Ntp41
Rp42
(dp43
g19
g0
(g20
g2
Ntp44
Rp45
(dp46
g19
Vclass Point (object):\u000a    def __init__(self, x, y):\u000a    	self.x = x\u000a        self.y = y\u000a\u000aPoint(10.0, 20.0)
p47
sg25
I01
sbsg14
g4
sbag0
(g8
g2
Ntp48
Rp49
(dp50
g12
V<p>The sections ('Type', 'Attributes' and 'repr') can be expanded to show the type, attribute values and string representation of the object respectively. By default, Python objects are displayed in this debugger-style format.</p>
p51
sg14
g4
sbag0
(g8
g2
Ntp52
Rp53
(dp54
g12
V<h1>Acknowledgements</h1><p><span style="color: rgb(64, 64, 64); font-family: Oxygen, Tahoma, Geneva, sans-serif;">Rich text block editing is provided by the ckEditor library, while code editing is provided by CodeMirror.</span><br></p>
p55
sg14
g4
sbasb.