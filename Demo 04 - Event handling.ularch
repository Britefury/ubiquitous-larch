ccopy_reg
_reconstructor
p0
(clarch.worksheet.worksheet
Worksheet
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'blocks'
p6
(lp7
g0
(clarch.worksheet.worksheet
WorksheetBlockText
p8
g2
Ntp9
Rp10
(dp11
S'worksheet'
p12
g4
sS'text'
p13
V<h1>Event Handling</h1><p>U-Larch can receive events in client-side Javascript code and route them to the server-side Python code.</p><p>On the client-side, we call the <code>larch.postEvent</code> function, passing the source DOM node, the event name&nbsp;and event data (a value representable as JSON)&nbsp;as parameters. This event will be sent to the server.</p><p>The server maintains its own representation of the structure of the document, allowing it to ensure that the event is routed to the correct handler.</p><p>On the server side, we invoke the <code>with_event_handler</code> method, passing the event name and the handler function/callable as parameters.</p><p>In the following example, we will construct a button that sends an event that is handled server-side.</p>
p14
sbag0
(clarch.worksheet.worksheet
WorksheetBlockCode
p15
g2
Ntp16
Rp17
(dp18
g12
g4
sS'code'
p19
g0
(clarch.python
PythonCode
p20
g2
Ntp21
Rp22
(dp23
g19
V# We need Html pres type\u000afrom britefury.pres.html import Html\u000a\u000a# LiveValue objects simply display their contents, with one difference; if their value is modified, their on-screen representations are automaticall refreshed.\u000afrom britefury.live.live_value import LiveValue\u000a\u000ax = LiveValue(0)\u000a\u000ainc_button_js_src = """\u000afunction on_bt_clicked(node, operation) {\u000a	// Send an event:\u000a	// - from the DOM node referened by @node\u000a	// - the event is named "test_button_clicked"\u000a	// - the event data is the supplied @operation\u000a	larch.postEvent(node, "test_button_clicked", operation);\u000a}\u000a"""\u000a\u000a# The server side response function\u000adef on_client_side_button_clicked(event_name, event_data):\u000a    # event_name will be the name of the event sent by the client, in this case 'test_button_clicked'\u000a    \u000a    # event_data will receive the value of @operation sent from the client side\u000a    \u000a    # Increment the value in @x\u000a    x.value += 1\u000a\u000a\u000a# HTML that constructs a button that calls 'on_bt_clicked' when clicked\u000abutton = Html('<button onclick="javascript:on_bt_clicked(this, \u005c'+\u005c');">Increment</button>')\u000a\u000a# Attach the event handler\u000abutton = button.with_event_handler('test_button_clicked', on_client_side_button_clicked)\u000a\u000a# Reference the JS code\u000abutton = button.use_js(source=inc_button_js_src)\u000a\u000a# Arrange the button above the value:\u000aHtml(button, '<div>', x, '</div>')
p24
sS'editable'
p25
I01
sbsbasb.